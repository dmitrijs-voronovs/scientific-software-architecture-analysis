id,quality_attribute,keyword,matched_word,match_idx,sentence,source,author,repo,version,wiki,url
https://github.com/root-project/root/pull/10762:159,availability,operat,operations,159,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:396,availability,sli,slightly,396,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:524,availability,state,state,524,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:263,deployability,observ,observables,263,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:224,energy efficiency,model,model,224,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:524,integrability,state,state,524,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:248,modifiability,paramet,parameters,248,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:375,modifiability,Paramet,Parameter,375,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:396,reliability,sli,slightly,396,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:224,security,model,model,224,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:263,testability,observ,observables,263,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/pull/10762:550,usability,efficien,efficient,550,"[RF] Don't deep clone the RooAbsArg in `RooAbsReal::getPropagatedError`; The `RooAbsReal::getPropagatedError()` function was using some of the. most expensive operations in RooFit for larger computation graphs:. cloning the model, and figuring out parameters and observables. This was done for no apparent reason, as the `RooAbsReal` is not mutated. by `getPropagaterError`. Parameter values are slightly changed for. reevaluation, but they are reset right after. A final call to `getVal()`. is enough to reset the original state, which is much more efficient than. cloning everything. This change was motivated by the following forum post:. https://root-forum.cern.ch/t/getpropagatederror-method-taking-too-long-to-run/50392",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10762
https://github.com/root-project/root/issues/10763:133,availability,slo,slow,133,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:295,availability,error,errors,295,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:29,deployability,integr,integral,29,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:166,deployability,integr,integration,166,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:400,deployability,integr,integral,400,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:728,deployability,integr,integral,728,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:787,deployability,Log,Log,787,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:946,deployability,integr,integration,946,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1049,deployability,integr,integration,1049,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1147,deployability,integr,integral-for-roogenericpdf,1147,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:5,integrability,Configur,Configurable,5,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:29,integrability,integr,integral,29,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:166,integrability,integr,integration,166,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:400,integrability,integr,integral,400,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:728,integrability,integr,integral,728,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:946,integrability,integr,integration,946,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1049,integrability,integr,integration,1049,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1147,integrability,integr,integral-for-roogenericpdf,1147,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:29,interoperability,integr,integral,29,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:166,interoperability,integr,integration,166,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:400,interoperability,integr,integral,400,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:728,interoperability,integr,integral,728,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:946,interoperability,integr,integration,946,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1049,interoperability,integr,integration,1049,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1147,interoperability,integr,integral-for-roogenericpdf,1147,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:5,modifiability,Configur,Configurable,5,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:29,modifiability,integr,integral,29,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:166,modifiability,integr,integration,166,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:400,modifiability,integr,integral,400,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:728,modifiability,integr,integral,728,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:946,modifiability,integr,integration,946,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1049,modifiability,integr,integration,1049,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1147,modifiability,integr,integral-for-roogenericpdf,1147,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:227,performance,perform,perform,227,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:295,performance,error,errors,295,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:29,reliability,integr,integral,29,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:133,reliability,slo,slow,133,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:166,reliability,integr,integration,166,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:400,reliability,integr,integral,400,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:728,reliability,integr,integral,728,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:946,reliability,integr,integration,946,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1049,reliability,integr,integration,1049,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1147,reliability,integr,integral-for-roogenericpdf,1147,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:295,safety,error,errors,295,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:787,safety,Log,Log,787,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:5,security,Configur,Configurable,5,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:29,security,integr,integral,29,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:166,security,integr,integration,166,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:317,security,sign,significances,317,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:400,security,integr,integral,400,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:728,security,integr,integral,728,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:787,security,Log,Log,787,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:946,security,integr,integration,946,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1049,security,integr,integration,1049,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1147,security,integr,integral-for-roogenericpdf,1147,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:29,testability,integr,integral,29,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:166,testability,integr,integration,166,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:400,testability,integr,integral,400,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:728,testability,integr,integral,728,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:787,testability,Log,Log,787,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:946,testability,integr,integration,946,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1049,testability,integr,integration,1049,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:1147,testability,integr,integral-for-roogenericpdf,1147,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:97,usability,custom,custom,97,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:227,usability,perform,perform,227,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:295,usability,error,errors,295,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/issues/10763:597,usability,custom,custom,597,"[RF] Configurable analytical integral for RooGenericPdf; When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do. ```c. // Define custom pdf. RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));. // Set formula for analytical integral. my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");. ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10763
https://github.com/root-project/root/pull/10765:32,availability,down,down,32,[cmake] Pass CMAKE_CXX_STANDARD down to llvm.; See https://root-forum.cern.ch/t/gcc-cling-compile-with-std-c-17-still-contains-std-c-11/50417/1,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10765
https://github.com/root-project/root/pull/10765:118,deployability,contain,contains-std-c-,118,[cmake] Pass CMAKE_CXX_STANDARD down to llvm.; See https://root-forum.cern.ch/t/gcc-cling-compile-with-std-c-17-still-contains-std-c-11/50417/1,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10765
https://github.com/root-project/root/pull/10766:268,deployability,manag,managed,268,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:37,energy efficiency,Estimat,EstimateSummary,37,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:148,energy efficiency,Estimat,EstimateSummary,148,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:268,energy efficiency,manag,managed,268,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:308,energy efficiency,Measur,Measurement,308,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:617,energy efficiency,Measur,Measurement,617,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:1059,energy efficiency,power,power,1059,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:393,integrability,messag,message,393,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:393,interoperability,messag,message,393,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:609,interoperability,XML,XML,609,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:67,modifiability,paramet,parameter,67,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:683,modifiability,paramet,parameter,683,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:412,performance,time,time,412,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:268,safety,manag,managed,268,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:773,safety,avoid,avoid,773,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:991,usability,Close,Closes,991,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10766:1065,usability,user,users,1065,"[RF] Remove deprecated `HistFactory::EstimateSummary` and constant parameter flag in `NormFactory`; The longtime-deprecated `RooStats::HistFactory::EstimateSummary` class. is removed, including the functions that use it. The information that it. was meant to store is managed by the. `RooStats::HistFactory::Measurement` object since many years. As printed out by the HistFactory in a warning message for a long time. already, setting the `Const` attribute to the `<NormFactor>` tag is. deprecated and it will be ignored. Instead, add. `<ParamSetting Const=""True""> myparam </ParamSetting>`. to your top-level XML's `<Measurement>` entry. . This deprecation implied that the constant parameter flag in the. `RooStats:HistFactory::NormFactor` class had no effect as well. To avoid. ambiguity in the future, the possibility to set and retrieve this flag with. `NormFactor::SetConst()` and `NormFactor::GetConst()` was removed, and the. aforementioned deprecated warning is not printed anymore. Closes #8059. FYI @gartrog and @cburgard, if as ATLAS Higgs factory power users you have. something against this change please let me know!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10766
https://github.com/root-project/root/pull/10768:61,availability,operat,operator,61,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:149,availability,operat,operator,149,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:211,availability,error,error,211,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:249,availability,operat,operator,249,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:261,availability,Error,Error,261,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:454,availability,Operat,Operator,454,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:515,deployability,updat,updated,515,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:211,performance,error,error,211,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:261,performance,Error,Error,261,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:211,safety,error,error,211,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:261,safety,Error,Error,261,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:426,safety,test,test,426,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:485,safety,test,tested,485,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:515,safety,updat,updated,515,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:515,security,updat,updated,515,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:421,testability,unit,unit,421,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:426,testability,test,test,426,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:485,testability,test,tested,485,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:211,usability,error,error,211,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:261,usability,Error,Error,261,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/pull/10768:303,usability,user,user-images,303,[GSOC][TMVA][SOFIE] Fixed the implementation of MaxPool ONNX operator for 1d and 3d case ; # This Pull request: Fixes the Implementation of Max Pool operator for 1d and 3d cases. Earlier it was giving a runtime error for 1d and 3d cases of Max Pool operator. . Error is described here. ![image](https://user-images.githubusercontent.com/84740927/174000876-7cd1e82c-86b8-4713-bf11-ef36f66912a1.png). I have also added the unit test for Max Pool 1d and 3d Operator. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10768
https://github.com/root-project/root/issues/10769:32,modifiability,paramet,parameters,32,[hist] Use correct rounding for parameters in TFormula::GetExpFormula; See https://root-forum.cern.ch/t/tformula-getexpformula-parameter-rounding/50232,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10769
https://github.com/root-project/root/issues/10769:127,modifiability,paramet,parameter-rounding,127,[hist] Use correct rounding for parameters in TFormula::GetExpFormula; See https://root-forum.cern.ch/t/tformula-getexpformula-parameter-rounding/50232,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10769
https://github.com/root-project/root/pull/10770:79,availability,failur,failure,79,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:79,deployability,fail,failure,79,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:266,deployability,updat,updated,266,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:79,performance,failur,failure,79,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:79,reliability,fail,failure,79,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:236,safety,test,tested,236,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:266,safety,updat,updated,266,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:266,security,updat,updated,266,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:236,testability,test,tested,236,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10770:167,usability,support,support,167,Macos ft brotli off; # This Pull request:. ## Changes or fixes:. Fixes linking failure with libfreetype on macOS (arm and intel) due to missing brotli library. Brotli support is not needed for the fonts ROOT uses. ## Checklist:. - [x ] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10770
https://github.com/root-project/root/pull/10771:89,availability,Sla,Slave,89,"[RF] Fix crash when using RooXYChi2Var with RooSimultaneous; If a RooXYChi2Var is not a ""Slave"" in the RooAbsOptTestStatistic. framework, it doesn't do any actual computation and no initialization is. needed. It would not even work and causes a crash, because `_funcObsSet`. would be a `nullptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10771
https://github.com/root-project/root/pull/10771:89,reliability,Sla,Slave,89,"[RF] Fix crash when using RooXYChi2Var with RooSimultaneous; If a RooXYChi2Var is not a ""Slave"" in the RooAbsOptTestStatistic. framework, it doesn't do any actual computation and no initialization is. needed. It would not even work and causes a crash, because `_funcObsSet`. would be a `nullptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10771
https://github.com/root-project/root/pull/10771:141,reliability,doe,doesn,141,"[RF] Fix crash when using RooXYChi2Var with RooSimultaneous; If a RooXYChi2Var is not a ""Slave"" in the RooAbsOptTestStatistic. framework, it doesn't do any actual computation and no initialization is. needed. It would not even work and causes a crash, because `_funcObsSet`. would be a `nullptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10771
https://github.com/root-project/root/pull/10772:599,safety,test,test,599,"[RF] Improve the constructor matching in `RooFactoryWSTool`; So far, the a constructorr match was reported for. `RooWorkspace::factory` when the number of constructor args was larger. than the number of args passed to `factory`. Obviously, this lead to false positives, and it should actually check if. the number of passed args (plus 2 for name and title) is somewhere. between the number of minimum and maximum arguments that the constructor. can take. In other works, instead of assuming there is an arbitrary. number of default arguments one should do the check with their exact. number. A unit test to check that this works now is also implemented. Closes #7965.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10772
https://github.com/root-project/root/pull/10772:594,testability,unit,unit,594,"[RF] Improve the constructor matching in `RooFactoryWSTool`; So far, the a constructorr match was reported for. `RooWorkspace::factory` when the number of constructor args was larger. than the number of args passed to `factory`. Obviously, this lead to false positives, and it should actually check if. the number of passed args (plus 2 for name and title) is somewhere. between the number of minimum and maximum arguments that the constructor. can take. In other works, instead of assuming there is an arbitrary. number of default arguments one should do the check with their exact. number. A unit test to check that this works now is also implemented. Closes #7965.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10772
https://github.com/root-project/root/pull/10772:599,testability,test,test,599,"[RF] Improve the constructor matching in `RooFactoryWSTool`; So far, the a constructorr match was reported for. `RooWorkspace::factory` when the number of constructor args was larger. than the number of args passed to `factory`. Obviously, this lead to false positives, and it should actually check if. the number of passed args (plus 2 for name and title) is somewhere. between the number of minimum and maximum arguments that the constructor. can take. In other works, instead of assuming there is an arbitrary. number of default arguments one should do the check with their exact. number. A unit test to check that this works now is also implemented. Closes #7965.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10772
https://github.com/root-project/root/pull/10772:393,usability,minim,minimum,393,"[RF] Improve the constructor matching in `RooFactoryWSTool`; So far, the a constructorr match was reported for. `RooWorkspace::factory` when the number of constructor args was larger. than the number of args passed to `factory`. Obviously, this lead to false positives, and it should actually check if. the number of passed args (plus 2 for name and title) is somewhere. between the number of minimum and maximum arguments that the constructor. can take. In other works, instead of assuming there is an arbitrary. number of default arguments one should do the check with their exact. number. A unit test to check that this works now is also implemented. Closes #7965.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10772
https://github.com/root-project/root/pull/10772:654,usability,Close,Closes,654,"[RF] Improve the constructor matching in `RooFactoryWSTool`; So far, the a constructorr match was reported for. `RooWorkspace::factory` when the number of constructor args was larger. than the number of args passed to `factory`. Obviously, this lead to false positives, and it should actually check if. the number of passed args (plus 2 for name and title) is somewhere. between the number of minimum and maximum arguments that the constructor. can take. In other works, instead of assuming there is an arbitrary. number of default arguments one should do the check with their exact. number. A unit test to check that this works now is also implemented. Closes #7965.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10772
https://github.com/root-project/root/issues/10774:433,availability,Error,Error,433,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:476,availability,Error,Error,476,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:701,availability,error,error,701,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:433,performance,Error,Error,433,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:476,performance,Error,Error,476,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:701,performance,error,error,701,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:433,safety,Error,Error,433,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:476,safety,Error,Error,476,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:701,safety,error,error,701,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:988,security,modif,modifies,988,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:99,usability,behavi,behaviour,99,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:433,usability,Error,Error,433,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:476,usability,Error,Error,476,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/issues/10774:701,usability,error,error,701,"[TTree] Inconcistency with the TTreeReader's SetEntries.; I encountered the following inconcistent behaviour in the `TTreeReader`. ```cpp. auto dfWriter0 = RDataFrame(3).Define(""x"", [] { return 1; });. dfWriter0.Snapshot<int>(""treeA"", ""file0.root"", {""x""});. auto chain = std::make_shared<TChain>(""treeA"");. chain->Add(""file0.root"");. TTreeReader r(chain.get(), chain->GetEntryList());. r.SetEntriesRange(4, 5);. ```. this produces: `Error in <TTreeReader::SetEntriesRange()>: Error setting first entry 4: one of the readers was not successfully initialized`, which is good (as expected). On the other hand, if the range becomes `r.SetEntriesRange(3, 5)` - start is now the last index + 1, there is no error produced or etc. Using gdb, I saw that there is a call in `SetEntriesRange` to `SetEntry(beginEntry - 1)` (https://github.com/root-project/root/blob/f841b96e634b7f7136b0c80da0f9394e8e370314/tree/treeplayer/src/TTreeReader.cxx#L438). `SetEntry` however, calls `SetEntryBase`, which modifies `fEntry`. Hence, the quickfix to call `SetEntry(beginEntry)` is obviously dangerous. CC: @eguiraud @vepadulano",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10774
https://github.com/root-project/root/pull/10775:1361,availability,consist,consist,1361,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1256,deployability,contain,contains,1256,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1564,deployability,updat,updated,1564,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:588,energy efficiency,measur,measurements,588,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1164,energy efficiency,optim,optimized,1164,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:836,integrability,pub,public,836,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:843,integrability,interfac,interface,843,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1240,integrability,buffer,buffered,1240,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1344,integrability,buffer,buffered,1344,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:843,interoperability,interfac,interface,843,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:68,modifiability,exten,extends,68,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:724,modifiability,refact,refactor,724,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:843,modifiability,interfac,interface,843,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:403,performance,parallel,parallel,403,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:708,performance,throughput,throughput,708,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:724,performance,refactor,refactor,724,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1164,performance,optimiz,optimized,1164,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:772,safety,test,tests,772,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1534,safety,test,tested,1534,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1564,safety,updat,updated,1564,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1564,security,updat,updated,1564,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:772,testability,test,tests,772,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1534,testability,test,tested,1534,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:136,usability,prototyp,prototype,136,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:644,usability,indicat,indicate,644,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10775:1361,usability,consist,consist,1361,"[ntuple] Allow for vector commit of sealed pages; This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:. ```c++. virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);. void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);. ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:. - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId. The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation. - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range. via `CommitSealedPageV()`. - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:. - [X] tested changes locally. - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10775
https://github.com/root-project/root/pull/10776:479,availability,fault,fault,479,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:271,deployability,build,building,271,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:342,deployability,modul,modules,342,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:539,deployability,updat,updated,539,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:479,energy efficiency,fault,fault,479,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:212,modifiability,variab,variable,212,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:342,modifiability,modul,modules,342,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:479,performance,fault,fault,479,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:185,reliability,doe,does,185,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:479,reliability,fault,fault,479,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:342,safety,modul,modules,342,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:479,safety,fault,fault,479,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:509,safety,test,tested,509,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:539,safety,updat,updated,539,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:539,security,updat,updated,539,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/pull/10776:509,testability,test,tested,509,"Check whether ROOTSYS is defined in rootcling_stage1.; # This Pull request:. ## Changes or fixes:. It is not checked in the existing code whether `getenv(""ROOTSYS"")` returns `NULL`. It does so if the environment variable is not defined; it is exactly what happens during building [here](https://github.com/root-project/root/blob/master/cmake/modules/RootMacros.cmake#L584). Then `std::string` gets initialized from the C string from address 0, which may result in a segmentation fault. ## Checklist:. - [ x ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10776
https://github.com/root-project/root/issues/10777:14,availability,failur,failure,14,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1076,availability,error,error,1076,". Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1258,availability,error,error,1258,"s of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1367,availability,Error,Error,1367,"ll exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2726,availability,Operat,Operating,2726,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2801,availability,down,download,2801,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:8,deployability,Build,Build,8,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:14,deployability,fail,failure,14,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:514,deployability,build,build,514,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:520,deployability,fail,fails,520,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1336,deployability,build,build,1336,"report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the beh",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1466,deployability,Build,Building,1466,"at the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1682,deployability,build,build,1682,"in_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggest",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1717,deployability,depend,dependencies,1717,"n_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2527,deployability,build,build,2527,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2569,deployability,Instal,Install,2569,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2599,deployability,depend,dependencies,2599,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2714,deployability,version,version,2714,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2783,deployability,instal,install,2783,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3039,deployability,log,log,3039,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1717,integrability,depend,dependencies,1717,"n_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2599,integrability,depend,dependencies,2599,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2714,integrability,version,version,2714,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:972,interoperability,share,shared,972,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1050,interoperability,xml,xml,1050,"hecked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1400,interoperability,incompatib,incompatibility,1400," Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideall",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2146,interoperability,share,shared,2146,"../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--p",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2224,interoperability,xml,xml,2224,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1717,modifiability,depend,dependencies,1717,"n_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2599,modifiability,depend,dependencies,2599,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2714,modifiability,version,version,2714,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:14,performance,failur,failure,14,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1076,performance,error,error,1076,". Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1258,performance,error,error,1258,"s of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1367,performance,Error,Error,1367,"ll exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:14,reliability,fail,failure,14,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:520,reliability,fail,fails,520,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:802,safety,except,exceptions,802,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1076,safety,error,error,1076,". Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1258,safety,error,error,1258,"s of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1367,safety,Error,Error,1367,"ll exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1717,safety,depend,dependencies,1717,"n_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1983,safety,except,exceptions,1983," sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other cont",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2481,safety,input,input,2481,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2599,safety,depend,dependencies,2599,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3039,safety,log,log,3039,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:555,security,sandbox,sandbox,555,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:996,security,ssl,ssl,996,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1497,security,sandbox,sandbox,1497,"Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1707,security,ident,identical,1707,"nui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROO",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2170,security,ssl,ssl,2170,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2889,security,sandbox,sandbox,2889,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3039,security,log,log,3039,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1717,testability,depend,dependencies,1717,"n_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2599,testability,depend,dependencies,2599,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2955,testability,context,context,2955,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2984,testability,context,context,2984,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:3039,testability,log,log,3039,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:435,usability,clear,clear,435,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:483,usability,behavi,behavior,483,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:618,usability,support,support,618,"6.26.04 Build failure on Ubuntu 22.04 amd64; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1076,usability,error,error,1076,". Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1258,usability,error,error,1258,"s of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1284,usability,statu,status,1284,"nd one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1367,usability,Error,Error,1367,"ll exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. Root 6.26.04 build fails in a Ubuntu 22.04 `pbuilder` sandbox, with the following features enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that trigg",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1581,usability,behavi,behavior,1581,"atures enabled:. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1599,usability,clear,clear,1599,"```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dep",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:1799,usability,support,support,1799,"xceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit webgui rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. with the error. ```. [ 71%] Linking CXX executable ../bin/rootcling. /usr/bin/ld: ../lib/libCling.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary do",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2336,usability,behavi,behavior,2336,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/issues/10777:2481,usability,input,input,2481,"ing.so.6.26.04: undefined reference to `typeinfo for clang::sema::FunctionScopeInfo' . collect2: error: ld returned 1 exit status. make[4]: *** [main/CMakeFiles/rootcling.dir/build.make:101: bin/rootcling] Error 1. ```. This looks like an incompatibility between clang and cling - which both are builtin. Building in a 20.04 `pbuilder` sandbox succeeds (same set of features as above, minus `webgui`, btw). ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. The same set of build instructions (with identical dependencies) succeeds on Debian 11 Bullseye and 10 Buster, with. ```. -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_nlohmannjson builtin_openui5 builtin_unuran builtin_vdt builtin_xrootd builtin_xxhash clad dataframe davix dcache exceptions fftw3 fitsio fortran gdml gfal gnuinstall gsl_shared gviz http fcgi mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia8 r roofit rpath shadowpw shared soversion sqlite ssl tmva tmva-pymva tmva-rmva spectrum unuran vdt x11 xml xrootd. ```. (`webgui` is missing for a yet unknown reason). ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. Install required and optional dependencies matching the selected feature set, then run `cmake` and `make` as suggested. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26.04. OS Ubuntu 22.04 (amd64) `pbuilder` sandbox on 20.04 system. Source: official tarball. ### Additional context. <!--. Add any other context about the problem here. -->. nothing yet. Full log (1.2MB) [here](https://hypatia.aei.mpg.de/lsc-amd64-jammy/root-cds_6.26.04.sg-0.22+ubuntu22.04.0_amd64.--pbuilderlog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10777
https://github.com/root-project/root/pull/10778:111,interoperability,conflict,conflicts,111,"Replace __x86_64__ by R__x86_64__ on Win64; Replace `__x86_64__` by `R__x86_64__` on Win64 to prevent possible conflicts, as [reported on the forum](https://root-forum.cern.ch/t/preprocessor-macro-x86-64-problem-with-clhep-on-windows/50431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10778
https://github.com/root-project/root/pull/10778:94,safety,prevent,prevent,94,"Replace __x86_64__ by R__x86_64__ on Win64; Replace `__x86_64__` by `R__x86_64__` on Win64 to prevent possible conflicts, as [reported on the forum](https://root-forum.cern.ch/t/preprocessor-macro-x86-64-problem-with-clhep-on-windows/50431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10778
https://github.com/root-project/root/pull/10778:94,security,preven,prevent,94,"Replace __x86_64__ by R__x86_64__ on Win64; Replace `__x86_64__` by `R__x86_64__` on Win64 to prevent possible conflicts, as [reported on the forum](https://root-forum.cern.ch/t/preprocessor-macro-x86-64-problem-with-clhep-on-windows/50431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10778
https://github.com/root-project/root/pull/10779:127,interoperability,conflict,conflicts,127,"[skip-ci][v6-26]Replace __x86_64__ by R__x86_64__ on Win64; Replace `__x86_64__` by `R__x86_64__` on Win64 to prevent possible conflicts, as [reported on the forum](https://root-forum.cern.ch/t/preprocessor-macro-x86-64-problem-with-clhep-on-windows/50431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10779
https://github.com/root-project/root/pull/10779:110,safety,prevent,prevent,110,"[skip-ci][v6-26]Replace __x86_64__ by R__x86_64__ on Win64; Replace `__x86_64__` by `R__x86_64__` on Win64 to prevent possible conflicts, as [reported on the forum](https://root-forum.cern.ch/t/preprocessor-macro-x86-64-problem-with-clhep-on-windows/50431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10779
https://github.com/root-project/root/pull/10779:110,security,preven,prevent,110,"[skip-ci][v6-26]Replace __x86_64__ by R__x86_64__ on Win64; Replace `__x86_64__` by `R__x86_64__` on Win64 to prevent possible conflicts, as [reported on the forum](https://root-forum.cern.ch/t/preprocessor-macro-x86-64-problem-with-clhep-on-windows/50431).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10779
https://github.com/root-project/root/pull/10780:920,availability,fault,faulty,920,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:140,deployability,stage,stage,140,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:275,deployability,loader,loader,275,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:311,deployability,loader,loader,311,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:371,deployability,stage,stage,371,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1058,deployability,Depend,Depending,1058,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1307,deployability,updat,updated,1307,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:275,energy efficiency,load,loader,275,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:311,energy efficiency,load,loader,311,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:920,energy efficiency,fault,faulty,920,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1058,integrability,Depend,Depending,1058,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:58,modifiability,variab,variables,58,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:165,modifiability,variab,variables,165,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:466,modifiability,variab,variables,466,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:883,modifiability,variab,variables,883,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1058,modifiability,Depend,Depending,1058,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1075,modifiability,variab,variable,1075,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:275,performance,load,loader,275,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:311,performance,load,loader,311,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:920,performance,fault,faulty,920,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:920,reliability,fault,faulty,920,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:920,safety,fault,faulty,920,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1058,safety,Depend,Depending,1058,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1277,safety,test,tested,1277,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1307,safety,updat,updated,1307,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:979,security,Modif,Modifies,979,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1307,security,updat,updated,1307,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1058,testability,Depend,Depending,1058,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:1277,testability,test,tested,1277,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:146,usability,user,user,146,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10780:410,usability,user,user,410,"TMVA::DataSetInfo incorrectly handles reading of array of variables; # Problem Outline:. Precondition. On the **training (classification)** stage user adds array of variables to the `TMVA::DataLoader` object with a new method introduced in ROOT 6.20:. ```. TMVA::DataLoader *loader = new TMVA::DataLoader(...). loader->AddVariablesArray(""vars"", nBins);. ```. On the next stage - **classification application** user creates `TMVA::Reader` object and adds an array of variables to it:. ```. TMVA::Reader* reader = new TMVA::Reader(...);. std::vector<float> fValues(nBins);. reader->DataInfo().AddVariablesArray(""vars"", nBins, """", """", 0, 0, 'F', kFALSE, &fValues[0]);. ```. Pointer to the first element of the `&fValues[0]` passed to the `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Inside `AddVariablesArray()` pointer is **not incremented** in the loop where variables are defined. This provides faulty `reader->EvaluateMVA` output. # This Pull Request:. Modifies `TMVA::DataSetInfo::AddVariablesArray(..., void *external)` function. Depending on the variable type `char varType`, `void * external` pointer is incremented in the loop. This provides correct TMVA evaluation. ## Changes or fixes:. Please refer to the commit details. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10780
https://github.com/root-project/root/pull/10781:11,safety,permiss,permissions,11,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:69,safety,permiss,permissions,69,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:226,safety,permiss,permissions,226,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:319,safety,permiss,permissions,319,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:418,safety,permiss,permissions,418,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:487,safety,permiss,permissions-to-jobs,487,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:566,safety,Prevent,Preventing,566,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:646,safety,prevent,preventing-pwn-requests,646,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:63,security,token,token,63,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:130,security,attack,attackers,130,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:313,security,token,token-permissions,313,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:551,security,secur,secure,551,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:566,security,Preven,Preventing,566,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:599,security,secur,securitylab,599,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:646,security,preven,preventing-pwn-requests,646,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:673,security,Sign,Signed-off-by,673,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:174,usability,workflow,workflow,174,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:373,usability,workflow,workflows,373,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:383,usability,workflow,workflow-syntax-for-github-actions,383,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:541,usability,workflow,workflows,541,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10781:720,usability,user,users,720,"chore: Set permissions for GitHub actions; Restrict the GitHub token permissions only to the required ones; this way, even if the attackers will succeed in compromising your workflow, they won’t be able to do much. - Included permissions for the action. https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions. https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions. https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs. [Keeping your GitHub Actions and workflows secure Part 1: Preventing pwn requests](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/). Signed-off-by: naveen <172697+naveensrinivasan@users.noreply.github.com>.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10781
https://github.com/root-project/root/pull/10782:76,usability,document,documentation-up-to-date,76,[skip-ci] qch only for master; Fixes this https://root-forum.cern.ch/t/root-documentation-up-to-date/50473/2,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10782
https://github.com/root-project/root/pull/10783:217,deployability,Updat,Update,217,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:41,integrability,batch,batch,41,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:89,integrability,configur,configured,89,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:155,integrability,batch,batch,155,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:89,modifiability,configur,configured,89,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:41,performance,batch,batch,41,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:155,performance,batch,batch,155,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:217,safety,Updat,Update,217,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:89,security,configur,configured,89,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/pull/10783:217,security,Updat,Update,217,"[rbrowser] let use web-based TBrowser in batch mode ; If ""server"" kind of web display is configured,. one still can use ""new TBrowser"". This requires that batch gui factory. allows to create web-based implementation. Update JSROOT, use nullptr in related classes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10783
https://github.com/root-project/root/issues/10784:1968,availability,Down,Download,1968,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2352,availability,Operat,Operating,2352,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2427,availability,down,download,2427,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:1924,deployability,build,build,1924,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2340,deployability,version,version,2340,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2409,deployability,instal,install,2409,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2503,deployability,instal,install,2503,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2340,integrability,version,version,2340,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:930,interoperability,specif,specified,930,"TKDTreeBinning missing bins; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I created a 5D binning from some data. The `FindBin` function returns seemingly non-existent bins. What is . ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:940,interoperability,coordinat,coordinates,940,"TKDTreeBinning missing bins; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I created a 5D binning from some data. The `FindBin` function returns seemingly non-existent bins. What is . ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2340,modifiability,version,version,2340,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:1878,safety,input,input,1878,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:999,testability,understand,understand,999,"reeBinning missing bins; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I created a 5D binning from some data. The `FindBin` function returns seemingly non-existent bins. What is . ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binn",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2527,testability,context,context,2527,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:2556,testability,context,context,2556,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:419,usability,clear,clear,419,"TKDTreeBinning missing bins; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I created a 5D binning from some data. The `FindBin` function returns seemingly non-existent bins. What is . ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:467,usability,behavi,behavior,467,"TKDTreeBinning missing bins; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. <!--. A clear and concise description of what the wrong behavior is. -->. I created a 5D binning from some data. The `FindBin` function returns seemingly non-existent bins. What is . ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:1529,usability,behavi,behavior,1529,"Bin` function returns seemingly non-existent bins. What is . ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional contex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:1547,usability,clear,clear,1547,"urns seemingly non-existent bins. What is . ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:1733,usability,behavi,behavior,1733,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/issues/10784:1878,usability,input,input,1878,". ```. In [5]: binning.GetNBins(). Out [5]: 1001. In [6]: binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). Out [6]: 1004. In [7]: binning.GetBinContent(1004). TKDTreeBinning::GetBinContent:0: RuntimeWarning: No such bin. Returning 0. Info in <TKDTreeBinning::GetBinContent>: 'bin' is between 0 and 1001. Out [7]: 0. ```. The specified coordinates should be well within the binning range - if I understand the method correctly, the binning range is a hyper-rectangle that envelops all the data points, correct? ```. In [15]: for i in range(5):. ...: print(f""Dim {i} - min:{binning.GetDataMin(i)}, max: {binning.GetDataMax(i)}""). ...:. Dim 0 - min:0.9872230887413025, max: 1.5643738508224487. Dim 1 - min:0.279508501291275, max: 0.8602268695831299. Dim 2 - min:-0.9999595284461975, max: 0.9999838471412659. Dim 3 - min:-0.9999908804893494, max: 0.9998750686645508. Dim 4 - min:-1.0, max: 1.0000001192092896. ```. ### Expected behavior. <!--. A clear and concise description of what you expected to happen. -->. `FindBin()` should return a value within [0, `binning.GetNBins()` - 1]. ### To Reproduce. <!--. Steps to reproduce the behavior:. 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves. 2. Don't forget to attach the required input files! 3. How to run your code and / or build it, e.g. `root myMacro.C`, ... -->. - Download the ROOT file with the binning from [CERNBox](https://cernbox.cern.ch/index.php/s/86ZPwwpEStaiIdS). - Run the following in Python. ```python. import array. import ROOT. file = ROOT.TFile(""binning.root""). binning = file.Get(""TKDTreeBinning""). binning.FindBin(array.array(""d"", (1.2, 0.5, 0.5, 0.5, 0.5))). binning.GetBinContent(1004). ```. ### Setup. <!--. 1. ROOT version. 2. Operating system. 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself. -->. ROOT 6.26/02. macOS 12.3.1. Homebrew install. ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10784
https://github.com/root-project/root/pull/10787:12,availability,operat,operators,12,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:4,deployability,log,logical,4,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:85,deployability,version,versions,85,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:168,deployability,log,logical,168,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:85,integrability,version,versions,85,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:85,modifiability,version,versions,85,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:4,safety,log,logical,4,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:168,safety,log,logical,168,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:4,security,log,logical,4,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:168,security,log,logical,168,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:4,testability,log,logical,4,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10787:168,testability,log,logical,168,Use logical operators for boolean operands; This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10787
https://github.com/root-project/root/pull/10789:78,safety,test,test,78,[RF] Add new RooWorkspace::emplace<T>() method; This PR is a draft for now to test developments with the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10789
https://github.com/root-project/root/pull/10789:78,testability,test,test,78,[RF] Add new RooWorkspace::emplace<T>() method; This PR is a draft for now to test developments with the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10789
https://github.com/root-project/root/pull/10790:87,deployability,depend,dependent,87,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:242,energy efficiency,alloc,allocate,242,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:87,integrability,depend,dependent,87,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:464,interoperability,platform,platforms,464,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:87,modifiability,depend,dependent,87,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:251,performance,memor,memory,251,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:523,reliability,doe,does,523,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:87,safety,depend,dependent,87,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:136,safety,compl,comply,136,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:457,safety,test,tested,457,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:485,safety,safe,safe,485,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:661,safety,test,tested,661,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:136,security,compl,comply,136,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:87,testability,depend,dependent,87,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:457,testability,test,tested,457,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:661,testability,test,tested,661,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10790:251,usability,memor,memory,251,"[ntuple] RRecordField: accout for trailing padding; Although padding is implementation-dependent, most add enough padding at the end to comply with the requirements of the type with strictest alignment. Given that `GetValueSize()` is used to allocate memory for the described type, not accouting trailing padding may cause issues. `ROOT::Experimental::RFieldDescriptor::CreateField()` has a direct use of RRecordField. Despite it seems to be working in all tested platforms, be on the safe side and add this padding. This, does not affect derived classes `RPairField` and `RTupleField`, that override determination of the size of the type. ## Checklist:. - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10790
https://github.com/root-project/root/pull/10791:469,availability,error,errors,469,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:156,interoperability,specif,specification,156,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:231,interoperability,specif,specified,231,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:574,interoperability,specif,specifies,574,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:323,modifiability,refact,refactored,323,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:323,performance,refactor,refactored,323,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:469,performance,error,errors,469,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:360,reliability,doe,doesn,360,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:463,safety,avoid,avoid,463,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:469,safety,error,errors,469,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10791:469,usability,error,errors,469,"[RF] Export RooSimultaneous channels as dictionary of names in JSON; Export RooSimultaneous channels as dictionary of names instead of having. the full pdf specification as the value. This change is done because all pdfs should be specified in the. top-level `pdf` structure. The code of the `RooJSONFactoryWSTool` is also refactored such that. `exportObject` doesn't need to take the node where is should put the. object. It's better if it figures out itself to avoid errors when. calling it. Also, I suggest to not strip the `model_` prefix of the name from the. pdf that specifies a HistFactory channel. Otherwise, the name values in. the RooSimultaneous don't match anymore, which is a problem now that we. use names as values.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10791
https://github.com/root-project/root/pull/10793:683,availability,redund,redundant,683,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:98,deployability,patch,patch,98,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:683,deployability,redundan,redundant,683,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:595,integrability,sub,subsequent,595,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:5,interoperability,Share,Share,5,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:683,reliability,redundan,redundant,683,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:98,safety,patch,patch,98,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:683,safety,redund,redundant,683,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10793:98,security,patch,patch,98,"[DF] Share datasource/tree column readers between all nodes in the computation graph; Before this patch, each node in the computation graph was. re-creating or re-requesting column readers for datasource and TTree/TChain. columns separately. We now create column readers for datasource and TTree/TChain columns early and. store them in RLoopManager which then gives out pointers to the. same RColumnReaderBase objects to all nodes. This is the first part of a series of changes aimed at. centralizing ownership and creation of all kinds of column. readers (defines and variations will come in a subsequent PR). Sharing column readers among nodes of the computation. graph saves some redundant work and it is a pre-requisite for bulk. processing at the level of RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10793
https://github.com/root-project/root/pull/10795:936,availability,operat,operation,936,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:130,deployability,manag,management,130,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:429,deployability,manag,managed,429,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:867,deployability,contain,containers,867,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1126,deployability,updat,update,1126,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1426,deployability,updat,updated,1426,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:130,energy efficiency,manag,management,130,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:429,energy efficiency,manag,managed,429,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:34,integrability,event,event,34,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:40,integrability,queue,queue,40,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:54,integrability,event,events,54,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:111,integrability,asynchron,asynchronous,111,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:124,integrability,event,event,124,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:337,integrability,event,event,337,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:343,integrability,queue,queues,343,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:383,integrability,event,event,383,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:389,integrability,queue,queues,389,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:480,integrability,event,event,480,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:625,integrability,asynchron,asynchronous,625,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:704,integrability,event,events,704,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:723,integrability,batch,batched,723,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:731,integrability,asynchron,asynchronous,731,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:744,integrability,event,events,744,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:817,integrability,event,event,817,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:823,integrability,queue,queues,823,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:958,integrability,queue,queues,958,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1091,integrability,queue,queue,1091,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1168,integrability,event,event,1168,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1325,integrability,event,events,1325,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:839,interoperability,share,shared,839,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:80,modifiability,refact,refactors,80,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:40,performance,queue,queue,40,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:80,performance,refactor,refactors,80,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:111,performance,asynch,asynchronous,111,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:158,performance,improved perform,improved performance,158,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:243,performance,perform,performance,243,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:298,performance,overhead,overhead,298,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:343,performance,queue,queues,343,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:389,performance,queue,queues,389,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:625,performance,asynch,asynchronous,625,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:723,performance,batch,batched,723,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:731,performance,asynch,asynchronous,731,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:823,performance,queue,queues,823,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:958,performance,queue,queues,958,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:971,performance,time,time,971,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1044,performance,synch,synchronous,1044,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1091,performance,queue,queue,1091,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:441,reliability,RPo,RPool,441,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:130,safety,manag,management,130,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:429,safety,manag,managed,429,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:913,safety,avoid,avoiding,913,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1126,safety,updat,update,1126,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1396,safety,test,tested,1396,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1426,safety,updat,updated,1426,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:286,security,sign,significant,286,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1126,security,updat,update,1126,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1185,security,sign,signal,1185,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1426,security,updat,updated,1426,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:183,testability,simpl,simplified,183,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:1396,testability,test,tested,1396,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:167,usability,perform,performance,167,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:183,usability,simpl,simplified,183,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10795:243,usability,perform,performance,243,"[ntuple,daos] Pool-wide permanent event queue; parent events; This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. . Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. . The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:. - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling. - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called. - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking. - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10795
https://github.com/root-project/root/pull/10796:322,availability,state,state,322,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:50,deployability,version,versions,50,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:130,deployability,version,version,130,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:9,integrability,schema,schema,9,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:50,integrability,version,versions,50,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:81,integrability,schema,schema,81,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:130,integrability,version,version,130,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:322,integrability,state,state,322,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:516,integrability,schema,schema,516,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:262,interoperability,prox,proxy,262,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:50,modifiability,version,versions,50,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:130,modifiability,version,version,130,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10796:232,performance,content,content,232,"[RF] Fix schema evolution rule for old RooProduct versions; There was a bug in a schema evolution rule for a very old RooProduct. version, where a `RooSetProxy` member was replaced by a `RooListProxy`. The problem was that only the content was copied to the new proxy list,. not the other members. This lead to an invalid state for the. RooSetProxy, because it had no registered owner. The fix is to use a real copy constructor from `RooSetProxy` to. `RooListProxy`, which is also introduced in this commit with the schema. evolution rule fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10796
https://github.com/root-project/root/pull/10797:170,availability,consist,consistent,170,"[RF] Fix problem of RooProduct and RooProdPdf with RooWorkspace factory; This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be. consistent with the `RooRrodPdf`, which has a constructor from two. RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no. factors, which somehow prevented the constructor from a RooFit. collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from. RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not. followed. This would be a breaking change for people that use. `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/pull/10797:339,safety,prevent,prevented,339,"[RF] Fix problem of RooProduct and RooProdPdf with RooWorkspace factory; This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be. consistent with the `RooRrodPdf`, which has a constructor from two. RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no. factors, which somehow prevented the constructor from a RooFit. collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from. RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not. followed. This would be a breaking change for people that use. `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/pull/10797:776,safety,test,test,776,"[RF] Fix problem of RooProduct and RooProdPdf with RooWorkspace factory; This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be. consistent with the `RooRrodPdf`, which has a constructor from two. RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no. factors, which somehow prevented the constructor from a RooFit. collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from. RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not. followed. This would be a breaking change for people that use. `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/pull/10797:339,security,preven,prevented,339,"[RF] Fix problem of RooProduct and RooProdPdf with RooWorkspace factory; This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be. consistent with the `RooRrodPdf`, which has a constructor from two. RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no. factors, which somehow prevented the constructor from a RooFit. collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from. RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not. followed. This would be a breaking change for people that use. `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/pull/10797:771,testability,unit,unit,771,"[RF] Fix problem of RooProduct and RooProdPdf with RooWorkspace factory; This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be. consistent with the `RooRrodPdf`, which has a constructor from two. RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no. factors, which somehow prevented the constructor from a RooFit. collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from. RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not. followed. This would be a breaking change for people that use. `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/pull/10797:776,testability,test,test,776,"[RF] Fix problem of RooProduct and RooProdPdf with RooWorkspace factory; This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be. consistent with the `RooRrodPdf`, which has a constructor from two. RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no. factors, which somehow prevented the constructor from a RooFit. collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from. RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not. followed. This would be a breaking change for people that use. `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/pull/10797:170,usability,consist,consistent,170,"[RF] Fix problem of RooProduct and RooProdPdf with RooWorkspace factory; This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be. consistent with the `RooRrodPdf`, which has a constructor from two. RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no. factors, which somehow prevented the constructor from a RooFit. collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from. RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not. followed. This would be a breaking change for people that use. `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/pull/10797:817,usability,Close,Closes,817,"[RF] Fix problem of RooProduct and RooProdPdf with RooWorkspace factory; This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be. consistent with the `RooRrodPdf`, which has a constructor from two. RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no. factors, which somehow prevented the constructor from a RooFit. collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from. RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not. followed. This would be a breaking change for people that use. `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10797
https://github.com/root-project/root/pull/10798:363,interoperability,stub,stub,363,"[RF] Clarify usage of RooParametricStepFunction; The `RooParametricStepFunction` is not used much, but still there is an. issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing. speaks about having a little complete usage example script in the. reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code. modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10798
https://github.com/root-project/root/pull/10798:289,safety,compl,complete,289,"[RF] Clarify usage of RooParametricStepFunction; The `RooParametricStepFunction` is not used much, but still there is an. issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing. speaks about having a little complete usage example script in the. reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code. modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10798
https://github.com/root-project/root/pull/10798:289,security,compl,complete,289,"[RF] Clarify usage of RooParametricStepFunction; The `RooParametricStepFunction` is not used much, but still there is an. issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing. speaks about having a little complete usage example script in the. reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code. modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10798
https://github.com/root-project/root/pull/10798:363,testability,stub,stub,363,"[RF] Clarify usage of RooParametricStepFunction; The `RooParametricStepFunction` is not used much, but still there is an. issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing. speaks about having a little complete usage example script in the. reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code. modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10798
https://github.com/root-project/root/pull/10798:184,usability,close,closed,184,"[RF] Clarify usage of RooParametricStepFunction; The `RooParametricStepFunction` is not used much, but still there is an. issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing. speaks about having a little complete usage example script in the. reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code. modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10798
https://github.com/root-project/root/pull/10798:337,usability,guid,guide,337,"[RF] Clarify usage of RooParametricStepFunction; The `RooParametricStepFunction` is not used much, but still there is an. issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing. speaks about having a little complete usage example script in the. reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code. modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10798
https://github.com/root-project/root/pull/10798:412,usability,document,documentation,412,"[RF] Clarify usage of RooParametricStepFunction; The `RooParametricStepFunction` is not used much, but still there is an. issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing. speaks about having a little complete usage example script in the. reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code. modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10798
https://github.com/root-project/root/pull/10798:493,usability,Close,Closes,493,"[RF] Clarify usage of RooParametricStepFunction; The `RooParametricStepFunction` is not used much, but still there is an. issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing. speaks about having a little complete usage example script in the. reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code. modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10798
https://github.com/root-project/root/issues/10799:12,availability,failur,failures,12,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:76,availability,error,error,76,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1210,availability,Operat,Operating,1210," in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3845,availability,error,errors,3845,"0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:4132,availability,fault,fault,4132,"it a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc.so.6. #9 0x0000555555555095 in _start (). ~~~.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:12,deployability,fail,failures,12,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:51,deployability,fail,fails,51,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:149,deployability,build,builddir,149,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:158,deployability,build,build,158,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:164,deployability,BUILD,BUILD,164,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:220,deployability,modul,module,220,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:262,deployability,build,builddir,262,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:271,deployability,build,build,271,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:277,deployability,BUILD,BUILD,277,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:309,deployability,build,build,309,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:351,deployability,modul,module,351,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:395,deployability,build,builddir,395,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:404,deployability,build,build,404,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:410,deployability,BUILD,BUILD,410,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:442,deployability,build,build,442,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:485,deployability,modul,module,485,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1064,deployability,fail,fail,1064,"following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1089,deployability,version,version,1089," 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flag",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1299,deployability,patch,patch,1299,"-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1312,deployability,patch,patch,1312,"lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffse",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3665,deployability,patch,patch,3665," 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3918,deployability,patch,patch,3918,"SION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:4132,energy efficiency,fault,fault,4132,"it a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc.so.6. #9 0x0000555555555095 in _start (). ~~~.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1089,integrability,version,version,1089," 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flag",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1333,interoperability,bind,bindings,1333," line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1386,interoperability,bind,bindings,1386,"le ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bind",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1481,interoperability,bind,bindings,1481,"module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1539,interoperability,bind,bindings,1539,"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2117,interoperability,prox,proxy,2117,"b056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 10064",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2331,interoperability,bind,bindings,2331,"ndings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2386,interoperability,bind,bindings,2386,"ings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2483,interoperability,bind,bindings,2483,"gs/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2543,interoperability,bind,bindings,2543,"/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2973,interoperability,bind,bindings,2973,"). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbag",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3030,interoperability,bind,bindings,3030," {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone famili",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3129,interoperability,bind,bindings,3129,""", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3191,interoperability,bind,bindings,3191,", // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:220,modifiability,modul,module,220,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:351,modifiability,modul,module,351,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:485,modifiability,modul,module,485,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:704,modifiability,pac,package,704,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1089,modifiability,version,version,1089," 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flag",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1333,modifiability,bind,bindings,1333," line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1386,modifiability,bind,bindings,1386,"le ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bind",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1481,modifiability,bind,bindings,1481,"module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1539,modifiability,bind,bindings,1539,"^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2331,modifiability,bind,bindings,2331,"ndings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2386,modifiability,bind,bindings,2386,"ings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<ch",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2483,modifiability,bind,bindings,2483,"gs/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLA",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2543,modifiability,bind,bindings,2543,"/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2973,modifiability,bind,bindings,2973,"). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbag",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3030,modifiability,bind,bindings,3030," {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone famili",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3129,modifiability,bind,bindings,3129,""", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3191,modifiability,bind,bindings,3191,", // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:12,performance,failur,failures,12,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:76,performance,error,error,76,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3008,performance,Memor,MemoryRegulator,3008,"CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3065,performance,Memor,MemoryRegulator,3065,"ECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3164,performance,Memor,MemoryRegulator,3164,"raverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3226,performance,Memor,MemoryRegulator,3226," tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3845,performance,error,errors,3845,"0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:4132,performance,fault,fault,4132,"it a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc.so.6. #9 0x0000555555555095 in _start (). ~~~.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:12,reliability,fail,failures,12,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:51,reliability,fail,fails,51,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1064,reliability,fail,fail,1064,"following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPF",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:4132,reliability,fault,fault,4132,"it a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc.so.6. #9 0x0000555555555095 in _start (). ~~~.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:76,safety,error,error,76,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:220,safety,modul,module,220,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:351,safety,modul,module,351,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:485,safety,modul,module,485,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1027,safety,test,test,1027,"cribe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1059,safety,test,test,1059," the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1299,safety,patch,patch,1299,"-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1312,safety,patch,patch,1312,"lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffse",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3665,safety,patch,patch,3665," 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3845,safety,error,errors,3845,"0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3897,safety,test,tests,3897,", 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_imp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3918,safety,patch,patch,3918,"SION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:4132,safety,fault,fault,4132,"it a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc.so.6. #9 0x0000555555555095 in _start (). ~~~.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1299,security,patch,patch,1299,"-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1312,security,patch,patch,1312,"lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffse",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3665,security,patch,patch,3665," 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3918,security,patch,patch,3918,"SION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:4103,security,sign,signal,4103,"it a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_impl () from /lib64/libc.so.6. #9 0x0000555555555095 in _start (). ~~~.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:106,testability,Trace,Traceback,106,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1027,testability,test,test,1027,"cribe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:1059,testability,test,test,1059," the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3897,testability,test,tests,3897,", 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.so.6. #8 0x00007ffff78a8609 in __libc_start_main_imp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:76,usability,error,error,76,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:891,usability,behavi,behavior,891,"Python 3.11 failures; ### Describe the bug. PyROOT fails with the following error with Python 3.11:. ~~~. Traceback (most recent call last):. File ""/builddir/build/BUILD/root-6.26.04/tutorials/launcher.py"", line 21, in <module>. import ROOT. ^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/ROOT/__init__.py"", line 22, in <module>. import cppyy. ^^^^^^^^^^^^. File ""/builddir/build/BUILD/root-6.26.04/redhat-linux-build/lib/cppyy/__init__.py"", line 60, in <module>. importlib.import_module(libcppyy_mod_name). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. File ""/usr/lib/python3.11/importlib/__init__.py"", line 126, in import_module. return _bootstrap._gcd_import(name[level:], package, level). ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^. SystemError: type cppyy.CPPInstance has the Py_TPFLAGS_HAVE_GC flag but has no traverse function. ~~~. ### Expected behavior. ""import ROOT"" works. ### To Reproduce. 1. Compile ROOT with Python 3.11. 2. Try ""import ROOT"" in python ... 3. ... or run the test suite and see every python test fail. ### Setup. 1. ROOT version: 6.26.04 + commit 484deb056dacf768aba4954073b41105c431bffc + commit 484deb056dacf768aba4954073b41105c431bffc. 2. Operating system: Fedora 37 (rawhide). ### Additional information. I tried the following patch:. ~~~{.patch}. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2366,usability,Custom,CustomPyTypes,2366,"stance.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_nam",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2421,usability,Custom,CustomPyTypes,2421,"ance.cxx. index 73fb8099b5..2854b2e919 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2518,usability,Custom,CustomPyTypes,2518,"ce.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CPPInstance.cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_fl",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:2578,usability,Custom,CustomPyTypes,2578,".cxx. @@ -332,6 +332,12 @@ static void op_dealloc(CPPInstance* pyobj). PyObject_GC_Del((PyObject*)pyobj);. }. . +//----------------------------------------------------------------------------. +static int op_traverse(CPPInstance*, visitproc, void*). +{. + return 0;. +}. +. //----------------------------------------------------------------------------. static int op_clear(CPPInstance* pyobj). {. @@ -767,7 +773,7 @@ PyTypeObject CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3008,usability,Memor,MemoryRegulator,3008,"CPPInstance_Type = {. Py_TPFLAGS_HAVE_GC |. Py_TPFLAGS_CHECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3065,usability,Memor,MemoryRegulator,3065,"ECKTYPES, // tp_flags. (char*)""cppyy object proxy (internal)"", // tp_doc. - 0, // tp_traverse. + (traverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3164,usability,Memor,MemoryRegulator,3164,"raverseproc)op_traverse, // tp_traverse. (inquiry)op_clear, // tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unre",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3226,usability,Memor,MemoryRegulator,3226," tp_clear. (richcmpfunc)op_richcompare, // tp_richcompare. 0, // tp_weaklistoffset. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. index 97ce06daa7..ed41b1637c 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. @@ -78,8 +78,7 @@ PyTypeObject TypedefPointerToClass_Type = {. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,. (ternaryfunc)tpc_call, // tp_call. 0, 0, 0, 0,. - Py_TPFLAGS_DEFAULT |. - Py_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3767,usability,help,helps,3767,"_TPFLAGS_HAVE_GC, // tp_flags. + Py_TPFLAGS_DEFAULT, // tp_flags. 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/issues/10799:3845,usability,error,errors,3845,"0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0. #if PY_VERSION_HEX >= 0x02030000. , 0 // tp_del. diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. index f9e92f9c8c..5da48364ac 100644. --- a/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. +++ b/bindings/pyroot/cppyy/CPyCppyy/src/MemoryRegulator.cxx. @@ -45,7 +45,7 @@ struct InitCPyCppyy_NoneType_t {. ((PyVarObject&)CPyCppyy_NoneType).ob_size = 0;. . CPyCppyy_NoneType.tp_name = const_cast<char*>(""CPyCppyy_NoneType"");. - CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE | Py_TPFLAGS_HAVE_GC;. + CPyCppyy_NoneType.tp_flags = Py_TPFLAGS_HAVE_RICHCOMPARE;. . CPyCppyy_NoneType.tp_traverse = (traverseproc)0;. CPyCppyy_NoneType.tp_clear = (inquiry)0;. ~~~. This patch either drops the Py_TPFLAGS_HAVE_GC flag when .tp_traverse is 0 or makes sure it is not 0. This helps with the ""has the Py_TPFLAGS_HAVE_GC flag but has no traverse function"" errors, and ""import ROOT"" works. Most of the python tests work with this patch, but a few of them segfaults during the Python garbage collection, so it is not the correct fix. Anyone familiar with cppyy that have some ideas? ~~~. Thread 1 ""python3"" received signal SIGSEGV, Segmentation fault. 0x00007ffff7c06cc0 in deduce_unreachable () from /lib64/libpython3.11.so.1.0. (gdb) bt. #0 0x00007ffff7c06cc0 in deduce_unreachable (). from /lib64/libpython3.11.so.1.0. #1 0x00007ffff7c069c7 in gc_collect_main () from /lib64/libpython3.11.so.1.0. #2 0x00007ffff7cd399c in _PyGC_CollectNoFail.isra.0 (). from /lib64/libpython3.11.so.1.0. #3 0x00007ffff7cd33f1 in finalize_modules () from /lib64/libpython3.11.so.1.0. #4 0x00007ffff7cbdfbb in Py_FinalizeEx () from /lib64/libpython3.11.so.1.0. #5 0x00007ffff7ccad19 in Py_RunMain () from /lib64/libpython3.11.so.1.0. #6 0x00007ffff7c8e96b in Py_BytesMain () from /lib64/libpython3.11.so.1.0. #7 0x00007ffff78a8550 in __libc_start_call_main () from /lib64/libc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10799
https://github.com/root-project/root/pull/10800:34,availability,ping,ping,34,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:204,availability,servic,services,204,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:204,deployability,servic,services,204,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:256,deployability,build,build,256,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:204,integrability,servic,services,204,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:53,interoperability,platform,platforms,53,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:164,interoperability,platform,platform,164,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:204,modifiability,servic,services,204,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:26,performance,time,time,26,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:39,safety,test,test,39,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:269,safety,test,testReport,269,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:307,safety,test,test,307,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:39,testability,test,test,39,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:269,testability,test,testReport,269,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10800:307,testability,test,test,307,[webgui] increase startup time of ping test; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s. Most often happens on `mac1015` platform like this one:. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/147815/testReport/projectroot.gui.webdisplay/test/test_webgui_ping/.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10800
https://github.com/root-project/root/pull/10801:34,availability,ping,ping,34,[webgui] increase startup time of ping test [6.26]; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10801
https://github.com/root-project/root/pull/10801:60,interoperability,platform,platforms,60,[webgui] increase startup time of ping test [6.26]; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10801
https://github.com/root-project/root/pull/10801:26,performance,time,time,26,[webgui] increase startup time of ping test [6.26]; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10801
https://github.com/root-project/root/pull/10801:39,safety,test,test,39,[webgui] increase startup time of ping test [6.26]; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10801
https://github.com/root-project/root/pull/10801:39,testability,test,test,39,[webgui] increase startup time of ping test [6.26]; On some platforms first start of web browser takes longer than 15 s. Make it now 70 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10801
https://github.com/root-project/root/pull/10802:51,integrability,Batch,BatchMode,51,"[RF] Implement likelihood offsetting in new RooFit BatchMode; This is necessary to make the more complicated fits converge, like the. ATLAS Higgs combination fits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10802
https://github.com/root-project/root/pull/10802:51,performance,Batch,BatchMode,51,"[RF] Implement likelihood offsetting in new RooFit BatchMode; This is necessary to make the more complicated fits converge, like the. ATLAS Higgs combination fits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10802
https://github.com/root-project/root/pull/10802:97,safety,compl,complicated,97,"[RF] Implement likelihood offsetting in new RooFit BatchMode; This is necessary to make the more complicated fits converge, like the. ATLAS Higgs combination fits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10802
https://github.com/root-project/root/pull/10802:97,security,compl,complicated,97,"[RF] Implement likelihood offsetting in new RooFit BatchMode; This is necessary to make the more complicated fits converge, like the. ATLAS Higgs combination fits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10802
https://github.com/root-project/root/pull/10803:48,deployability,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 16; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9423. 2. https://github.com/root-project/root/pull/10736. 3. https://github.com/root-project/root/pull/10740. 4. https://github.com/root-project/root/pull/10754. 5. https://github.com/root-project/root/pull/10802.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10803
https://github.com/root-project/root/pull/10803:175,deployability,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 16; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9423. 2. https://github.com/root-project/root/pull/10736. 3. https://github.com/root-project/root/pull/10740. 4. https://github.com/root-project/root/pull/10754. 5. https://github.com/root-project/root/pull/10802.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10803
https://github.com/root-project/root/pull/10803:48,safety,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 16; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9423. 2. https://github.com/root-project/root/pull/10736. 3. https://github.com/root-project/root/pull/10740. 4. https://github.com/root-project/root/pull/10754. 5. https://github.com/root-project/root/pull/10802.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10803
https://github.com/root-project/root/pull/10803:175,safety,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 16; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9423. 2. https://github.com/root-project/root/pull/10736. 3. https://github.com/root-project/root/pull/10740. 4. https://github.com/root-project/root/pull/10754. 5. https://github.com/root-project/root/pull/10802.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10803
https://github.com/root-project/root/pull/10803:48,security,patch,patches,48,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 16; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9423. 2. https://github.com/root-project/root/pull/10736. 3. https://github.com/root-project/root/pull/10740. 4. https://github.com/root-project/root/pull/10754. 5. https://github.com/root-project/root/pull/10802.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10803
https://github.com/root-project/root/pull/10803:175,security,patch,patches,175,"[v626][RF] Backports of RooFit PRs to `v6-26-00-patches`: Part 16; This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/9423. 2. https://github.com/root-project/root/pull/10736. 3. https://github.com/root-project/root/pull/10740. 4. https://github.com/root-project/root/pull/10754. 5. https://github.com/root-project/root/pull/10802.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10803
https://github.com/root-project/root/pull/10804:141,modifiability,variab,variable,141,[cmake] Suppress all warnings compiling builtin-zstd:; This fixes a warning seen on macOS:. ```. zstd_compress_superblock.c:412:12: warning: variable 'litLengthSum' set but not used. ```. As we won't fix those there's no need to emit them.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10804
https://github.com/root-project/root/pull/10806:30,usability,Menu,MenuLoader,30,Warning fix; fix a warning in MenuLoader.mm .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10806
https://github.com/root-project/root/pull/10807:28,usability,Menu,MenuLoader,28,"Warning fix; fix warning in MenuLoader.mm. Thanks, Timur for your help!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10807
https://github.com/root-project/root/pull/10807:66,usability,help,help,66,"Warning fix; fix warning in MenuLoader.mm. Thanks, Timur for your help!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10807
https://github.com/root-project/root/pull/10811:255,availability,state,state,255,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:2051,energy efficiency,reduc,reduce,2051," the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgList(). def make_splot(toydata):. smalldata = toydata.reduce(ROOT.RooFit.Cut(""BDT>0.0"")). ROOT.SetOwnership(smalldata, True). splot = ROOT.RooStats.SPlot(. ""splot"", ""splot"", smalldata, combmPDF, set1, set2, True, True. ). make_splot(toydata). make_splot(toydata). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:255,integrability,state,state,255,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:703,integrability,wrap,wrapper,703,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:703,interoperability,wrapper,wrapper,703,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:147,modifiability,paramet,parameters,147,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:585,modifiability,variab,variables,585,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:623,modifiability,variab,variables,623,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:23,safety,input,input,23,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:119,safety,input,input,119,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:1357,security,sign,signal,1357," the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgList(). def make_splot(toydata):. smalldata = toydata.reduce(ROOT.RooFit.Cut(""BDT>0.0"")). ROOT.SetOwnership(smalldata, True). splot = ROOT.RooStats.SPlot(. ""splot"", ""splot"", smalldata, combmPDF, set1, set2, True, True. ). make_splot(toydata). make_splot(toydata). ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:844,testability,verif,verified,844,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:1067,testability,simpl,simpler,1067,", `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgList(). def make_splot(toydata):. smalldata = toydata.reduce(ROOT.RooFit.C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:23,usability,input,input,23,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:119,usability,input,input,119,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:987,usability,Close,Closes,987,"[RF] Fix corruption of input pdf after using RooStats::SPlot; In SPlots, `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgLis",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10811:1067,usability,simpl,simpler,1067,", `RooAbsArg::attachDataSet()` is called on the input pdf,. redirecting the parameters of the pdf to the RooRealVars in the dataset. This is not reversed, leaving the pdf in a corrupt state when the. dataset gets deleted. This can happen in particular if the SPlots object. created an owning clone of the dataset, attaches the pdf, and then goes. out of scope. This commit suggests to not attach the pdf to the dataset, as it is not. necessary. When looping over the dataset and evaluating the pdf later,. the pdf variables get synced with the dataset variables anyway. This was. done via `RooStats::SetParameters`, which is just a wrapper around. `RooAbsCollection::assign()`. I suggest to use `assign()` directly to make. more explicit to the reader what happens. It was verified that SPlot still works correctly, by looking at the output of. the `roostats/rs301_splot.C` tutorial, which is unaffected by this PR. Closes Jira issue [ROOT-8018](https://sft.its.cern.ch/jira/browse/ROOT-8018). A simpler reproducer of the problem based on the notebook in the Jira. issue is this one:. ```Python. import ROOT. bdt = ROOT.RooRealVar(""BDT"", ""some awesome BDT"", 0.0, 1.0). mass = ROOT.RooRealVar(""mass"", ""invariant mass"", 5100.0, 5300, ""MeV/c^{2}""). sigyield = ROOT.RooRealVar(""sigyield"", ""signal yield"", 100, 0, 100000). bkgyield = ROOT.RooRealVar(""bkgyield"", ""background yield"", 900, 0, 100000). bmassPDF = ROOT.RooGaussian(. ""bmass"",. ""B mass shape"",. mass,. ROOT.RooFit.RooConst(5200.0),. ROOT.RooFit.RooConst(20.0),. ). bkgmPDF = ROOT.RooExponential(. ""bkgmass"", ""bkg mass shape"", mass, ROOT.RooFit.RooConst(-1.0 / 200.0). ). combmPDF = ROOT.RooAddPdf(. ""fullmasspdf"",. ""full mass pdf"",. ROOT.RooArgList(bmassPDF, bkgmPDF),. ROOT.RooArgList(sigyield, bkgyield),. ). toydata = combmPDF.generate(ROOT.RooArgSet(bdt, mass), 10000). ROOT.SetOwnership(toydata, True). set1 = ROOT.RooArgList(sigyield, bkgyield). set2 = ROOT.RooArgList(). def make_splot(toydata):. smalldata = toydata.reduce(ROOT.RooFit.C",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10811
https://github.com/root-project/root/pull/10812:12,availability,redund,redundant,12,"[DF] Remove redundant calls to RDefine::InitSlot; We now register all RDefine nodes, incuding varied defines, with. RLoopManager, which is in charge of calling InitSlot on all. registered nodes, so we do not need to propagate the InitSlot call. from RVariation or RDefine to other RDefines.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10812
https://github.com/root-project/root/pull/10812:12,deployability,redundan,redundant,12,"[DF] Remove redundant calls to RDefine::InitSlot; We now register all RDefine nodes, incuding varied defines, with. RLoopManager, which is in charge of calling InitSlot on all. registered nodes, so we do not need to propagate the InitSlot call. from RVariation or RDefine to other RDefines.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10812
https://github.com/root-project/root/pull/10812:142,energy efficiency,charg,charge,142,"[DF] Remove redundant calls to RDefine::InitSlot; We now register all RDefine nodes, incuding varied defines, with. RLoopManager, which is in charge of calling InitSlot on all. registered nodes, so we do not need to propagate the InitSlot call. from RVariation or RDefine to other RDefines.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10812
https://github.com/root-project/root/pull/10812:12,reliability,redundan,redundant,12,"[DF] Remove redundant calls to RDefine::InitSlot; We now register all RDefine nodes, incuding varied defines, with. RLoopManager, which is in charge of calling InitSlot on all. registered nodes, so we do not need to propagate the InitSlot call. from RVariation or RDefine to other RDefines.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10812
https://github.com/root-project/root/pull/10812:12,safety,redund,redundant,12,"[DF] Remove redundant calls to RDefine::InitSlot; We now register all RDefine nodes, incuding varied defines, with. RLoopManager, which is in charge of calling InitSlot on all. registered nodes, so we do not need to propagate the InitSlot call. from RVariation or RDefine to other RDefines.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10812
https://github.com/root-project/root/issues/10814:0,availability,Error,Error,0,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:725,availability,error,error,725,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:924,availability,error,errors,924,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:973,availability,down,download,973,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1255,availability,down,download,1255,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:27,deployability,build,building,27,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:437,deployability,build,building,437,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:479,deployability,build,build,479,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:493,deployability,fail,fails,493,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:536,deployability,Build,Building,536,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1069,deployability,build,build,1069,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1130,deployability,log,log,1130,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1215,deployability,Build,Building,1215,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:759,modifiability,paramet,parameters,759,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:0,performance,Error,Error,0,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:725,performance,error,error,725,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:924,performance,error,errors,924,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:493,reliability,fail,fails,493,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:0,safety,Error,Error,0,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:725,safety,error,error,725,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:924,safety,error,errors,924,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1130,safety,log,log,1130,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1130,security,log,log,1130,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1130,testability,log,log,1130,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1309,testability,context,context,1309,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:1338,testability,context,context,1338,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:0,usability,Error,Error,0,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:725,usability,error,error,725,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:888,usability,behavi,behavior,888,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/issues/10814:924,usability,error,errors,924,"Error in REveBox.cxx while building root 6.26.04; - [x] Checked for duplicates. <!--. Please search in. * [GitHub](https://github.com/root-project/root/issues?q=is%3Aissue). * AND [Jira](https://sft.its.cern.ch/jira/issues/?jql=project %3D ROOT). for existing reports of your issue. If you find one, you are very welcome to add to the existing report, for instance ""issue still exists in today's master"". -->. ### Describe the bug. When building root 6.26/04 with gcc 11.2.1 the build process fails while compiling REveBox.cxx:. [ 89%] Building CXX object graf3d/eve7/CMakeFiles/ROOTEve.dir/src/REveBox.cxx.o. In file included from /usr/src/root-6.26.04/graf3d/eve7/src/REveBox.cxx:18:. /usr/include/nlohmann/json.hpp:847:7: error: redeclared with 9 template parameters. 847 | class basic_json;. | ^~~~~~~~~~. This is under CentOS 7, using devtoolset-11 and cmake3 (3.17.5). ### Expected behavior. It should compile without errors. ### To Reproduce. wget https://root.cern/download/root_v6.26.04.source.tar.gz. tar xzvf root_v6.26.04.source.tar.gz. cd root-6.26.04. cd build. scl enable devtoolset-11 bash. cmake3 .. make >& make.log. ### Setup. root 6.26.04. CentOS 7, devtoolset-11 (gcc 11.2.1), cmake3 (3.17.5). Building from source (https://root.cern/download/root_v6.26.04.source.tar.gz). ### Additional context. <!--. Add any other context about the problem here. -->.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10814
https://github.com/root-project/root/pull/10815:40,deployability,log,log,40,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:44,deployability,scale,scale,44,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:104,deployability,log,log,104,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:108,deployability,scale,scale,108,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:581,deployability,updat,updated,581,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:44,energy efficiency,scale,scale,44,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:108,energy efficiency,scale,scale,108,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:517,energy efficiency,Draw,Draw,517,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:44,modifiability,scal,scale,44,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:108,modifiability,scal,scale,108,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:44,performance,scale,scale,44,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:108,performance,scale,scale,108,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:40,safety,log,log,40,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:104,safety,log,log,104,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:551,safety,test,tested,551,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:581,safety,updat,updated,581,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:40,security,log,log,40,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:104,security,log,log,104,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:581,security,updat,updated,581,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:40,testability,log,log,40,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:104,testability,log,log,104,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10815:551,testability,test,tested,551,"Fix setting axis limits for TGraph when log scale; # This Pull request:. Fixes setting axis limits when log scale is on. ## Changes or fixes:. In the following case without this fix limits to X axis wouldn't be applied:. ```C++. root [0] TCanvas *c = new TCanvas("""","""",800,800). (TCanvas *) 0x55ad27dfcd50. root [1] c->SetLogx(). root [2] double x[]={1,2}. (double [2]) { 1.0000000, 2.0000000 }. root [3] TGraph *g = new TGraph(2,x,x). (TGraph *) 0x55ad2953bdd0. root [4] g->GetXaxis()->SetLimits(0,100). root [5] g->Draw(). ```. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10815
https://github.com/root-project/root/pull/10816:118,safety,accid,accidentally,118,"[RF] Bring back missing IO constructor to RooBernstein; In commit 0d1f0bbde0, the IO constructor of RooBernstein has. accidentally been removed, which broke reading RooBernstein instances. from ROOT files. Hence, this commit brings it back. No backport needed, because the IO constructor was removed in the same. development cycle (leading up to 6.28).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10816
https://github.com/root-project/root/pull/10817:34,deployability,version,version,34,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10817
https://github.com/root-project/root/pull/10817:101,deployability,version,version,101,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10817
https://github.com/root-project/root/pull/10817:34,integrability,version,version,34,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10817
https://github.com/root-project/root/pull/10817:101,integrability,version,version,101,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10817
https://github.com/root-project/root/pull/10817:34,modifiability,version,version,34,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10817
https://github.com/root-project/root/pull/10817:101,modifiability,version,version,101,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10817
https://github.com/root-project/root/pull/10817:50,safety,Avoid,Avoid,50,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10817
https://github.com/root-project/root/pull/10817:12,usability,minim,minimal,12,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6. Fixes #10814,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10817
https://github.com/root-project/root/pull/10818:143,deployability,manag,managed,143,[graphics] use c++ classes for temporary data in ExecuteEvent methods; Ensure that static members like `Int_t *x` or `TBox *zoombox` correctly managed and can be cleanup even . when mouse event handling is not working properly. Especially when exit application.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10818
https://github.com/root-project/root/pull/10818:143,energy efficiency,manag,managed,143,[graphics] use c++ classes for temporary data in ExecuteEvent methods; Ensure that static members like `Int_t *x` or `TBox *zoombox` correctly managed and can be cleanup even . when mouse event handling is not working properly. Especially when exit application.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10818
https://github.com/root-project/root/pull/10818:188,integrability,event,event,188,[graphics] use c++ classes for temporary data in ExecuteEvent methods; Ensure that static members like `Int_t *x` or `TBox *zoombox` correctly managed and can be cleanup even . when mouse event handling is not working properly. Especially when exit application.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10818
https://github.com/root-project/root/pull/10818:143,safety,manag,managed,143,[graphics] use c++ classes for temporary data in ExecuteEvent methods; Ensure that static members like `Int_t *x` or `TBox *zoombox` correctly managed and can be cleanup even . when mouse event handling is not working properly. Especially when exit application.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10818
https://github.com/root-project/root/pull/10818:182,usability,mous,mouse,182,[graphics] use c++ classes for temporary data in ExecuteEvent methods; Ensure that static members like `Int_t *x` or `TBox *zoombox` correctly managed and can be cleanup even . when mouse event handling is not working properly. Especially when exit application.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10818
https://github.com/root-project/root/pull/10820:63,deployability,version,versions,63,"[RF] Second attempt to fix schema evolution for old RooProduct versions and other fixes; After https://github.com/root-project/root/pull/10796, this should finally resolve all schema evolution issues with the RooProduct. This PR also makes some other improvements and bugfixes on the way (more detail in the commit description).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10820
https://github.com/root-project/root/pull/10820:27,integrability,schema,schema,27,"[RF] Second attempt to fix schema evolution for old RooProduct versions and other fixes; After https://github.com/root-project/root/pull/10796, this should finally resolve all schema evolution issues with the RooProduct. This PR also makes some other improvements and bugfixes on the way (more detail in the commit description).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10820
https://github.com/root-project/root/pull/10820:63,integrability,version,versions,63,"[RF] Second attempt to fix schema evolution for old RooProduct versions and other fixes; After https://github.com/root-project/root/pull/10796, this should finally resolve all schema evolution issues with the RooProduct. This PR also makes some other improvements and bugfixes on the way (more detail in the commit description).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10820
https://github.com/root-project/root/pull/10820:176,integrability,schema,schema,176,"[RF] Second attempt to fix schema evolution for old RooProduct versions and other fixes; After https://github.com/root-project/root/pull/10796, this should finally resolve all schema evolution issues with the RooProduct. This PR also makes some other improvements and bugfixes on the way (more detail in the commit description).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10820
https://github.com/root-project/root/pull/10820:63,modifiability,version,versions,63,"[RF] Second attempt to fix schema evolution for old RooProduct versions and other fixes; After https://github.com/root-project/root/pull/10796, this should finally resolve all schema evolution issues with the RooProduct. This PR also makes some other improvements and bugfixes on the way (more detail in the commit description).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10820
https://github.com/root-project/root/pull/10821:210,energy efficiency,optim,optimization,210,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:227,integrability,filter,filtered,227,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:210,performance,optimiz,optimization,210,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:44,testability,context,context,44,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:128,testability,context,context,128,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:6,usability,Support,Support,6,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:23,usability,visual,visualization,23,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:81,usability,support,support,81,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:93,usability,visual,visualization,93,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:163,usability,tool,tooltip,163,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:311,usability,visual,visualization,311,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10821:353,usability,user,user-images,353,"REve: Support DigitSet visualization in the context of REveDataCollection; . Add support for visualization of digit sets in the context of physics collections:. * tooltip related to selected collection item. * optimization for filtered items, e.g. only visible digits are streamed to client. Exmaple of RecHits visualization in CMS. ![Untitled](https://user-images.githubusercontent.com/2516492/175380176-3bf84d88-cd9a-410a-80db-264db1c5bed8.png).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10821
https://github.com/root-project/root/pull/10822:44,availability,Operat,Operators,44,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:149,availability,operat,operators,149,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:249,availability,Operat,Operators,249,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:339,availability,operat,operators,339,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:695,deployability,updat,updated,695,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:60,integrability,Sub,Sub,60,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:289,integrability,Sub,Sub,289,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:399,integrability,Sub,Sub,399,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:90,safety,Test,Tests,90,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:187,safety,test,tests,187,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:196,safety,valid,validate,196,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:273,safety,test,tests,273,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:358,safety,input,input,358,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:426,safety,input,input,426,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:489,safety,input,input,489,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:665,safety,test,tested,665,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:695,safety,updat,updated,695,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:196,security,validat,validate,196,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:695,security,updat,updated,695,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:85,testability,Unit,Unit,85,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:90,testability,Test,Tests,90,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:182,testability,unit,unit,182,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:187,testability,test,tests,187,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:268,testability,unit,unit,268,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:273,testability,test,tests,273,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:665,testability,test,tested,665,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:358,usability,input,input,358,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:426,usability,input,input,426,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:489,usability,input,input,489,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10822:591,usability,Support,Support,591,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests; # This Pull request: Adds all the Basic Binary ONNX operators to TMVA/SOFIE with the unit tests to validate the code. 1) Adds all the four Basic Binary Operators with the unit tests. - Add. - Sub. - Mul. - Div. 2) Fix issue in parsing binary operators when one input is an initialized tensor. . In Add,Sub, Mul or Div one of the input can be an initialized tensor therefore we don't have its input type registered before parsing. We need to look if the tensor is in Initializer tensor list. 3) Support for Multi-directional Broadcasting in SOFIE. ## Checklist:. - [X] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10822
https://github.com/root-project/root/pull/10823:181,deployability,manag,managed,181,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:115,energy efficiency,draw,draw,115,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:181,energy efficiency,manag,managed,181,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:350,interoperability,Format,Format,350,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:18,performance,memor,memory,18,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:298,performance,memor,memory,298,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:181,safety,manag,managed,181,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:278,safety,avoid,avoid,278,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:364,testability,Simpl,Simplify,364,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:18,usability,memor,memory,18,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:298,usability,memor,memory,298,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/pull/10823:364,usability,Simpl,Simplify,364,"[histpainter] Fix memory leaks, use more c++; 1. Fix leak with using TGraph2DPainter. 2. Fix leak with ""cont list"" draw option. 3. Use `std::unique_ptr` for all objects created and managed by hist painter, ensure proper deletion. 4. Use `std::vector` instead of plain C arrays, avoid any potential memory leak. 5. Replace plain `Form()` by `TString::Format()`. 6. Simplify some `TIter` loops. 7. Use more `nullptr`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10823
https://github.com/root-project/root/issues/10824:45,deployability,version,version,45,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:333,deployability,version,version,333,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:575,deployability,version,version,575,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:45,integrability,version,version,45,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:333,integrability,version,version,333,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:575,integrability,version,version,575,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:45,modifiability,version,version,45,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:333,modifiability,version,version,333,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:575,modifiability,version,version,575,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:515,performance,time,time,515,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:106,safety,accid,accidentally,106,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/issues/10824:378,usability,clear,clearly,378,"Don't let classes with a non-zero `ClassDef` version compile if they have no IO constructor; Recently, we accidentally introduced a bug into RooFit when removing the IO constructor of `RooBernstein`, and we brought it back months later: https://github.com/root-project/root/pull/10816. It's unexpected that a class with a `ClassDef` version greater than zero (meaning that it's clearly intended for IO) can even compile without an IO constructor, essentially breaking it for IO! Could we add some checks at compile time to make sure that any class with a non-zero `ClassDef` version has an IO constructor implemented?",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10824
https://github.com/root-project/root/pull/10825:612,integrability,schema,schema,612,"[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf; All functions in RooRealSumFunc and RooRealSumPdf are overloaded in. exactly the same way. The two classes only differ in the base class. To avoid code duplication, the member functions are implemented as private. static functions in RooRealSumPdf, which the friend class RooRealSumFunc. can also use. This pattern might be used also to avoid further code. duplication, also with the other addition classes like RooAddition and. RooAddPdf in the future. This solution was preferred over changing the classes themselves, because. the right to run into schema evolution problems is much higher then. This closes also the RooRealSumFunc modernization issue #8374, as now. its implementation uses the code from the RooRealSumPdf which is already. modernized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:5,safety,Avoid,Avoid,5,"[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf; All functions in RooRealSumFunc and RooRealSumPdf are overloaded in. exactly the same way. The two classes only differ in the base class. To avoid code duplication, the member functions are implemented as private. static functions in RooRealSumPdf, which the friend class RooRealSumFunc. can also use. This pattern might be used also to avoid further code. duplication, also with the other addition classes like RooAddition and. RooAddPdf in the future. This solution was preferred over changing the classes themselves, because. the right to run into schema evolution problems is much higher then. This closes also the RooRealSumFunc modernization issue #8374, as now. its implementation uses the code from the RooRealSumPdf which is already. modernized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:202,safety,avoid,avoid,202,"[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf; All functions in RooRealSumFunc and RooRealSumPdf are overloaded in. exactly the same way. The two classes only differ in the base class. To avoid code duplication, the member functions are implemented as private. static functions in RooRealSumPdf, which the friend class RooRealSumFunc. can also use. This pattern might be used also to avoid further code. duplication, also with the other addition classes like RooAddition and. RooAddPdf in the future. This solution was preferred over changing the classes themselves, because. the right to run into schema evolution problems is much higher then. This closes also the RooRealSumFunc modernization issue #8374, as now. its implementation uses the code from the RooRealSumPdf which is already. modernized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:398,safety,avoid,avoid,398,"[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf; All functions in RooRealSumFunc and RooRealSumPdf are overloaded in. exactly the same way. The two classes only differ in the base class. To avoid code duplication, the member functions are implemented as private. static functions in RooRealSumPdf, which the friend class RooRealSumFunc. can also use. This pattern might be used also to avoid further code. duplication, also with the other addition classes like RooAddition and. RooAddPdf in the future. This solution was preferred over changing the classes themselves, because. the right to run into schema evolution problems is much higher then. This closes also the RooRealSumFunc modernization issue #8374, as now. its implementation uses the code from the RooRealSumPdf which is already. modernized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:533,usability,prefer,preferred,533,"[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf; All functions in RooRealSumFunc and RooRealSumPdf are overloaded in. exactly the same way. The two classes only differ in the base class. To avoid code duplication, the member functions are implemented as private. static functions in RooRealSumPdf, which the friend class RooRealSumFunc. can also use. This pattern might be used also to avoid further code. duplication, also with the other addition classes like RooAddition and. RooAddPdf in the future. This solution was preferred over changing the classes themselves, because. the right to run into schema evolution problems is much higher then. This closes also the RooRealSumFunc modernization issue #8374, as now. its implementation uses the code from the RooRealSumPdf which is already. modernized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10825:664,usability,close,closes,664,"[RF] Avoid code duplication in RooRealSumFunc/RooRealSumPdf; All functions in RooRealSumFunc and RooRealSumPdf are overloaded in. exactly the same way. The two classes only differ in the base class. To avoid code duplication, the member functions are implemented as private. static functions in RooRealSumPdf, which the friend class RooRealSumFunc. can also use. This pattern might be used also to avoid further code. duplication, also with the other addition classes like RooAddition and. RooAddPdf in the future. This solution was preferred over changing the classes themselves, because. the right to run into schema evolution problems is much higher then. This closes also the RooRealSumFunc modernization issue #8374, as now. its implementation uses the code from the RooRealSumPdf which is already. modernized.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10825
https://github.com/root-project/root/pull/10826:246,deployability,updat,updated,246,"Revert ""Survive #pragma once from virtual file.""; Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:17,reliability,pra,pragma,17,"Revert ""Survive #pragma once from virtual file.""; Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:63,safety,review,reviews,63,"Revert ""Survive #pragma once from virtual file.""; Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:216,safety,test,tested,216,"Revert ""Survive #pragma once from virtual file.""; Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:246,safety,updat,updated,246,"Revert ""Survive #pragma once from virtual file.""; Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:246,security,updat,updated,246,"Revert ""Survive #pragma once from virtual file.""; Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:63,testability,review,reviews,63,"Revert ""Survive #pragma once from virtual file.""; Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10826:216,testability,test,tested,216,"Revert ""Survive #pragma once from virtual file.""; Ref: https://reviews.llvm.org/D128319. # This Pull request:. This reverts commit 71e133dd0391deac1cf3761d2c5c253b3cb247ff. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10826
https://github.com/root-project/root/pull/10827:149,deployability,log,log,149,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:201,deployability,patch,patch,201,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:116,modifiability,variab,variable,116,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:149,safety,log,log,149,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:166,safety,test,tests,166,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:201,safety,patch,patch,201,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:149,security,log,log,149,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:201,security,patch,patch,201,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:149,testability,log,log,149,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:159,testability,simpl,simple,159,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:166,testability,test,tests,166,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/pull/10827:159,usability,simpl,simple,159,"Revert ""Merge Ctors from nested transactions""; This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10827
https://github.com/root-project/root/issues/10828:318,deployability,contain,containing,318,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/issues/10828:20,modifiability,exten,extend,20,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/issues/10828:381,modifiability,exten,extended,381,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/issues/10828:463,modifiability,exten,extended,463,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/issues/10828:11,reliability,doe,does,11,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/issues/10828:213,reliability,doe,does,213,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/issues/10828:417,reliability,doe,does,417,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/issues/10828:495,safety,test,test,495,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/issues/10828:495,testability,test,test,495,"TH1::Merge does not extend axes properly for certain histograms with labels; In ROOT 6.24/06 we see that merging produces unexpected results for the following situation:. - 2D histogram, Y axis has labels, X axis does not, SetCanExtend is set for the X axis. - h2 has more bins in X. - h1.Merge is called with a TList containing h2. The result has only the bins from h1 and is not extended to match h2. If the Y axis does not have labels, the X axis is correctly extended by the merge. A Python test case follows:. ```. from ROOT import TH2F, TList. NBINSX = 5. NBINSY = 1. horig = TH2F('horig', 'histogram', NBINSX, 0, NBINSX, NBINSY, 0, NBINSY). yax = horig.GetYaxis(). # if labels are not set for the y axis, the output is what is expected. for i in range(NBINSY):. yax.SetBinLabel(i+1, f'{i+1}'). horig.GetXaxis().SetCanExtend(True). hclone = horig.Clone(). hclone.LabelsInflate('X'). hclone.Fill(NBINSX-1, 0). l = TList(). l.Add(hclone). horig.Merge(l). print(f'Number of X bins in merged histogram: {horig.GetNbinsX()} (expected {hclone.GetNbinsX()})'). ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10828
https://github.com/root-project/root/pull/10829:108,deployability,observ,observables,108,[RF] HS3 improvements; # This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10829:286,deployability,updat,updated,286,[RF] HS3 improvements; # This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10829:165,interoperability,mismatch,mismatch,165,[RF] HS3 improvements; # This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10829:256,safety,test,tested,256,[RF] HS3 improvements; # This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10829:286,safety,updat,updated,286,[RF] HS3 improvements; # This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10829:286,security,updat,updated,286,[RF] HS3 improvements; # This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10829:108,testability,observ,observables,108,[RF] HS3 improvements; # This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10829:256,testability,test,tested,256,[RF] HS3 improvements; # This Pull request:. Fixes a bug in RooFitHS3 that could lead to segfaults in cases observables names in HistFuncs and their DataHists would mismatch. Adds new classes to importer and exporter json definitions. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10829
https://github.com/root-project/root/pull/10830:214,deployability,patch,patch,214,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:277,deployability,fail,failed,277,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:277,reliability,fail,failed,277,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:132,safety,test,tested,132,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:176,safety,test,tests,176,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:214,safety,patch,patch,214,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:266,safety,test,test,266,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:332,safety,test,test,332,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:214,security,patch,patch,214,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:285,security,Sign,Signed-off-by,285,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:132,testability,test,tested,132,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:176,testability,test,tests,176,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:266,testability,test,test,266,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10830:332,testability,test,test,332,Remove raw string literals usage in ClangAttrEmitter.cpp; This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it. should be a NFC patch and we should remove it as it makes upstream. test suite failed. Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo. CC @vgvassilev @Axel-Naumann .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10830
https://github.com/root-project/root/pull/10831:124,modifiability,variab,variables,124,Improve histpainter classes; 1. Use std::vector instead of plain arrays. 2. More use of `nullptr`. 3. Avoid usage of global variables for local data in `TGraphPainter` class. 4. Test gPad before call gPad->GetView(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10831
https://github.com/root-project/root/pull/10831:102,safety,Avoid,Avoid,102,Improve histpainter classes; 1. Use std::vector instead of plain arrays. 2. More use of `nullptr`. 3. Avoid usage of global variables for local data in `TGraphPainter` class. 4. Test gPad before call gPad->GetView(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10831
https://github.com/root-project/root/pull/10831:178,safety,Test,Test,178,Improve histpainter classes; 1. Use std::vector instead of plain arrays. 2. More use of `nullptr`. 3. Avoid usage of global variables for local data in `TGraphPainter` class. 4. Test gPad before call gPad->GetView(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10831
https://github.com/root-project/root/pull/10831:178,testability,Test,Test,178,Improve histpainter classes; 1. Use std::vector instead of plain arrays. 2. More use of `nullptr`. 3. Avoid usage of global variables for local data in `TGraphPainter` class. 4. Test gPad before call gPad->GetView(),MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10831
https://github.com/root-project/root/pull/10832:401,deployability,build,builder,401,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:740,deployability,updat,updated,740,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:426,integrability,compon,components,426,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:528,integrability,compon,component,528,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:668,integrability,batch,batch,668,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:426,interoperability,compon,components,426,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:515,interoperability,specif,specific,515,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:528,interoperability,compon,component,528,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:331,modifiability,paramet,parameters,331,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:426,modifiability,compon,components,426,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:442,modifiability,paramet,parameters,442,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:488,modifiability,paramet,parameters,488,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:528,modifiability,compon,component,528,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:28,performance,perform,performance,28,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:185,performance,perform,performance,185,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:259,performance,time,time,259,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:279,performance,cach,caching,279,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:571,performance,perform,performance,571,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:668,performance,batch,batch,668,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:13,safety,Test,TestStatistics,13,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:133,safety,Test,TestStatistics,133,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:202,safety,Test,TestStatistics,202,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:710,safety,test,tested,710,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:740,safety,updat,updated,740,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:740,security,updat,updated,740,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:13,testability,Test,TestStatistics,13,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:133,testability,Test,TestStatistics,133,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:202,testability,Test,TestStatistics,202,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:413,testability,simul,simultaneous,413,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:710,testability,test,tested,710,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:28,usability,perform,performance,28,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:185,usability,perform,performance,185,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10832:571,usability,perform,performance,571,"[RF] RooFit::TestStatistics performance fixes; # This Pull request:. ## Changes or fixes:. We found and fixed two bugs in the RooFit TestStatistics likelihoods that negatively affected performance:. 1. TestStatistics likelihoods were being recalculated every time. They now have caching enabled, so they are only recalculated when parameters change. 2. While cloning the dataset inside the likelihood builder for simultaneous components, all parameters were cloned. Now we only clone the parameters relevant to the specific pdf component. With these fixes, single-worker performance of MultiProcess enabled fits is now on par with old style RooFit fits, at least with batch mode disabled. ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10832
https://github.com/root-project/root/pull/10836:17,deployability,integr,integral,17,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:326,deployability,integr,integral,326,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:539,deployability,integr,integral,539,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:577,deployability,integr,integral,577,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:376,energy efficiency,reduc,reduced,376,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:905,energy efficiency,CPU,CPU,905,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:1458,energy efficiency,CPU,CPU,1458,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:17,integrability,integr,integral,17,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:326,integrability,integr,integral,326,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:539,integrability,integr,integral,539,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:577,integrability,integr,integral,577,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:17,interoperability,integr,integral,17,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:198,interoperability,distribut,distribution,198,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:326,interoperability,integr,integral,326,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:539,interoperability,integr,integral,539,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:577,interoperability,integr,integral,577,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:17,modifiability,integr,integral,17,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:326,modifiability,integr,integral,326,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:539,modifiability,integr,integral,539,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:577,modifiability,integr,integral,577,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:384,performance,overhead,overhead,384,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:900,performance,Time,Time,900,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:905,performance,CPU,CPU,905,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:1453,performance,Time,Time,1453,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:1458,performance,CPU,CPU,1458,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:17,reliability,integr,integral,17,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:115,reliability,Poisson,Poisson,115,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:190,reliability,Poisson,Poisson,190,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:326,reliability,integr,integral,326,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:539,reliability,integr,integral,539,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:577,reliability,integr,integral,577,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:5,safety,Avoid,Avoid,5,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:363,safety,avoid,avoided,363,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:17,security,integr,integral,17,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:326,security,integr,integral,326,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:406,security,sign,significant,406,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:539,security,integr,integral,539,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:577,security,integr,integral,577,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:17,testability,integr,integral,17,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:326,testability,integr,integral,326,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:539,testability,integr,integral,539,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:577,testability,integr,integral,577,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10836:713,usability,confirm,confirm,713,"[RF] Avoid dummy integral object for already self-normalized RooPoisson; The RooPoisson is implemented with TMath::Poisson, which is normalized. if x covers the full definition range of the Poisson distribution, which. is zero to infinity. By correctly reporting this self-normalization in. that case, the creation of a dummy integral object that returns one is. avoided. The reduced overhead results in a significant speedup of. HistFactory fits with gamma constraints between 10 and 15 % in the hf001. tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423. ```. and after this PR:. ```. ----------------------------------------------------------------------------------------------. Benchmark Time CPU Iterations. ----------------------------------------------------------------------------------------------. hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744. hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786. hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835. hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10836
https://github.com/root-project/root/pull/10838:34,deployability,version,version,34,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10838
https://github.com/root-project/root/pull/10838:101,deployability,version,version,101,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10838
https://github.com/root-project/root/pull/10838:34,integrability,version,version,34,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10838
https://github.com/root-project/root/pull/10838:101,integrability,version,version,101,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10838
https://github.com/root-project/root/pull/10838:34,modifiability,version,version,34,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10838
https://github.com/root-project/root/pull/10838:101,modifiability,version,version,101,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10838
https://github.com/root-project/root/pull/10838:50,safety,Avoid,Avoid,50,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10838
https://github.com/root-project/root/pull/10838:12,usability,minim,minimal,12,[cmake] set minimal nlohmann/json version to 3.9; Avoid potential problems with other older nlohmann version like 3.6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10838
https://github.com/root-project/root/pull/10839:16,availability,error,error,16,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:80,availability,error,error,80,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:141,availability,error,error,141,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:582,availability,error,error,582,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:440,deployability,build,build,440,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:446,deployability,releas,release,446,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:515,deployability,build,build,515,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:521,deployability,releas,release,521,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:549,deployability,Releas,Release,549,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:639,deployability,build,build,639,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:645,deployability,releas,release,645,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:16,performance,error,error,16,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:80,performance,error,error,80,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:141,performance,error,error,141,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:582,performance,error,error,582,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:16,safety,error,error,16,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:80,safety,error,error,80,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:141,safety,error,error,141,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:360,safety,Test,TestBody,360,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:378,safety,Test,TestBody,378,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:469,safety,test,test,469,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:544,safety,test,test,544,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:582,safety,error,error,582,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:668,safety,test,test,668,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:360,testability,Test,TestBody,360,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:378,testability,Test,TestBody,378,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:469,testability,test,test,469,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:544,testability,test,test,544,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:668,testability,test,test,668,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:16,usability,error,error,16,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:80,usability,error,error,80,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:141,usability,error,error,141,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:425,usability,User,Users,425,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:500,usability,User,Users,500,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:582,usability,error,error,582,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/pull/10839:624,usability,User,Users,624,"Fix compilation error of ntuple_types on Windows; Fix the following compilation error of `ntuple_types` on Windows:. ```. ntuple_types.obj : error LNK2019: unresolved external symbol ""const ROOT::Experimental::RRecordField::`vftable'"" (??_7RRecordField@Experimental@ROOT@@6B@) referenced in function ""private: virtual void __thiscall RNTuple_CreateField_Test::TestBody(void)"" (?TestBody@RNTuple_CreateField_Test@@EAEXXZ) [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. C:\Users\bellenot\build\release\tree\ntuple\v7\test\Release\ntuple_types.exe : fatal error LNK1120: 1 unresolved externals [C:\Users\bellenot\build\release\tree\ntuple\v7\test\ntuple_types.vcxproj]. ```.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10839
https://github.com/root-project/root/issues/10840:4219,availability,error,error,4219,"to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), teste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:394,deployability,stack,stack,394,"[RF] HistFactory PreprocessFunction::PrintXML() needs to escape special characters to produce valid XML; - [x] Checked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:512,deployability,stack,stack,512,"[RF] HistFactory PreprocessFunction::PrintXML() needs to escape special characters to produce valid XML; - [x] Checked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:760,deployability,Stack,StackTrace,760,"[RF] HistFactory PreprocessFunction::PrintXML() needs to escape special characters to produce valid XML; - [x] Checked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:1108,deployability,releas,releases,1108,"hecked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ParamHistFunc&, TH1 const*, RooStats::HistFactory::Constraint::Type, double) () from /cvmfs/sft.cern.ch/lcg/views",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3430,deployability,contain,contains,3430,"o. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3549,deployability,contain,contains,3549,"actory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML par",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3746,deployability,Depend,Dependents,3746,"akeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4880,deployability,contain,contains,4880,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4969,deployability,contain,containing,4969,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:5268,deployability,releas,release,5268,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:1879,energy efficiency,alloc,allocator,1879,"TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ParamHistFunc&, TH1 const*, RooStats::HistFactory::Constraint::Type, double) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #10 0x00007f43c57409d7 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:1903,energy efficiency,alloc,allocator,1903,"nals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ParamHistFunc&, TH1 const*, RooStats::HistFactory::Constraint::Type, double) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #10 0x00007f43c57409d7 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:1975,energy efficiency,alloc,allocator,1975,"s7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ParamHistFunc&, TH1 const*, RooStats::HistFactory::Constraint::Type, double) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #10 0x00007f43c57409d7 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:2297,energy efficiency,Measur,Measurement,2297,"lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ParamHistFunc&, TH1 const*, RooStats::HistFactory::Constraint::Type, double) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #10 0x00007f43c57409d7 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried t",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:2561,energy efficiency,Measur,Measurement,2561,"rgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ParamHistFunc&, TH1 const*, RooStats::HistFactory::Constraint::Type, double) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #10 0x00007f43c57409d7 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:2801,energy efficiency,Measur,Measurement,2801,"d::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ParamHistFunc&, TH1 const*, RooStats::HistFactory::Constraint::Type, double) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #10 0x00007f43c57409d7 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. Th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3746,integrability,Depend,Dependents,3746,"akeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:100,interoperability,XML,XML,100,"[RF] HistFactory PreprocessFunction::PrintXML() needs to escape special characters to produce valid XML; - [x] Checked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3255,interoperability,XML,XML,3255,"ChannelWorkspace(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'g",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3405,interoperability,XML,XML,3405,"11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3481,interoperability,XML,XML,3481,"y::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3545,interoperability,XML,XML,3545,":HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the X",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3876,interoperability,XML,XML,3876,"11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file tha",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3935,interoperability,XML,XML,3935,"nly for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace a",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4546,interoperability,XML,XML,4546,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4729,interoperability,XML,XML,4729,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4761,interoperability,XML,XML,4761,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4866,interoperability,XML,XML,4866,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:5150,interoperability,XML,XML,5150,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3746,modifiability,Depend,Dependents,3746,"akeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4219,performance,error,error,4219,"to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), teste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4154,reliability,doe,doesnt,4154,"s generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML fil",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:94,safety,valid,valid,94,"[RF] HistFactory PreprocessFunction::PrintXML() needs to escape special characters to produce valid XML; - [x] Checked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3475,safety,valid,valid,3475,"actory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3746,safety,Depend,Dependents,3746,"akeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3842,safety,compl,complain,3842,"views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4182,safety,compl,complains,4182," for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4219,safety,error,error,4219,"to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), teste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4755,safety,valid,valid,4755,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:5217,safety,test,tested,5217,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:1013,security,sign,signal,1013," PreprocessFunction::PrintXML() needs to escape special characters to produce valid XML; - [x] Checked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, ParamHistFunc&, T",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3336,security,ident,identify,3336,"l&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #11 0x00007f43c5746984 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::MakeSingleChannelModel(RooStats::HistFactory::Measurement&, RooStats::HistFactory::Channel&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. #12 0x00007f43c574f3d9 in RooStats::HistFactory::MakeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3842,security,compl,complain,3842,"views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expressi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4182,security,compl,complains,4182," for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4244,security,ident,identifier,4244,"d the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. R",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:400,testability,trace,trace,400,"[RF] HistFactory PreprocessFunction::PrintXML() needs to escape special characters to produce valid XML; - [x] Checked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:518,testability,trace,trace,518,"[RF] HistFactory PreprocessFunction::PrintXML() needs to escape special characters to produce valid XML; - [x] Checked for duplicates. ### Describe the bug. Calling RooStats::HistFactory::MakeModelAndMeasurementFast(meas) leads to a seg violation in root 6.26.04 with gcc11 on CentOS7 machine (lxplus), while the same code worked with 6.24.06 with gcc8 on CentOS7 machine. This is the relevant stack trace:. ```. ===========================================================. There was a crash. This is the entire stack trace of all threads:. ===========================================================. #0 0x00007f43c411c60c in waitpid () from /lib64/libc.so.6. #1 0x00007f43c4099f62 in do_system () from /lib64/libc.so.6. #2 0x00007f43c6fe5a5c in TUnixSystem::StackTrace() () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #3 0x00007f43c6fe3155 in TUnixSystem::DispatchSignals(ESignals) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libCore.so. #4 <signal handler called>. #5 0x00007f43c481adef in __dynamic_cast () from /cvmfs/sft.cern.ch/lcg/releases/gcc/11.2.0-8a51a/x86_64-centos7/lib64/libstdc++.so.6. #6 0x00007f43c51b2ff1 in RooAbsCollection::insert(RooAbsArg*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #7 0x00007f43c51b83db in RooAbsCollection::RooAbsCollection(RooAbsCollection const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #8 0x00007f43c52480f9 in RooArgList::RooArgList(RooArgList const&, char const*) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libRooFitCore.so. #9 0x00007f43c573c6f5 in RooStats::HistFactory::HistoToWorkspaceFactoryFast::createStatConstraintTerms(RooWorkspace*, std::vector<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > > >&, P",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:3746,testability,Depend,Dependents,3746,"akeModelAndMeasurementFast(RooStats::HistFactory::Measurement&) () from /cvmfs/sft.cern.ch/lcg/views/LCG_102/x86_64-centos7-gcc11-opt/lib/libHistFactory.so. ```. Note that this happens only for some setups, so I tried to debug it a bit and see what is special about the setups that crash. I will briefly describe what I found out:. We use AddPreprocessFunction() method to reparametrise our likelihood, this generally seems to work, but for some special cases this seems to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:5217,testability,test,tested,5217,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4219,usability,error,error,4219,"to cause problems. I created the XML files for the problematic setups and tried to use `hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), teste",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/issues/10840:4613,usability,behavi,behavior,4613,"`hist2workspace` to try to identify the issues. I found out that the executable cannot read the XML files produced if it contains `&` and `<` or `>` as these are not valid XML characters and need to be escaped. So e.g. if the top level XML contains function like this:. ```. <Function Name=""morph_topWidth_0.700000"" Expression=""(0.+(((topWidth-0.700000)>=0)&&(fabs(topWidth-0.700000)<0.300000))*(1.-(fabs(topWidth-0.700000))/0.300000))"" Dependents=""topWidth[0.700000,0.700000,2.000000]"" />. ```. The `hist2workspace` executable will complain that it cannot parse the XML. I tried replacing the problematic characters with the XML replacements like `&gt;` etc. This makes the `hist2workspace` code run and it generates the workspace. However, if I try to replace the characters in the same way for the string passed to AddPrepropcessFunction, it doesnt parse the string and complains:. ```. input_line_48:2:89: error: use of undeclared identifier 'gt'. Double_t TFormula____id12625155560414669645(Double_t *x){ return (0.+(((x[0]-0.700000)&{gt;}=0)&#38;&#38;(fabs(x[0]-0.700000)&{lt;0.300000}))*(1.-(fabs(x[0]-0.700000))/0.300000)) ; }. ^. ```. I am not 100% sure these two issue - crash in the `MakeModelAndMeasurementFast` code and the XML parsing are related, but I think they could be. . ### Expected behavior. The code should not crash when calling `MakeModelAndMeasurementFast` as was the case in ROOT 6.24.06. The XML generated should be a valid XML that can be processed with histo2workspace. ### To Reproduce. Adding any Expression to the top level XML file that contains characters like `&`, `<` breaks histo2workpace and it seems that using formuale containing these characters in `AddPrepropcessFunction` crashes `MakeModelAndMeasurementFast`. ### Setup. 1. ROOT 6.26.04, but the histo2workspace issue not being able to read ther XML file is there also (at least) in 6.24.06. 2. CentOS7 (lxplus), tested with gcc8 and gcc11. 3. ROOT setup from LCG release, 101 (6.24.06) and 102 (6.26.04).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10840
https://github.com/root-project/root/pull/10842:498,deployability,updat,updated,498,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10842:298,integrability,compon,components,298,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10842:298,interoperability,compon,components,298,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10842:298,modifiability,compon,components,298,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10842:468,safety,test,tested,468,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10842:498,safety,updat,updated,498,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10842:329,security,ident,identified,329,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10842:498,security,updat,updated,498,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10842:468,testability,test,tested,468,"[RF] [HS3] Solve HistFactory exporter crashes; # This Pull request:. The HistFactory exporter tends to crash with ""edited"" HistFactory pdfs that look like genuine HistFactory upon first inspection but turn out not to be. This PR delays the writing to the node of the JSOn structure until after all components have been found and identified, such that the exporter can cleanly abort in case an export with the HistFactory template is not possible. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10842
https://github.com/root-project/root/pull/10843:69,availability,error,error,69,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:199,deployability,stack,stack,199,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:560,deployability,stack,stack,560,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:699,deployability,version,version,699,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:699,integrability,version,version,699,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:566,modifiability,variab,variables,566,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:699,modifiability,version,version,699,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:12,performance,memor,memory,12,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:69,performance,error,error,69,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:322,performance,memor,memory,322,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:675,performance,memor,memory,675,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:109,reliability,fTa,fTabSize,109,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:69,safety,error,error,69,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:626,testability,simpl,simple,626,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:12,usability,memor,memory,12,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:69,usability,error,error,69,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:322,usability,memor,memory,322,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:626,usability,simpl,simple,626,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10843:675,usability,memor,memory,675,Fix several memory leaks and problems in graf2d/graf classes; 1. Fix error with copy and destroy of `TLatex::fTabSize`. Now it is `std::vector` and can be easily copied - if necessary. Also using as stack is much more convenient - just by using `emplace_back` and `pop_back`. 2. Fix bug in `TPie` copy constructor. 3. Fix memory leak with `TGaxis::fModLabs`. Array was never deleted and never copied properly. Extra problem because it may have pointer on list of labels from `TAxis`. Provide workaround for `TGaxis` objects stored before in ROOT files. 4. Use stack variables while painting - no need to call `new/delete` for simple objects like `TLine` or `TMarker`. 5. Fix memory leak reading old version of TPolyLine. 6. Use `TString::Form` instead of `snprinf`. 7. Use `nullptr`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10843
https://github.com/root-project/root/pull/10844:13,integrability,encapsulat,encapsulation,13,"[DF] Improve encapsulation of RColumnRegister data members; This simplifies client code and it makes it simpler to evolve RColumnRegister internals in the future, which will be needed e.g. for bulk processing in RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10844
https://github.com/root-project/root/pull/10844:13,modifiability,encapsul,encapsulation,13,"[DF] Improve encapsulation of RColumnRegister data members; This simplifies client code and it makes it simpler to evolve RColumnRegister internals in the future, which will be needed e.g. for bulk processing in RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10844
https://github.com/root-project/root/pull/10844:115,modifiability,evolv,evolve,115,"[DF] Improve encapsulation of RColumnRegister data members; This simplifies client code and it makes it simpler to evolve RColumnRegister internals in the future, which will be needed e.g. for bulk processing in RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10844
https://github.com/root-project/root/pull/10844:65,testability,simpl,simplifies,65,"[DF] Improve encapsulation of RColumnRegister data members; This simplifies client code and it makes it simpler to evolve RColumnRegister internals in the future, which will be needed e.g. for bulk processing in RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10844
https://github.com/root-project/root/pull/10844:104,testability,simpl,simpler,104,"[DF] Improve encapsulation of RColumnRegister data members; This simplifies client code and it makes it simpler to evolve RColumnRegister internals in the future, which will be needed e.g. for bulk processing in RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10844
https://github.com/root-project/root/pull/10844:65,usability,simpl,simplifies,65,"[DF] Improve encapsulation of RColumnRegister data members; This simplifies client code and it makes it simpler to evolve RColumnRegister internals in the future, which will be needed e.g. for bulk processing in RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10844
https://github.com/root-project/root/pull/10844:104,usability,simpl,simpler,104,"[DF] Improve encapsulation of RColumnRegister data members; This simplifies client code and it makes it simpler to evolve RColumnRegister internals in the future, which will be needed e.g. for bulk processing in RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10844
https://github.com/root-project/root/pull/10846:323,deployability,updat,updated,323,Added Pythonization to RDF Filter and PyDefines; # This Pull request:. ## Changes or fixes:. Added pythonizations to RDataFrame. Filter now works with Python Functions. New attribute PyDefine added to RDF. PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10846
https://github.com/root-project/root/pull/10846:27,integrability,Filter,Filter,27,Added Pythonization to RDF Filter and PyDefines; # This Pull request:. ## Changes or fixes:. Added pythonizations to RDataFrame. Filter now works with Python Functions. New attribute PyDefine added to RDF. PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10846
https://github.com/root-project/root/pull/10846:129,integrability,Filter,Filter,129,Added Pythonization to RDF Filter and PyDefines; # This Pull request:. ## Changes or fixes:. Added pythonizations to RDataFrame. Filter now works with Python Functions. New attribute PyDefine added to RDF. PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10846
https://github.com/root-project/root/pull/10846:293,safety,test,tested,293,Added Pythonization to RDF Filter and PyDefines; # This Pull request:. ## Changes or fixes:. Added pythonizations to RDataFrame. Filter now works with Python Functions. New attribute PyDefine added to RDF. PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10846
https://github.com/root-project/root/pull/10846:323,safety,updat,updated,323,Added Pythonization to RDF Filter and PyDefines; # This Pull request:. ## Changes or fixes:. Added pythonizations to RDataFrame. Filter now works with Python Functions. New attribute PyDefine added to RDF. PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10846
https://github.com/root-project/root/pull/10846:323,security,updat,updated,323,Added Pythonization to RDF Filter and PyDefines; # This Pull request:. ## Changes or fixes:. Added pythonizations to RDataFrame. Filter now works with Python Functions. New attribute PyDefine added to RDF. PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10846
https://github.com/root-project/root/pull/10846:293,testability,test,tested,293,Added Pythonization to RDF Filter and PyDefines; # This Pull request:. ## Changes or fixes:. Added pythonizations to RDataFrame. Filter now works with Python Functions. New attribute PyDefine added to RDF. PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10846
https://github.com/root-project/root/pull/10846:264,usability,hint,hinted,264,Added Pythonization to RDF Filter and PyDefines; # This Pull request:. ## Changes or fixes:. Added pythonizations to RDataFrame. Filter now works with Python Functions. New attribute PyDefine added to RDF. PyDefine works with Python Functions whose return type is hinted. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10846
https://github.com/root-project/root/pull/10847:46,deployability,patch,patch,46,"[DF] Fix iteration over multimap; Before this patch, we were iterating until the end of the map. rather than until the end of the equal_range (this was not a. problem in practice because program logic guaranteed that we would. find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10847
https://github.com/root-project/root/pull/10847:195,deployability,log,logic,195,"[DF] Fix iteration over multimap; Before this patch, we were iterating until the end of the map. rather than until the end of the equal_range (this was not a. problem in practice because program logic guaranteed that we would. find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10847
https://github.com/root-project/root/pull/10847:170,reliability,pra,practice,170,"[DF] Fix iteration over multimap; Before this patch, we were iterating until the end of the map. rather than until the end of the equal_range (this was not a. problem in practice because program logic guaranteed that we would. find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10847
https://github.com/root-project/root/pull/10847:46,safety,patch,patch,46,"[DF] Fix iteration over multimap; Before this patch, we were iterating until the end of the map. rather than until the end of the equal_range (this was not a. problem in practice because program logic guaranteed that we would. find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10847
https://github.com/root-project/root/pull/10847:195,safety,log,logic,195,"[DF] Fix iteration over multimap; Before this patch, we were iterating until the end of the map. rather than until the end of the equal_range (this was not a. problem in practice because program logic guaranteed that we would. find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10847
https://github.com/root-project/root/pull/10847:46,security,patch,patch,46,"[DF] Fix iteration over multimap; Before this patch, we were iterating until the end of the map. rather than until the end of the equal_range (this was not a. problem in practice because program logic guaranteed that we would. find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10847
https://github.com/root-project/root/pull/10847:195,security,log,logic,195,"[DF] Fix iteration over multimap; Before this patch, we were iterating until the end of the map. rather than until the end of the equal_range (this was not a. problem in practice because program logic guaranteed that we would. find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10847
https://github.com/root-project/root/pull/10847:195,testability,log,logic,195,"[DF] Fix iteration over multimap; Before this patch, we were iterating until the end of the map. rather than until the end of the equal_range (this was not a. problem in practice because program logic guaranteed that we would. find what we were looking for and break out of the loop early).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10847
https://github.com/root-project/root/pull/10848:107,deployability,modul,module,107,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:410,deployability,modul,module,410,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:446,deployability,modul,module,446,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:560,deployability,updat,updated,560,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:29,integrability,sub,subprocess,29,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:72,integrability,sub,subprocess,72,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:177,integrability,sub,subprocess,177,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:435,integrability,sub,subprocess,435,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:476,integrability,sub,subprocess,476,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:107,modifiability,modul,module,107,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:410,modifiability,modul,module,410,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:446,modifiability,modul,module,446,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:154,performance,execution time,execution time,154,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:223,performance,time,time,223,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:107,safety,modul,module,107,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:410,safety,modul,module,410,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:446,safety,modul,module,446,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:529,safety,test,tested,529,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:560,safety,updat,updated,560,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:560,security,updat,updated,560,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10848:529,testability,test,tested,529,"[cling-cpt] Replaced certain subprocess calls with os calls and rewrote subprocess functions to use the os module [skip-ci]; # This Pull request: Lessens execution time, as the subprocess calls are quite expensive and take time, so using os calls are more Pythonic and quite a bit faster. ## Changes or fixes: Rewrote the exec_subprocess_call, exec_subprocess_check_output, and _perror functions to use the os module as opposed to the subprocess module. Also replaced certain subprocess calls with os calls. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned #406 in (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10848
https://github.com/root-project/root/pull/10849:55,energy efficiency,core,core,55,[DF] Declare single-argument ctor explicit; As per C++ core guidelines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10849
https://github.com/root-project/root/pull/10849:60,usability,guid,guidelines,60,[DF] Declare single-argument ctor explicit; As per C++ core guidelines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10849
https://github.com/root-project/root/pull/10850:24,deployability,patch,patch,24,Simplify CallFunc; This patch reduces the code bloat in TClingCallFunc trying to make the code more readable. cc: @sudo-panda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10850
https://github.com/root-project/root/pull/10850:30,energy efficiency,reduc,reduces,30,Simplify CallFunc; This patch reduces the code bloat in TClingCallFunc trying to make the code more readable. cc: @sudo-panda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10850
https://github.com/root-project/root/pull/10850:24,safety,patch,patch,24,Simplify CallFunc; This patch reduces the code bloat in TClingCallFunc trying to make the code more readable. cc: @sudo-panda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10850
https://github.com/root-project/root/pull/10850:24,security,patch,patch,24,Simplify CallFunc; This patch reduces the code bloat in TClingCallFunc trying to make the code more readable. cc: @sudo-panda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10850
https://github.com/root-project/root/pull/10850:0,testability,Simpl,Simplify,0,Simplify CallFunc; This patch reduces the code bloat in TClingCallFunc trying to make the code more readable. cc: @sudo-panda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10850
https://github.com/root-project/root/pull/10850:0,usability,Simpl,Simplify,0,Simplify CallFunc; This patch reduces the code bloat in TClingCallFunc trying to make the code more readable. cc: @sudo-panda,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10850
https://github.com/root-project/root/pull/10851:214,modifiability,reu,reuse,214,"[RF] Avoid code duplication in RooFit addition classes; Much of the functionality of RooAddition and RooAddPdf is implemented in exactly the. same way as in RooRealSumPdf. Hence, to avoid code duplication, we can. reuse the static functions in RooRealSumPdf that provide this. implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10851
https://github.com/root-project/root/pull/10851:5,safety,Avoid,Avoid,5,"[RF] Avoid code duplication in RooFit addition classes; Much of the functionality of RooAddition and RooAddPdf is implemented in exactly the. same way as in RooRealSumPdf. Hence, to avoid code duplication, we can. reuse the static functions in RooRealSumPdf that provide this. implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10851
https://github.com/root-project/root/pull/10851:182,safety,avoid,avoid,182,"[RF] Avoid code duplication in RooFit addition classes; Much of the functionality of RooAddition and RooAddPdf is implemented in exactly the. same way as in RooRealSumPdf. Hence, to avoid code duplication, we can. reuse the static functions in RooRealSumPdf that provide this. implementation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10851
https://github.com/root-project/root/pull/10852:462,deployability,stack,stack,462,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:529,deployability,releas,release,529,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:202,energy efficiency,Draw,DrawCollideGrid,202,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:230,energy efficiency,Draw,DrawColorTable,230,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:314,energy efficiency,Draw,Draw,314,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:353,energy efficiency,Draw,DrawLatex,353,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:537,energy efficiency,alloc,allocated,537,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:468,modifiability,variab,variable,468,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:180,performance,memor,memory,180,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:272,performance,memor,memory,272,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:547,performance,memor,memory,547,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:378,safety,test,tests,378,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:378,testability,test,tests,378,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:180,usability,memor,memory,180,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:272,usability,memor,memory,272,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10852:547,usability,memor,memory,547,"Improve TPad/TCanvas, fix multiple leaks in tutorials and TPad; 1. Use TString instead of plain char* in TCanvas methods. 2. Use std::vector<Bool_t> for TPad::fCollideGrid. 3. Fix memory leak in `TPad::DrawCollideGrid` and `TPad::DrawColorTable` methods. 4. Fix many-many memory leaks with usage of `<TPrimitive>::Draw<Primitive>` methods like `TLatex::DrawLatex` in tutorials, tests. In all these cases temporary object instance was not deleted. Now just using stack variable instead. . 5. Improve some `TSpectrum2` tutorials - release allocated memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10852
https://github.com/root-project/root/pull/10853:225,deployability,updat,updated,225,[RF] Translate RooStats tutorial rs101_limitexample.C to Python; # This Pull request:. ## Changes or fixes:. Add rs101_limitexample.py - Converted from rs101_limitexample.C. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # Part of [8758](https://github.com/root-project/root/issues/8758).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10853
https://github.com/root-project/root/pull/10853:5,integrability,Translat,Translate,5,[RF] Translate RooStats tutorial rs101_limitexample.C to Python; # This Pull request:. ## Changes or fixes:. Add rs101_limitexample.py - Converted from rs101_limitexample.C. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # Part of [8758](https://github.com/root-project/root/issues/8758).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10853
https://github.com/root-project/root/pull/10853:5,interoperability,Translat,Translate,5,[RF] Translate RooStats tutorial rs101_limitexample.C to Python; # This Pull request:. ## Changes or fixes:. Add rs101_limitexample.py - Converted from rs101_limitexample.C. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # Part of [8758](https://github.com/root-project/root/issues/8758).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10853
https://github.com/root-project/root/pull/10853:195,safety,test,tested,195,[RF] Translate RooStats tutorial rs101_limitexample.C to Python; # This Pull request:. ## Changes or fixes:. Add rs101_limitexample.py - Converted from rs101_limitexample.C. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # Part of [8758](https://github.com/root-project/root/issues/8758).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10853
https://github.com/root-project/root/pull/10853:225,safety,updat,updated,225,[RF] Translate RooStats tutorial rs101_limitexample.C to Python; # This Pull request:. ## Changes or fixes:. Add rs101_limitexample.py - Converted from rs101_limitexample.C. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # Part of [8758](https://github.com/root-project/root/issues/8758).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10853
https://github.com/root-project/root/pull/10853:225,security,updat,updated,225,[RF] Translate RooStats tutorial rs101_limitexample.C to Python; # This Pull request:. ## Changes or fixes:. Add rs101_limitexample.py - Converted from rs101_limitexample.C. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # Part of [8758](https://github.com/root-project/root/issues/8758).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10853
https://github.com/root-project/root/pull/10853:195,testability,test,tested,195,[RF] Translate RooStats tutorial rs101_limitexample.C to Python; # This Pull request:. ## Changes or fixes:. Add rs101_limitexample.py - Converted from rs101_limitexample.C. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # Part of [8758](https://github.com/root-project/root/issues/8758).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10853
https://github.com/root-project/root/pull/10854:126,energy efficiency,Current,Currently,126,"[DF] Introduce the RDatasetSpec class; Introduce a class (RDatasetSpec) responsible for passing dataset specification to RDF. Currently this includes tree and file names; friend trees/chains; global (contiguous) ranges. A new RDataFrame (hence also RLoopManager) constructors are introduced. Moreover, TTreeProcessorMT now can handle a global range on its own. This PR aims to provide solution to https://github.com/root-project/root/issues/7702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10854
https://github.com/root-project/root/pull/10854:104,interoperability,specif,specification,104,"[DF] Introduce the RDatasetSpec class; Introduce a class (RDatasetSpec) responsible for passing dataset specification to RDF. Currently this includes tree and file names; friend trees/chains; global (contiguous) ranges. A new RDataFrame (hence also RLoopManager) constructors are introduced. Moreover, TTreeProcessorMT now can handle a global range on its own. This PR aims to provide solution to https://github.com/root-project/root/issues/7702.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10854
https://github.com/root-project/root/pull/10855:88,energy efficiency,draw,drawing,88,"Protect `strlen(nullptr)` in gpad and graf classes, improve/simplify TMultiGraph ""pads"" drawing; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Simplify TMultiGraph::PaintPads, do not use `TString` as `strlen()` argument",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10855
https://github.com/root-project/root/pull/10855:217,modifiability,paramet,parameter,217,"Protect `strlen(nullptr)` in gpad and graf classes, improve/simplify TMultiGraph ""pads"" drawing; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Simplify TMultiGraph::PaintPads, do not use `TString` as `strlen()` argument",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10855
https://github.com/root-project/root/pull/10855:60,testability,simpl,simplify,60,"Protect `strlen(nullptr)` in gpad and graf classes, improve/simplify TMultiGraph ""pads"" drawing; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Simplify TMultiGraph::PaintPads, do not use `TString` as `strlen()` argument",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10855
https://github.com/root-project/root/pull/10855:228,testability,Simpl,Simplify,228,"Protect `strlen(nullptr)` in gpad and graf classes, improve/simplify TMultiGraph ""pads"" drawing; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Simplify TMultiGraph::PaintPads, do not use `TString` as `strlen()` argument",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10855
https://github.com/root-project/root/pull/10855:60,usability,simpl,simplify,60,"Protect `strlen(nullptr)` in gpad and graf classes, improve/simplify TMultiGraph ""pads"" drawing; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Simplify TMultiGraph::PaintPads, do not use `TString` as `strlen()` argument",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10855
https://github.com/root-project/root/pull/10855:228,usability,Simpl,Simplify,228,"Protect `strlen(nullptr)` in gpad and graf classes, improve/simplify TMultiGraph ""pads"" drawing; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Simplify TMultiGraph::PaintPads, do not use `TString` as `strlen()` argument",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10855
https://github.com/root-project/root/pull/10856:361,interoperability,standard,standard,361,"Protect `strlen(nullptr)` in hist classes, fix memory leak in TF1 constructor; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Fix memory leak in TF1 constructor NSUM(...) parsing - created objects are not deleted. Use `std::make_unique<>()` to create `unique_ptr`. Provided as standard from c++14. Use `TString::Data() ` instead of casting into `(const char *)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10856
https://github.com/root-project/root/pull/10856:199,modifiability,paramet,parameter,199,"Protect `strlen(nullptr)` in hist classes, fix memory leak in TF1 constructor; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Fix memory leak in TF1 constructor NSUM(...) parsing - created objects are not deleted. Use `std::make_unique<>()` to create `unique_ptr`. Provided as standard from c++14. Use `TString::Data() ` instead of casting into `(const char *)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10856
https://github.com/root-project/root/pull/10856:47,performance,memor,memory,47,"Protect `strlen(nullptr)` in hist classes, fix memory leak in TF1 constructor; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Fix memory leak in TF1 constructor NSUM(...) parsing - created objects are not deleted. Use `std::make_unique<>()` to create `unique_ptr`. Provided as standard from c++14. Use `TString::Data() ` instead of casting into `(const char *)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10856
https://github.com/root-project/root/pull/10856:214,performance,memor,memory,214,"Protect `strlen(nullptr)` in hist classes, fix memory leak in TF1 constructor; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Fix memory leak in TF1 constructor NSUM(...) parsing - created objects are not deleted. Use `std::make_unique<>()` to create `unique_ptr`. Provided as standard from c++14. Use `TString::Data() ` instead of casting into `(const char *)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10856
https://github.com/root-project/root/pull/10856:47,usability,memor,memory,47,"Protect `strlen(nullptr)` in hist classes, fix memory leak in TF1 constructor; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Fix memory leak in TF1 constructor NSUM(...) parsing - created objects are not deleted. Use `std::make_unique<>()` to create `unique_ptr`. Provided as standard from c++14. Use `TString::Data() ` instead of casting into `(const char *)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10856
https://github.com/root-project/root/pull/10856:214,usability,memor,memory,214,"Protect `strlen(nullptr)` in hist classes, fix memory leak in TF1 constructor; System crashes when calling `strlen(nullptr)`, therefore protect in cases when argument can be directly set as external parameter. Fix memory leak in TF1 constructor NSUM(...) parsing - created objects are not deleted. Use `std::make_unique<>()` to create `unique_ptr`. Provided as standard from c++14. Use `TString::Data() ` instead of casting into `(const char *)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10856
https://github.com/root-project/root/pull/10857:76,interoperability,prox,proxy,76,"[RF] Fix dirty flag resetting when the normalization set is changed; If the proxy normSet changed, we also have to set the value dirty flag. of the proxy owner. Otherwise, value for the new normalization set might. not get recomputed, which causes bugs! The issue can be reproduced with this small code snippet:. ```C++. using namespace RooFit;. RooRealVar x(""x"", ""x"", 0, -10, 10);. RooGaussian gauss(""gauss"", ""gauss"", x, RooConst(0), RooConst(2));. RooAddition add(""add"", ""add"", {gauss});. std::cout << add.getVal() << std::endl;. std::cout << add.getVal(x) << std::endl;. ```. Without this commit, the value will be the same with and without. normalization set, because changing only the normalization set didn't. trigger a recomputation. This code snippet has also been implemented as a unit test now, where it. is tested that the values are different.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10857
https://github.com/root-project/root/pull/10857:148,interoperability,prox,proxy,148,"[RF] Fix dirty flag resetting when the normalization set is changed; If the proxy normSet changed, we also have to set the value dirty flag. of the proxy owner. Otherwise, value for the new normalization set might. not get recomputed, which causes bugs! The issue can be reproduced with this small code snippet:. ```C++. using namespace RooFit;. RooRealVar x(""x"", ""x"", 0, -10, 10);. RooGaussian gauss(""gauss"", ""gauss"", x, RooConst(0), RooConst(2));. RooAddition add(""add"", ""add"", {gauss});. std::cout << add.getVal() << std::endl;. std::cout << add.getVal(x) << std::endl;. ```. Without this commit, the value will be the same with and without. normalization set, because changing only the normalization set didn't. trigger a recomputation. This code snippet has also been implemented as a unit test now, where it. is tested that the values are different.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10857
https://github.com/root-project/root/pull/10857:795,safety,test,test,795,"[RF] Fix dirty flag resetting when the normalization set is changed; If the proxy normSet changed, we also have to set the value dirty flag. of the proxy owner. Otherwise, value for the new normalization set might. not get recomputed, which causes bugs! The issue can be reproduced with this small code snippet:. ```C++. using namespace RooFit;. RooRealVar x(""x"", ""x"", 0, -10, 10);. RooGaussian gauss(""gauss"", ""gauss"", x, RooConst(0), RooConst(2));. RooAddition add(""add"", ""add"", {gauss});. std::cout << add.getVal() << std::endl;. std::cout << add.getVal(x) << std::endl;. ```. Without this commit, the value will be the same with and without. normalization set, because changing only the normalization set didn't. trigger a recomputation. This code snippet has also been implemented as a unit test now, where it. is tested that the values are different.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10857
https://github.com/root-project/root/pull/10857:818,safety,test,tested,818,"[RF] Fix dirty flag resetting when the normalization set is changed; If the proxy normSet changed, we also have to set the value dirty flag. of the proxy owner. Otherwise, value for the new normalization set might. not get recomputed, which causes bugs! The issue can be reproduced with this small code snippet:. ```C++. using namespace RooFit;. RooRealVar x(""x"", ""x"", 0, -10, 10);. RooGaussian gauss(""gauss"", ""gauss"", x, RooConst(0), RooConst(2));. RooAddition add(""add"", ""add"", {gauss});. std::cout << add.getVal() << std::endl;. std::cout << add.getVal(x) << std::endl;. ```. Without this commit, the value will be the same with and without. normalization set, because changing only the normalization set didn't. trigger a recomputation. This code snippet has also been implemented as a unit test now, where it. is tested that the values are different.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10857
https://github.com/root-project/root/pull/10857:790,testability,unit,unit,790,"[RF] Fix dirty flag resetting when the normalization set is changed; If the proxy normSet changed, we also have to set the value dirty flag. of the proxy owner. Otherwise, value for the new normalization set might. not get recomputed, which causes bugs! The issue can be reproduced with this small code snippet:. ```C++. using namespace RooFit;. RooRealVar x(""x"", ""x"", 0, -10, 10);. RooGaussian gauss(""gauss"", ""gauss"", x, RooConst(0), RooConst(2));. RooAddition add(""add"", ""add"", {gauss});. std::cout << add.getVal() << std::endl;. std::cout << add.getVal(x) << std::endl;. ```. Without this commit, the value will be the same with and without. normalization set, because changing only the normalization set didn't. trigger a recomputation. This code snippet has also been implemented as a unit test now, where it. is tested that the values are different.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10857
https://github.com/root-project/root/pull/10857:795,testability,test,test,795,"[RF] Fix dirty flag resetting when the normalization set is changed; If the proxy normSet changed, we also have to set the value dirty flag. of the proxy owner. Otherwise, value for the new normalization set might. not get recomputed, which causes bugs! The issue can be reproduced with this small code snippet:. ```C++. using namespace RooFit;. RooRealVar x(""x"", ""x"", 0, -10, 10);. RooGaussian gauss(""gauss"", ""gauss"", x, RooConst(0), RooConst(2));. RooAddition add(""add"", ""add"", {gauss});. std::cout << add.getVal() << std::endl;. std::cout << add.getVal(x) << std::endl;. ```. Without this commit, the value will be the same with and without. normalization set, because changing only the normalization set didn't. trigger a recomputation. This code snippet has also been implemented as a unit test now, where it. is tested that the values are different.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10857
https://github.com/root-project/root/pull/10857:818,testability,test,tested,818,"[RF] Fix dirty flag resetting when the normalization set is changed; If the proxy normSet changed, we also have to set the value dirty flag. of the proxy owner. Otherwise, value for the new normalization set might. not get recomputed, which causes bugs! The issue can be reproduced with this small code snippet:. ```C++. using namespace RooFit;. RooRealVar x(""x"", ""x"", 0, -10, 10);. RooGaussian gauss(""gauss"", ""gauss"", x, RooConst(0), RooConst(2));. RooAddition add(""add"", ""add"", {gauss});. std::cout << add.getVal() << std::endl;. std::cout << add.getVal(x) << std::endl;. ```. Without this commit, the value will be the same with and without. normalization set, because changing only the normalization set didn't. trigger a recomputation. This code snippet has also been implemented as a unit test now, where it. is tested that the values are different.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10857
https://github.com/root-project/root/pull/10860:25,availability,operat,operations,25,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:166,availability,operat,operation,166,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:533,availability,operat,operation,533,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1312,deployability,contain,container,1312,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1377,deployability,updat,updating,1377,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1602,deployability,Updat,Update,1602,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1681,deployability,updat,updated,1681,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:787,energy efficiency,Load,LoadClusters,787,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:952,energy efficiency,current,currently,952,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:658,integrability,interfac,interfaces,658,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1114,integrability,wrap,wrappers,1114,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:237,interoperability,distribut,distribution,237,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:598,interoperability,distribut,distributed,598,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:658,interoperability,interfac,interfaces,658,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:933,interoperability,distribut,distribution,933,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1114,interoperability,wrapper,wrappers,1114,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:658,modifiability,interfac,interfaces,658,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:529,performance,I/O,I/O,529,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:559,performance,I/O,I/O,559,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:752,performance,I/O,I/O,752,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:787,performance,Load,LoadClusters,787,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1045,performance,perform,performance,1045,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1377,safety,updat,updating,1377,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1602,safety,Updat,Update,1602,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1651,safety,test,tested,1651,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1681,safety,updat,updated,1681,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:888,security,Hash,Hash,888,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1209,security,Hash,Hash,1209,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1377,security,updat,updating,1377,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1602,security,Updat,Update,1602,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1681,security,updat,updated,1681,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1651,testability,test,tested,1651,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:14,usability,Support,Support,14,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:119,usability,support,support,119,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:495,usability,support,supports,495,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:715,usability,support,supports,715,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/pull/10860:1045,usability,perform,performance,1045,"[ntuple,daos] Support RW operations with multiple attribute keys; This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage. - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. . - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results). - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once. - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally. - [x] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10860
https://github.com/root-project/root/issues/10861:289,availability,error,error,289,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6840,availability,error,error,6840,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:13,deployability,fail,fails,13,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:22,deployability,build,build,22,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:232,deployability,fail,fails,232,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:241,deployability,build,build,241,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:381,deployability,FAIL,FAILED,381,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:638,deployability,Modul,Module,638,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:687,deployability,modul,module,687,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:725,deployability,modul,module,725,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:734,deployability,fail,failed,734,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1291,deployability,Modul,Module,1291," from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::functi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1504,deployability,Modul,Module,1504,".26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::Compiler",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1697,deployability,Modul,Module,1697," non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3383,deployability,Modul,Module,3383,"on, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3604,deployability,Modul,Module,3604,"0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::Stri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5137,deployability,Modul,ModuleFileExtension,5137," PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5207,deployability,Modul,ModuleFileExtension,5207,"ternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5362,deployability,Modul,ModuleFileExtension,5362,"r::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5432,deployability,Modul,ModuleFileExtension,5432,"ng::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6175,deployability,build,build,6175,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6320,deployability,build,build,6320,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6356,deployability,build,build,6356,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6420,deployability,configurat,configuration,6420,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6575,deployability,fail,failed,6575,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6682,deployability,build,build,6682,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6820,deployability,Fail,Fail,6820,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:371,energy efficiency,Core,Core,371,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:389,energy efficiency,core,core,389,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:410,energy efficiency,Core,Core,410,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:459,energy efficiency,green,greenc,459,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1471,energy efficiency,alloc,allocator,1471,"cts/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::fun",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1664,energy efficiency,alloc,allocator,1664,"od) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSaf",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3483,energy efficiency,load,loadModule,3483,"id (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5169,energy efficiency,alloc,allocator,5169,"0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5394,energy efficiency,alloc,allocator,5394,"ocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5477,energy efficiency,green,greenc,5477,"paquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodu",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5636,energy efficiency,green,greenc,5636,". #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5691,energy efficiency,core,core,5691,"tialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5789,energy efficiency,green,greenc,5789,"r::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to repr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5844,energy efficiency,core,core,5844,"ansaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5923,energy efficiency,green,greenc,5923,"TypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f8",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5978,energy efficiency,core,core,5978,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6140,energy efficiency,green,greenc,6140,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6217,energy efficiency,core,core,6217,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6764,energy efficiency,Current,Currently,6764,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6420,integrability,configur,configuration,6420,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:638,modifiability,Modul,Module,638,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:687,modifiability,modul,module,687,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:725,modifiability,modul,module,725,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1291,modifiability,Modul,Module,1291," from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::functi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1504,modifiability,Modul,Module,1504,".26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::Compiler",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1697,modifiability,Modul,Module,1697," non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3383,modifiability,Modul,Module,3383,"on, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3604,modifiability,Modul,Module,3604,"0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::Stri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5137,modifiability,Modul,ModuleFileExtension,5137," PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5207,modifiability,Modul,ModuleFileExtension,5207,"ternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5362,modifiability,Modul,ModuleFileExtension,5362,"r::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5432,modifiability,Modul,ModuleFileExtension,5432,"ng::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6420,modifiability,configur,configuration,6420,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:289,performance,error,error,289,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1891,performance,Multiplex,MultiplexConsumer,1891,"03ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::functi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1952,performance,Multiplex,MultiplexConsumer,1952,"25630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3483,performance,load,loadModule,3483,"id (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6722,performance,parallel,parallel,6722,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6840,performance,error,error,6840,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:13,reliability,fail,fails,13,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:232,reliability,fail,fails,232,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:381,reliability,FAIL,FAILED,381,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:734,reliability,fail,failed,734,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6575,reliability,fail,failed,6575,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6820,reliability,Fail,Fail,6820,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:289,safety,error,error,289,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:466,safety,test,test-products,466,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:638,safety,Modul,Module,638,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:687,safety,modul,module,687,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:725,safety,modul,module,725,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1291,safety,Modul,Module,1291," from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::functi",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1504,safety,Modul,Module,1504,".26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::Compiler",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:1697,safety,Modul,Module,1697," non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba6284 clang::ParseAST(clang::Sema&, bool, bool) ParseAST.cpp:0:0. #14 0x00000000019f9690 clang::FrontendAction::Execute() FrontendAction.cpp:0:0. #15 0x00000000019a4939 clang::CompilerInstance::ExecuteAction(clang::FrontendAction&) CompilerInstance.cpp:0:0. #16 0x00000000019afbe2 void llvm::function_ref<void ()>::callback_fn<compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3383,safety,Modul,Module,3383,"on, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm:::function_ref<void (clang::CompilerInstance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3604,safety,Modul,Module,3604,"0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::Stri",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5137,safety,Modul,ModuleFileExtension,5137," PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5207,safety,Modul,ModuleFileExtension,5207,"ternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5362,safety,Modul,ModuleFileExtension,5362,"r::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5432,safety,Modul,ModuleFileExtension,5432,"ng::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should b",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5484,safety,test,test-products,5484,"ang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5643,safety,test,test-products,5643,"0000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5796,safety,test,test-products,5796,"sult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5930,safety,test,test-products,5930,"cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6147,safety,test,test-products,6147,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6840,safety,error,error,6840,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:800,security,Sign,Signals,800,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:870,security,Sign,Signals,870,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:909,security,Sign,SignalHandler,909,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:928,security,Sign,Signals,928,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3554,security,Ident,IdentifierInfo,3554,"Instance&)>)::$_3>(long) CompilerInstance.cpp:0:0. #17 0x0000000003e4378f llvm::CrashRecoveryContext::RunSafely(llvm::function_ref<void ()>) CrashRecoveryContext.cpp:0:0. #18 0x0000000003e438b4 RunSafelyOnThread_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e clin",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3766,security,Token,Token,3766,"ead_Dispatch(void*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3781,security,Token,Token,3781,"id*) CrashRecoveryContext.cpp:0:0. #19 0x0000000003e4388d llvm::CrashRecoveryContext::RunSafelyOnThread(llvm::function_ref<void ()>, unsigned int) CrashRecoveryContext.cpp:0:0. #20 0x00000000019ac171 compileModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::Incremen",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:3987,security,Token,Token,3987,"eModuleImpl(clang::CompilerInstance&, clang::SourceLocation, llvm::StringRef, clang::FrontendInputFile, llvm::StringRef, llvm::StringRef, llvm::function_ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:4140,security,Token,Token,4140,"ref<void (clang::CompilerInstance&)>, llvm::function_ref<void (clang::CompilerInstance&)>) CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::Module",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:4231,security,Token,Token,4231,"CompilerInstance.cpp:0:0. #21 0x00000000019aa3b1 compileAndLoadModule(clang::CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > co",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:4308,security,Token,Token,4308,"CompilerInstance&, clang::SourceLocation, clang::SourceLocation, clang::Module*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:4386,security,Token,Token,4386,"*, llvm::StringRef) CompilerInstance.cpp:0:0. #22 0x00000000019a964a clang::CompilerInstance::loadModule(clang::SourceLocation, llvm::ArrayRef<std::__2::pair<clang::IdentifierInfo*, clang::SourceLocation> >, clang::Module::NameVisibilityKind, bool) CompilerInstance.cpp:0:0. #23 0x0000000003b2a5be clang::Preprocessor::HandleHeaderIncludeOrImport(clang::SourceLocation, clang::Token&, clang::Token&, clang::SourceLocation, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #24 0x0000000003b221d5 clang::Preprocessor::HandleIncludeDirective(clang::SourceLocation, clang::Token&, clang::DirectoryLookup const*, clang::FileEntry const*) PPDirectives.cpp:0:0. #25 0x0000000003b22b03 clang::Preprocessor::HandleDirective(clang::Token&) PPDirectives.cpp:0:0. #26 0x0000000003afa515 clang::Lexer::LexTokenInternal(clang::Token&, bool) Lexer.cpp:0:0. #27 0x0000000003af7b42 clang::Lexer::Lex(clang::Token&) Lexer.cpp:0:0. #28 0x0000000003b5a264 clang::Preprocessor::Lex(clang::Token&) Preprocessor.cpp:0:0. #29 0x0000000001c40f00 clang::Parser::ParseTopLevelDecl(clang::OpaquePtr<clang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6420,security,configur,configuration,6420,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6830,security,ident,identical,6830,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:466,testability,test,test-products,466,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:649,testability,Assert,Assertion,649,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5484,testability,test,test-products,5484,"ang::DeclGroupRef>&, bool) Parser.cpp:0:0. #30 0x000000000152a89e cling::IncrementalParser::ParseInternal(llvm::StringRef) IncrementalParser.cpp:0:0. #31 0x0000000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5643,testability,test,test-products,5643,"0000001529c34 cling::IncrementalParser::Initialize(llvm::SmallVectorImpl<llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5796,testability,test,test-products,5796,"sult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `m",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:5930,testability,test,test-products,5930,"cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6147,testability,test,test-products,6147,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6510,testability,context,context,6510,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6538,testability,simpl,simplified,6538,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:289,usability,error,error,289,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:535,usability,tool,tools,535,"ROOT 6.26/04 fails to build with LLVM/Clang 14.0.6 with C++17 / `libc++` on SLF7; - [x] Checked for duplicates. ### Describe the bug. ROOT 6.26/04 (https://github.com/root-project/root/tree/02b2af7af1be3430a3124236a7cdc6bb13cf90d2) fails to build with LLVM/Clang 14.0.6 with the following error from `rootcling`:. ```{Console}. [7221/9777] Generating G__Core.cxx, ../lib/Core.pcm. FAILED: core/G__Core.cxx lib/Core.pcm ... <snip/>. rootcling_stage1: /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/interpreter/llvm/src/tools/clang/lib/Serialization/ASTWriter.cpp:2799: unsigned int clang::ASTWriter::getSubmoduleID(clang::Module *): Assertion `(ID || !Mod) && ""asked for module ID for non-local, non-imported module""' failed. #0 0x0000000003ee5514 PrintStackTraceSignalHandler(void*) Signals.cpp:0:0. #1 0x0000000003ee32cc llvm::sys::RunSignalHandlers() Signals.cpp:0:0. #2 0x0000000003ee5935 SignalHandler(int) Signals.cpp:0:0. #3 0x00007f1552225630 __restore_rt sigaction.c:0:0. #4 0x00007f1551316387 raise (/lib64/libc.so.6+0x36387). #5 0x00007f1551317a78 abort (/lib64/libc.so.6+0x37a78). #6 0x00007f155130f1a6 __assert_fail_base (/lib64/libc.so.6+0x2f1a6). #7 0x00007f155130f252 (/lib64/libc.so.6+0x2f252). #8 0x0000000001d23bf3 clang::ASTWriter::WriteSubmodules(clang::Module*) ASTWriter.cpp:0:0. #9 0x0000000001d34a01 clang::ASTWriter::WriteASTCore(clang::Sema&, llvm::StringRef, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*) ASTWriter.cpp:0:0. #10 0x0000000001d31700 clang::ASTWriter::WriteAST(clang::Sema&, std::__2::basic_string<char, std::__2::char_traits<char>, std::__2::allocator<char> > const&, clang::Module*, llvm::StringRef, bool, bool) ASTWriter.cpp:0:0. #11 0x0000000001d7f347 clang::PCHGenerator::HandleTranslationUnit(clang::ASTContext&) GeneratePCH.cpp:0:0. #12 0x0000000001a4269c clang::MultiplexConsumer::HandleTranslationUnit(clang::ASTContext&) MultiplexConsumer.cpp:0:0. #13 0x0000000001ba628",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6299,usability,behavi,behavior,6299,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6538,usability,simpl,simplified,6538,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/issues/10861:6840,usability,error,error,6840,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0. #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0. #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17. #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7. #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16. #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4. #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555). #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89). <snip/>. ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10861
https://github.com/root-project/root/pull/10862:207,availability,error,errors,207,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:276,deployability,updat,updated,276,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:40,integrability,complian,compliant,40,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:104,integrability,complian,compliant,104,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:12,interoperability,Format,Formatted,12,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:207,performance,error,errors,207,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:40,safety,compl,compliant,40,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:104,safety,compl,compliant,104,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:207,safety,error,errors,207,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:245,safety,test,tested,245,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:276,safety,updat,updated,276,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:40,security,compl,compliant,40,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:104,security,compl,compliant,104,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:276,security,updat,updated,276,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:245,testability,test,tested,245,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10862:207,usability,error,errors,207,[cling-cpt] Formatted code to be flake8 compliant [skip-ci]; # This Pull request: Makes the code flake8 compliant. ## Changes or fixes: Reformatted the entire file using yapf and got rid of remaining flake8 errors manually. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned https://github.com/root-project/root/pull/406 in (https://github.com/root-project/cling/issues/406).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10862
https://github.com/root-project/root/pull/10863:168,deployability,modul,module,168,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:196,deployability,build,build,196,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:408,deployability,modul,module,408,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:483,deployability,updat,updated,483,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:21,integrability,sub,subprocess,21,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:111,integrability,sub,subprocess,111,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:248,integrability,sub,subprocess,248,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:339,integrability,sub,subprocess,339,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:397,integrability,sub,subprocess,397,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:168,modifiability,modul,module,168,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:408,modifiability,modul,module,408,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:202,performance,time,time,202,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:168,safety,modul,module,168,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:408,safety,modul,module,408,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:452,safety,test,tested,452,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:483,safety,updat,updated,483,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:483,security,updat,updated,483,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10863:452,testability,test,tested,452,"[cling-cpt] Replaced subprocess.popen calls with os.popen calls [skip-ci]; . # This Pull request: Replaced the subprocess.popen calls with os.popen calls. Using the os module in general will make build time faster. ## Changes or fixes: Replaced 11 subprocess.popen calls with os.popen calls, so with my previous pull request regarding the subprocess calls and this one, this entirely replaces the subprocess module use in the cpt. ## Checklist:. - [X] tested changes locally. - [NA] updated the docs (if necessary). This PR fixes the issue mentioned in #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10863
https://github.com/root-project/root/pull/10864:37,energy efficiency,core,core,37,Control `strlen(nullptr)` in several core classes; Prevent crash when user specifies `nullptr` as argument for `const char*`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10864
https://github.com/root-project/root/pull/10864:75,interoperability,specif,specifies,75,Control `strlen(nullptr)` in several core classes; Prevent crash when user specifies `nullptr` as argument for `const char*`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10864
https://github.com/root-project/root/pull/10864:51,safety,Prevent,Prevent,51,Control `strlen(nullptr)` in several core classes; Prevent crash when user specifies `nullptr` as argument for `const char*`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10864
https://github.com/root-project/root/pull/10864:0,security,Control,Control,0,Control `strlen(nullptr)` in several core classes; Prevent crash when user specifies `nullptr` as argument for `const char*`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10864
https://github.com/root-project/root/pull/10864:51,security,Preven,Prevent,51,Control `strlen(nullptr)` in several core classes; Prevent crash when user specifies `nullptr` as argument for `const char*`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10864
https://github.com/root-project/root/pull/10864:0,testability,Control,Control,0,Control `strlen(nullptr)` in several core classes; Prevent crash when user specifies `nullptr` as argument for `const char*`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10864
https://github.com/root-project/root/pull/10864:70,usability,user,user,70,Control `strlen(nullptr)` in several core classes; Prevent crash when user specifies `nullptr` as argument for `const char*`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10864
https://github.com/root-project/root/issues/10866:495,deployability,fail,fail,495,"ACLiC flags parsing for compiler command line options broken in certain cases; Hi all. . Please see the attach . [Foo.zip](https://github.com/root-project/root/files/9019098/Foo.zip) . for a _Minimal-(non)Working-Example_ (MWE), as well as a somewhat deeper explanation. . The problem is that ROOT may split the ACLiC flags (e.g., -I...) wrongly in certain cases. E.g., . -I/some/path/with-xin-it . may become _two_ distinct compiler arguments . -I/some/path/wit. -xin-it. which causes ACLiC to fail. . ROOT 6.26/00 on Debian GNU/Linux ""sid"". Yours, . Christian.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10866
https://github.com/root-project/root/issues/10866:495,reliability,fail,fail,495,"ACLiC flags parsing for compiler command line options broken in certain cases; Hi all. . Please see the attach . [Foo.zip](https://github.com/root-project/root/files/9019098/Foo.zip) . for a _Minimal-(non)Working-Example_ (MWE), as well as a somewhat deeper explanation. . The problem is that ROOT may split the ACLiC flags (e.g., -I...) wrongly in certain cases. E.g., . -I/some/path/with-xin-it . may become _two_ distinct compiler arguments . -I/some/path/wit. -xin-it. which causes ACLiC to fail. . ROOT 6.26/00 on Debian GNU/Linux ""sid"". Yours, . Christian.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10866
https://github.com/root-project/root/issues/10866:33,usability,command,command,33,"ACLiC flags parsing for compiler command line options broken in certain cases; Hi all. . Please see the attach . [Foo.zip](https://github.com/root-project/root/files/9019098/Foo.zip) . for a _Minimal-(non)Working-Example_ (MWE), as well as a somewhat deeper explanation. . The problem is that ROOT may split the ACLiC flags (e.g., -I...) wrongly in certain cases. E.g., . -I/some/path/with-xin-it . may become _two_ distinct compiler arguments . -I/some/path/wit. -xin-it. which causes ACLiC to fail. . ROOT 6.26/00 on Debian GNU/Linux ""sid"". Yours, . Christian.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10866
https://github.com/root-project/root/pull/10867:129,usability,user,users,129,"[RF] Code modernization in RooFit tutorials; It's important to follow modern ROOT code patterns in the tutorials,. such that the users will also get it right. Hence, the following. replacements are made in the RooFit tutorials:. * `Double_t` to `double`. * `Bool_t` to `bool`. * `kTrue` to `true`. * `kFalse` to `false`",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10867
https://github.com/root-project/root/issues/10868:11,deployability,integr,integral,11,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:38,deployability,integr,integrated,38,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:110,deployability,integr,integral,110,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:257,deployability,integr,integral,257,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:313,deployability,integr,integral,313,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:846,deployability,integr,integral,846,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:954,deployability,integr,integral,954,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1150,deployability,integr,integration,1150,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:11,integrability,integr,integral,11,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:38,integrability,integr,integrated,38,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:110,integrability,integr,integral,110,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:257,integrability,integr,integral,257,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:313,integrability,integr,integral,313,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:846,integrability,integr,integral,846,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:954,integrability,integr,integral,954,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1150,integrability,integr,integration,1150,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:11,interoperability,integr,integral,11,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:38,interoperability,integr,integrated,38,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:110,interoperability,integr,integral,110,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:257,interoperability,integr,integral,257,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:313,interoperability,integr,integral,313,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:846,interoperability,integr,integral,846,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:954,interoperability,integr,integral,954,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1150,interoperability,integr,integration,1150,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:11,modifiability,integr,integral,11,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:38,modifiability,integr,integrated,38,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:110,modifiability,integr,integral,110,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:257,modifiability,integr,integral,257,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:313,modifiability,integr,integral,313,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:846,modifiability,integr,integral,846,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:954,modifiability,integr,integral,954,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1150,modifiability,integr,integration,1150,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:11,reliability,integr,integral,11,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:38,reliability,integr,integrated,38,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:110,reliability,integr,integral,110,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:257,reliability,integr,integral,257,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:313,reliability,integr,integral,313,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:713,reliability,Poisson,Poisson,713,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:846,reliability,integr,integral,846,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:954,reliability,integr,integral,954,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1150,reliability,integr,integration,1150,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:377,safety,test,testPoissonIntegral,377,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:11,security,integr,integral,11,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:38,security,integr,integrated,38,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:110,security,integr,integral,110,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:257,security,integr,integral,257,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:313,security,integr,integral,313,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:846,security,integr,integral,846,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:954,security,integr,integral,954,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1150,security,integr,integration,1150,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1193,security,hardcod,hardcoded,1193,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:11,testability,integr,integral,11,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:38,testability,integr,integrated,38,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:110,testability,integr,integral,110,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:257,testability,integr,integral,257,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:313,testability,integr,integral,313,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:377,testability,test,testPoissonIntegral,377,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:846,testability,integr,integral,846,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:954,testability,integr,integral,954,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1091,testability,context,context,1091,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:1150,testability,integr,integration,1150,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10868:243,usability,behavi,behavior,243,"[RF] Wrong integral for RooPoisson if integrated from a > 0 to infinity; ### Describe the bug. The analytical integral of the RooPoisson is implemented wrongly for the case where the boundaries are `0 < a < 1e30` and `b >= 1e30`. ### Expected behavior. The integral should be correct. ### To Reproduce. The wrong integral can be reproduced with this code snippet. ```C++. void testPoissonIntegral() {. const double mu = 100;. const double inf = std::numeric_limits<double>::max();. // 1. Should be 1 because the probability to have x greater than 100000 is. // basically zero. std::cout << getPoissonIntegral(0, 100000, mu) << std::endl;. // 2. Should be around 0.5, as the range of x is from the mean of the. // Poisson to basically infinity. std::cout << getPoissonIntegral(100, 100000, mu) << std::endl;. // 3. Should be the same as the first integral. std::cout << getPoissonIntegral(0, inf, mu) << std::endl;. // 3. Should be the same as the second integral but it isn't! std::cout << getPoissonIntegral(100, inf, mu) << std::endl;. }. ```. ### Setup. Any setup will do. ### Additional context. The problem is most likely that in the analytical integration code for the RooPoisson, it is hardcoded to return 1.0 if the upper boundary is infinite:. https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L102. An addition code branch is required for the case where the upper bound is infinite and the lower bound greater than zero.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10868
https://github.com/root-project/root/issues/10869:1143,availability,Operat,Operating,1143,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:1122,deployability,version,version,1122,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:182,energy efficiency,model,model,182,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:997,energy efficiency,model,model,997,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:902,integrability,sub,subsequent,902,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:1122,integrability,version,version,1122,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:1122,modifiability,version,version,1122,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:11,reliability,doe,does,11,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:1033,reliability,doe,does,1033,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:470,safety,test,testsplot,470,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:74,security,sign,signal,74,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:175,security,sign,signal,175,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:182,security,model,model,182,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:233,security,sign,signal,233,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:508,security,sign,signal,508,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:572,security,Sign,Signal,572,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:617,security,Sign,Signal,617,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:690,security,sign,signal,690,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:741,security,Sign,Signal,741,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:786,security,Sign,Signal,786,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:990,security,sign,signal,990,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:997,security,model,model,997,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:1093,security,sign,signal,1093,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:470,testability,test,testsplot,470,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:219,usability,behavi,behavior,219,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:344,usability,minim,minimal,344,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10869:862,usability,behavi,behavior,862,"[RF] sPlot does not work with RooAddPdf in 6.26/04; ### What's wrong? The signal yield is different before and after calling the `RooStats::SPlot` method. This happens if the signal model is a RooAddPdf. . ### Expected behavior. The signal yield should stay the same after calling the sPlot method. . ### To Reproduce. I have prepared a fairly minimal reproducer based on the `rs301_splot` example. https://cernbox.cern.ch/index.php/s/2jCaTgG1I2kKakU. how to run: `root testsplot.C`. With ROOT 6.24/00:. the signal yield before and after sPlot is roughly the same✅:. ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 286.012. ```. With ROOT 6.26/04:. the signal yield after sPlot is reset to zero❌. . ```. Signal yield before doing an sPlot: 285.981. Signal yield after doing an sPlot: 9.19709e-08. ```. This leads to nonsense behavior of the sWeights, as well as in subsequent plotting, etc. Some investigation shows that the problem is visible when the signal model is a RooAddPdf, but the issue does not seem to be present if a single PDF is used for the signal. . ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: CentOS 7. 3. How you obtained ROOT: from conda.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10869
https://github.com/root-project/root/issues/10870:296,deployability,stack,stack,296,"Improvements to debug/perf symbols for jitted code; As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`. - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces. - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10870
https://github.com/root-project/root/issues/10870:95,integrability,event,event,95,"Improvements to debug/perf symbols for jitted code; As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`. - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces. - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10870
https://github.com/root-project/root/issues/10870:257,integrability,messag,message,257,"Improvements to debug/perf symbols for jitted code; As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`. - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces. - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10870
https://github.com/root-project/root/issues/10870:257,interoperability,messag,message,257,"Improvements to debug/perf symbols for jitted code; As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`. - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces. - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10870
https://github.com/root-project/root/issues/10870:344,performance,memor,memory,344,"Improvements to debug/perf symbols for jitted code; As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`. - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces. - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10870
https://github.com/root-project/root/issues/10870:302,testability,trace,traces,302,"Improvements to debug/perf symbols for jitted code; As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`. - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces. - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10870
https://github.com/root-project/root/issues/10870:344,usability,memor,memory,344,"Improvements to debug/perf symbols for jitted code; As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`. - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces. - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10870
https://github.com/root-project/root/issues/10870:433,usability,interact,interactive,433,"Improvements to debug/perf symbols for jitted code; As discussed during https://indico.cern.ch/event/1176978/ :+1: . - [x] always add `EXTRA_CLING_ARGS='-O0 -fno-omit-frame-pointer' when `CLING_DEBUG=1`. - [x] suggest re-running with `CLING_DEBUG=1` in the message surrounding the ROOT-generated stack traces. - [x] investigate the runtime and memory cost of `CLING_DEBUG=1`, consider having it on by default in some cases, e.g. for interactive usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10870
https://github.com/root-project/root/issues/10871:103,availability,cluster,cluster,103,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:245,availability,redund,redundant,245,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:103,deployability,cluster,cluster,103,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:245,deployability,redundan,redundant,245,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:76,energy efficiency,current,currently,76,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:255,modifiability,deco,decompression,255,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:86,reliability,doe,does,86,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:245,reliability,redundan,redundant,245,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:239,safety,avoid,avoid,239,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/issues/10871:245,safety,redund,redundant,245,[DF][ntuple] Better task splitting with RDF+RNTuple; The RNTuple datasource currently does not look at cluster boundaries when splitting the dataset into entry ranges that are fed to TBB tasks via RDF. A more sensible task splitting would avoid redundant decompression work.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10871
https://github.com/root-project/root/pull/10873:485,interoperability,prox,proxy,485,"[RF] Fix normalization issues with RooGenericPdf and RooFormulaVar; As a normalization set within `evaluate()`, the RooGenericPdf used the. `RooAbsPdf::_normSet` member, and the RooFormulaVar used the. `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used. outside the implementation of `RooAbsPdf::getValV()` and. `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set. from the proxy, which is in this case a RooArgList (see for example how. the RooAddition does it). This commit suggests to do that for the. RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:. [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem. reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10873
https://github.com/root-project/root/pull/10873:565,reliability,doe,does,565,"[RF] Fix normalization issues with RooGenericPdf and RooFormulaVar; As a normalization set within `evaluate()`, the RooGenericPdf used the. `RooAbsPdf::_normSet` member, and the RooFormulaVar used the. `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used. outside the implementation of `RooAbsPdf::getValV()` and. `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set. from the proxy, which is in this case a RooArgList (see for example how. the RooAddition does it). This commit suggests to do that for the. RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:. [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem. reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10873
https://github.com/root-project/root/pull/10873:765,safety,test,test,765,"[RF] Fix normalization issues with RooGenericPdf and RooFormulaVar; As a normalization set within `evaluate()`, the RooGenericPdf used the. `RooAbsPdf::_normSet` member, and the RooFormulaVar used the. `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used. outside the implementation of `RooAbsPdf::getValV()` and. `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set. from the proxy, which is in this case a RooArgList (see for example how. the RooAddition does it). This commit suggests to do that for the. RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:. [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem. reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10873
https://github.com/root-project/root/pull/10873:789,safety,test,testGenericPdf,789,"[RF] Fix normalization issues with RooGenericPdf and RooFormulaVar; As a normalization set within `evaluate()`, the RooGenericPdf used the. `RooAbsPdf::_normSet` member, and the RooFormulaVar used the. `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used. outside the implementation of `RooAbsPdf::getValV()` and. `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set. from the proxy, which is in this case a RooArgList (see for example how. the RooAddition does it). This commit suggests to do that for the. RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:. [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem. reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10873
https://github.com/root-project/root/pull/10873:395,testability,context,context,395,"[RF] Fix normalization issues with RooGenericPdf and RooFormulaVar; As a normalization set within `evaluate()`, the RooGenericPdf used the. `RooAbsPdf::_normSet` member, and the RooFormulaVar used the. `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used. outside the implementation of `RooAbsPdf::getValV()` and. `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set. from the proxy, which is in this case a RooArgList (see for example how. the RooAddition does it). This commit suggests to do that for the. RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:. [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem. reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10873
https://github.com/root-project/root/pull/10873:760,testability,unit,unit,760,"[RF] Fix normalization issues with RooGenericPdf and RooFormulaVar; As a normalization set within `evaluate()`, the RooGenericPdf used the. `RooAbsPdf::_normSet` member, and the RooFormulaVar used the. `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used. outside the implementation of `RooAbsPdf::getValV()` and. `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set. from the proxy, which is in this case a RooArgList (see for example how. the RooAddition does it). This commit suggests to do that for the. RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:. [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem. reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10873
https://github.com/root-project/root/pull/10873:765,testability,test,test,765,"[RF] Fix normalization issues with RooGenericPdf and RooFormulaVar; As a normalization set within `evaluate()`, the RooGenericPdf used the. `RooAbsPdf::_normSet` member, and the RooFormulaVar used the. `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used. outside the implementation of `RooAbsPdf::getValV()` and. `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set. from the proxy, which is in this case a RooArgList (see for example how. the RooAddition does it). This commit suggests to do that for the. RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:. [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem. reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10873
https://github.com/root-project/root/pull/10873:789,testability,test,testGenericPdf,789,"[RF] Fix normalization issues with RooGenericPdf and RooFormulaVar; As a normalization set within `evaluate()`, the RooGenericPdf used the. `RooAbsPdf::_normSet` member, and the RooFormulaVar used the. `RooAbsReal::_lastNSet` member. Both of them are not supposed to be used. outside the implementation of `RooAbsPdf::getValV()` and. `RooAbsReal::getValV()` and they are unreliable in any other context. Actually, in `evaluate()`, one should always use the normalization set. from the proxy, which is in this case a RooArgList (see for example how. the RooAddition does it). This commit suggests to do that for the. RooGenericPdf and RooFormulaVar. This change fixes the following Jira issue:. [ROOT-5101](https://sft.its.cern.ch/jira/browse/ROOT-5101). A new unit test is implemented in `testGenericPdf` to cover the problem. reported in that issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10873
https://github.com/root-project/root/pull/10874:401,deployability,contain,contains,401,"[RF] Correcly pythonize RooAbsCollection::addClone() for all overloads; There are two overloads of RooAbsCollection::addClone():. - RooAbsArg *addClone(const RooAbsArg& var, bool silent=false);. - void addClone(const RooAbsCollection& list, bool silent=false);. In the case of the RooAbsArg overload, we need to tell Python that it. doesn't own the returned pointer. That's because the function name. contains ""Clone"", which makes cppyy guess that the returned pointer. points to a clone owned by the caller. In the case of the. RooAbsCollection input, the return value will be `None` and we don't. need to change any ownership flags (in fact, calling. SetOwnership(None, False) would cause a crash). The check for the `None` return value was so far not done in the. pythonization and is added with this commit. A unit test was also added to check that the RooAbsCollection overloads. both work. This commit fixes the following Jira issue for good:. [ROOT-9580](https://sft.its.cern.ch/jira/browse/ROOT-9580).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10874
https://github.com/root-project/root/pull/10874:333,reliability,doe,doesn,333,"[RF] Correcly pythonize RooAbsCollection::addClone() for all overloads; There are two overloads of RooAbsCollection::addClone():. - RooAbsArg *addClone(const RooAbsArg& var, bool silent=false);. - void addClone(const RooAbsCollection& list, bool silent=false);. In the case of the RooAbsArg overload, we need to tell Python that it. doesn't own the returned pointer. That's because the function name. contains ""Clone"", which makes cppyy guess that the returned pointer. points to a clone owned by the caller. In the case of the. RooAbsCollection input, the return value will be `None` and we don't. need to change any ownership flags (in fact, calling. SetOwnership(None, False) would cause a crash). The check for the `None` return value was so far not done in the. pythonization and is added with this commit. A unit test was also added to check that the RooAbsCollection overloads. both work. This commit fixes the following Jira issue for good:. [ROOT-9580](https://sft.its.cern.ch/jira/browse/ROOT-9580).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10874
https://github.com/root-project/root/pull/10874:546,safety,input,input,546,"[RF] Correcly pythonize RooAbsCollection::addClone() for all overloads; There are two overloads of RooAbsCollection::addClone():. - RooAbsArg *addClone(const RooAbsArg& var, bool silent=false);. - void addClone(const RooAbsCollection& list, bool silent=false);. In the case of the RooAbsArg overload, we need to tell Python that it. doesn't own the returned pointer. That's because the function name. contains ""Clone"", which makes cppyy guess that the returned pointer. points to a clone owned by the caller. In the case of the. RooAbsCollection input, the return value will be `None` and we don't. need to change any ownership flags (in fact, calling. SetOwnership(None, False) would cause a crash). The check for the `None` return value was so far not done in the. pythonization and is added with this commit. A unit test was also added to check that the RooAbsCollection overloads. both work. This commit fixes the following Jira issue for good:. [ROOT-9580](https://sft.its.cern.ch/jira/browse/ROOT-9580).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10874
https://github.com/root-project/root/pull/10874:819,safety,test,test,819,"[RF] Correcly pythonize RooAbsCollection::addClone() for all overloads; There are two overloads of RooAbsCollection::addClone():. - RooAbsArg *addClone(const RooAbsArg& var, bool silent=false);. - void addClone(const RooAbsCollection& list, bool silent=false);. In the case of the RooAbsArg overload, we need to tell Python that it. doesn't own the returned pointer. That's because the function name. contains ""Clone"", which makes cppyy guess that the returned pointer. points to a clone owned by the caller. In the case of the. RooAbsCollection input, the return value will be `None` and we don't. need to change any ownership flags (in fact, calling. SetOwnership(None, False) would cause a crash). The check for the `None` return value was so far not done in the. pythonization and is added with this commit. A unit test was also added to check that the RooAbsCollection overloads. both work. This commit fixes the following Jira issue for good:. [ROOT-9580](https://sft.its.cern.ch/jira/browse/ROOT-9580).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10874
https://github.com/root-project/root/pull/10874:814,testability,unit,unit,814,"[RF] Correcly pythonize RooAbsCollection::addClone() for all overloads; There are two overloads of RooAbsCollection::addClone():. - RooAbsArg *addClone(const RooAbsArg& var, bool silent=false);. - void addClone(const RooAbsCollection& list, bool silent=false);. In the case of the RooAbsArg overload, we need to tell Python that it. doesn't own the returned pointer. That's because the function name. contains ""Clone"", which makes cppyy guess that the returned pointer. points to a clone owned by the caller. In the case of the. RooAbsCollection input, the return value will be `None` and we don't. need to change any ownership flags (in fact, calling. SetOwnership(None, False) would cause a crash). The check for the `None` return value was so far not done in the. pythonization and is added with this commit. A unit test was also added to check that the RooAbsCollection overloads. both work. This commit fixes the following Jira issue for good:. [ROOT-9580](https://sft.its.cern.ch/jira/browse/ROOT-9580).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10874
https://github.com/root-project/root/pull/10874:819,testability,test,test,819,"[RF] Correcly pythonize RooAbsCollection::addClone() for all overloads; There are two overloads of RooAbsCollection::addClone():. - RooAbsArg *addClone(const RooAbsArg& var, bool silent=false);. - void addClone(const RooAbsCollection& list, bool silent=false);. In the case of the RooAbsArg overload, we need to tell Python that it. doesn't own the returned pointer. That's because the function name. contains ""Clone"", which makes cppyy guess that the returned pointer. points to a clone owned by the caller. In the case of the. RooAbsCollection input, the return value will be `None` and we don't. need to change any ownership flags (in fact, calling. SetOwnership(None, False) would cause a crash). The check for the `None` return value was so far not done in the. pythonization and is added with this commit. A unit test was also added to check that the RooAbsCollection overloads. both work. This commit fixes the following Jira issue for good:. [ROOT-9580](https://sft.its.cern.ch/jira/browse/ROOT-9580).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10874
https://github.com/root-project/root/pull/10874:546,usability,input,input,546,"[RF] Correcly pythonize RooAbsCollection::addClone() for all overloads; There are two overloads of RooAbsCollection::addClone():. - RooAbsArg *addClone(const RooAbsArg& var, bool silent=false);. - void addClone(const RooAbsCollection& list, bool silent=false);. In the case of the RooAbsArg overload, we need to tell Python that it. doesn't own the returned pointer. That's because the function name. contains ""Clone"", which makes cppyy guess that the returned pointer. points to a clone owned by the caller. In the case of the. RooAbsCollection input, the return value will be `None` and we don't. need to change any ownership flags (in fact, calling. SetOwnership(None, False) would cause a crash). The check for the `None` return value was so far not done in the. pythonization and is added with this commit. A unit test was also added to check that the RooAbsCollection overloads. both work. This commit fixes the following Jira issue for good:. [ROOT-9580](https://sft.its.cern.ch/jira/browse/ROOT-9580).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10874
https://github.com/root-project/root/issues/10875:542,availability,error,error,542,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:707,availability,error,error,707,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:829,availability,error,error,829,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:995,availability,error,error,995,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1114,availability,error,error,1114,"sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1277,availability,error,error,1277,"reter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1396,availability,error,error,1396,"rosoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known iss",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1580,availability,error,error,1580,"';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1749,availability,error,error,1749,"roject\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1882,availability,error,error,1882,"ration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additiona",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1890,availability,Error,Error,1890,"pecifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional contex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2782,availability,Operat,Operating,2782,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:487,deployability,fail,fail,487,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:495,deployability,build,build,495,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2042,deployability,build,build,2042,"t\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twic",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2489,deployability,upgrad,upgrade,2489,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2512,deployability,depend,dependency,2512,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2568,deployability,Build,Build,2568,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2760,deployability,version,version,2760,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2942,deployability,build,build,2942,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:655,energy efficiency,core,core,655,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:776,energy efficiency,core,core,776,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:942,energy efficiency,core,core,942,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1064,energy efficiency,core,core,1064,"Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1227,energy efficiency,core,core,1227,"de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) s",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1346,energy efficiency,core,core,1346,"ved this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1529,energy efficiency,core,core,1529,"ty(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which w",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1698,energy efficiency,core,core,1698,"51,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't prov",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1845,energy efficiency,core,core,1845,"xpected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1896,energy efficiency,load,loading,1896,"rs [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1979,energy efficiency,core,core,1979,"lity(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std:",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2512,integrability,depend,dependency,2512,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2760,integrability,version,version,2760,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:605,interoperability,specif,specifiers,605,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:892,interoperability,specif,specifiers,892,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1177,interoperability,specif,specifiers,1177,"b.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supporte",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2189,modifiability,scenario,scenario,2189,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2489,modifiability,upgrad,upgrade,2489,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2512,modifiability,depend,dependency,2512,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2760,modifiability,version,version,2760,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:542,performance,error,error,542,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:707,performance,error,error,707,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:829,performance,error,error,829,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:995,performance,error,error,995,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1114,performance,error,error,1114,"sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1277,performance,error,error,1277,"reter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1396,performance,error,error,1396,"rosoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known iss",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1580,performance,error,error,1580,"';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1749,performance,error,error,1749,"roject\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1882,performance,error,error,1882,"ration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additiona",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1890,performance,Error,Error,1890,"pecifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional contex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1896,performance,load,loading,1896,"rs [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supp",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2734,performance,time,time,2734,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2948,performance,throughput,throughput,2948,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:487,reliability,fail,fail,487,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:542,safety,error,error,542,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:707,safety,error,error,707,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:829,safety,error,error,829,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:995,safety,error,error,995,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1114,safety,error,error,1114,"sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1277,safety,error,error,1277,"reter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1396,safety,error,error,1396,"rosoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known iss",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1580,safety,error,error,1580,"';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1749,safety,error,error,1749,"roject\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1882,safety,error,error,1882,"ration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additiona",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1890,safety,Error,Error,1890,"pecifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional contex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2512,safety,depend,dependency,2512,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2477,testability,plan,planning,2477,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2512,testability,depend,dependency,2512,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2887,testability,context,context,2887,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:542,usability,error,error,542,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:707,usability,error,error,707,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:829,usability,error,error,829,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:995,usability,error,error,995,"`_HAS_CONDITIONAL_EXPLICIT=0` won't work with VS 2022 17.4; - [x] Checked for duplicates. ### Describe the bug. ROOT sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1114,usability,error,error,1114,"sets `_HAS_CONDITIONAL_EXPLICIT=0` for MSVC's STL:. https://github.com/root-project/root/blob/2fc5e7a745ce898c80de820c624b4a4866756f74/interpreter/cling/lib/Interpreter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1277,usability,error,error,1277,"reter/CIFactory.cpp#L811-L816. MSVC's STL (which I work on) has removed this codepath by merging https://github.com/microsoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1396,usability,error,error,1396,"rosoft/STL/pull/2796, which will ship in VS 2022 17.4 Preview 1. As a result, ROOT will fail to build with:. ```. [trimmed...]\utility(151,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known iss",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1580,usability,error,error,1580,"';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(151,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1749,usability,error,error,1749,"roject\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1868,usability,CUSTOM,CUSTOMBUILD,1868,"after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ##",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1882,usability,error,error,1882,"ration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additiona",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:1890,usability,Error,Error,1890,"pecifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\utility(190,24): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional contex",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2020,usability,behavi,behavior,2020," [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2174,usability,support,supported,2174,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2364,usability,indicat,indicates,2364,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/issues/10875:2896,usability,Support,Supporting,2896,"268,9): error G08EB1F86: expected member name or ';' after declaration specifiers [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(268,9): error GC66A3811: expected ')' [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,5): error G28325FEB: non-static data member cannot be constexpr; did you intend to make it const? [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,24): error G68D9A705: member '_Tuple_conditional_explicit_v' declared as a template [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. [trimmed...]\tuple(302,79): error GC66A3811: expected ';' at end of declaration list [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. CUSTOMBUILD : error : Error loading the default rootcling header files. [F:\gitP\root-project\root\build_amd64\core\G__Core.vcxproj]. ```. ### Expected behavior. ROOT should build successfully, even when MSVC's STL uses Future Technology (i.e. C++20 `explicit(bool)` in C++14/17 modes). Upstream Clang has supported this scenario (with a suppressible warning) since Clang 10.0.0 shipped on 2020-03-24. Example on Compiler Explorer: https://godbolt.org/z/a75ooK6cz. The comment in `CIFactory.cpp` indicates that this was a known issue (although I was unable to find anything filed in GitHub or Jira) - is ROOT planning to upgrade its Clang/LLVM dependency, which would resolve this? ### To Reproduce. Build ROOT with the latest MSVC STL from https://github.com/microsoft/STL, or wait for VS 2022 17.4 Preview 1 to ship (we can't provide an ETA yet, but it'll be some time). ### Setup. 1. ROOT version: `master`. 2. Operating system: Windows 11. 3. How you obtained ROOT: Built it ourselves (or tried to). ### Additional context. Supporting `explicit(bool)` will also improve build throughput, as `std::pair`, `std::tuple`, and `std::optional`'s constructor sets were nearly twice the size with the `_HAS_CONDITIONAL_EXPLICIT=0` workaround.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10875
https://github.com/root-project/root/pull/10876:8,deployability,Updat,Update,8,[v6-26] Update the freetype library from 2.6.1 to 2.12.1; This fixes the graphics with the latest Visual Studio 2022 (17.2).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10876
https://github.com/root-project/root/pull/10876:8,safety,Updat,Update,8,[v6-26] Update the freetype library from 2.6.1 to 2.12.1; This fixes the graphics with the latest Visual Studio 2022 (17.2).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10876
https://github.com/root-project/root/pull/10876:8,security,Updat,Update,8,[v6-26] Update the freetype library from 2.6.1 to 2.12.1; This fixes the graphics with the latest Visual Studio 2022 (17.2).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10876
https://github.com/root-project/root/pull/10876:98,usability,Visual,Visual,98,[v6-26] Update the freetype library from 2.6.1 to 2.12.1; This fixes the graphics with the latest Visual Studio 2022 (17.2).,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10876
https://github.com/root-project/root/issues/10877:1973,availability,Operat,Operating,1973,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1371,deployability,releas,releases,1371,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1513,deployability,releas,releases,1513,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1727,deployability,Log,Login,1727,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1952,deployability,version,version,1952,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:2016,deployability,stack,stack,2016,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:866,energy efficiency,alloc,allocator,866,"ROOT 6.24/06, aarch64: SOFIE related symbol not found at startup; Could not find any duplicate. ### Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:997,energy efficiency,alloc,allocator,997,"OT 6.24/06, aarch64: SOFIE related symbol not found at startup; Could not find any duplicate. ### Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, ce",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1094,energy efficiency,alloc,allocator,1094,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1120,energy efficiency,alloc,allocator,1120,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1202,energy efficiency,alloc,allocator,1202,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1292,energy efficiency,load,load,1292,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1473,energy efficiency,load,load,1473,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:176,integrability,messag,message,176,"ROOT 6.24/06, aarch64: SOFIE related symbol not found at startup; Could not find any duplicate. ### Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:245,integrability,messag,message,245,"ROOT 6.24/06, aarch64: SOFIE related symbol not found at startup; Could not find any duplicate. ### Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1663,integrability,messag,message,1663,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1952,integrability,version,version,1952,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:176,interoperability,messag,message,176,"ROOT 6.24/06, aarch64: SOFIE related symbol not found at startup; Could not find any duplicate. ### Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:245,interoperability,messag,message,245,"ROOT 6.24/06, aarch64: SOFIE related symbol not found at startup; Could not find any duplicate. ### Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1315,interoperability,share,shared,1315,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1663,interoperability,messag,message,1663,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1952,modifiability,version,version,1952,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:205,performance,time,times,205,"ROOT 6.24/06, aarch64: SOFIE related symbol not found at startup; Could not find any duplicate. ### Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1292,performance,load,load,1292,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1473,performance,load,load,1473,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1727,safety,Log,Login,1727,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:930,security,hash,hash,930,"ROOT 6.24/06, aarch64: SOFIE related symbol not found at startup; Could not find any duplicate. ### Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1727,security,Log,Login,1727,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1727,testability,Log,Login,1727,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:2038,testability,context,context,2038,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1642,usability,behavi,behavior,1642,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/issues/10877:1713,usability,behavi,behavior,1713,"## Describe the bug. When starting ROOT on an arm64 machine a symbol-not-found message appears for about 10 times before getting to the prompt. The message is related to SOFIE:. ```. IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL22make_ROperator_ReshapeERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'! You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Reshape(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&). Maybe you need to load the corresponding shared library? Symbol found in '/cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'; did you mean to load it with '.L /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.26.04-22463/aarch64-centos7-gcc11-opt/lib/libROOTTMVASofieParser.so'? ```. ROOT 6.24/06 works fine. ### Expected behavior. No warning message. ### To Reproduce. Steps to reproduce the behavior:. 1. Login on an ARM amchine with cvmfs, e.g. techlab-arm64-thunderx2-01 . 2. Source dev4arm. `source /cvmfs/sft.cern.ch/lcg/views/dev4/Wed/aarch64-centos7-gcc11-opt/setup.sh`. 3. Start ROOT, e.g. `root -b -q`. ### Setup. 1. ROOT version: 6.26/04. 2. Operating system: aarch64, centos7. 3. LCG stack. ### Additional context. Affecting ATLAS (first noticed by Asoka Da Silva).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10877
https://github.com/root-project/root/pull/10880:40,deployability,fail,fails,40,[tmva] add missing include; Compilation fails with `-Ddev=ON`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10880
https://github.com/root-project/root/pull/10880:40,reliability,fail,fails,40,[tmva] add missing include; Compilation fails with `-Ddev=ON`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10880
https://github.com/root-project/root/pull/10881:61,safety,Prevent,Prevent,61,Protect TGraph::Fit against nullptr in strstr function call; Prevent from crash when calling `gr->Fit(nullptr)`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10881
https://github.com/root-project/root/pull/10881:61,security,Preven,Prevent,61,Protect TGraph::Fit against nullptr in strstr function call; Prevent from crash when calling `gr->Fit(nullptr)`,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10881
https://github.com/root-project/root/pull/10882:139,availability,failur,failure,139,"[tree] protect `strstr`, `strchr`, `strlen` from nullptr argument; In methods like `FindBranch` or `GetBranch` nullptr as argument causing failure. Avoid casting to `(char *)`. Use `nullptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10882
https://github.com/root-project/root/pull/10882:139,deployability,fail,failure,139,"[tree] protect `strstr`, `strchr`, `strlen` from nullptr argument; In methods like `FindBranch` or `GetBranch` nullptr as argument causing failure. Avoid casting to `(char *)`. Use `nullptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10882
https://github.com/root-project/root/pull/10882:139,performance,failur,failure,139,"[tree] protect `strstr`, `strchr`, `strlen` from nullptr argument; In methods like `FindBranch` or `GetBranch` nullptr as argument causing failure. Avoid casting to `(char *)`. Use `nullptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10882
https://github.com/root-project/root/pull/10882:139,reliability,fail,failure,139,"[tree] protect `strstr`, `strchr`, `strlen` from nullptr argument; In methods like `FindBranch` or `GetBranch` nullptr as argument causing failure. Avoid casting to `(char *)`. Use `nullptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10882
https://github.com/root-project/root/pull/10882:148,safety,Avoid,Avoid,148,"[tree] protect `strstr`, `strchr`, `strlen` from nullptr argument; In methods like `FindBranch` or `GetBranch` nullptr as argument causing failure. Avoid casting to `(char *)`. Use `nullptr`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10882
https://github.com/root-project/root/pull/10883:366,deployability,updat,updated,366,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:12,energy efficiency,Reduc,Reducing,12,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:78,energy efficiency,Reduc,Reduces,78,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:28,modifiability,variab,variable,28,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:93,modifiability,variab,variable,93,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:222,modifiability,variab,variables,222,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:286,modifiability,variab,variables,286,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:336,safety,test,tested,336,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:366,safety,updat,updated,366,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:366,security,updat,updated,366,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10883:336,testability,test,tested,336,"[cling-cpt] Reducing global variable mutaiton [skip-ci]; # This Pull request: Reduces global variable mutation, and is now easier to debug. ## Changes or fixes: Created a new Cpt class, moved all functions that use global variables to this class, and then made all the globals instance variables of the Cpt class. ## Checklist:. - [NA] tested changes locally. - [X] updated the docs (if necessary). This PR fixes issue mentioned in the meta-issue list #406 (https://github.com/root-project/cling/issues/406).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10883
https://github.com/root-project/root/pull/10884:706,energy efficiency,Measur,Measurement,706,"[RF] Improve RooStats::HistFactory::PreprocessFunction class; Some improvements are made to the `PreprocessFunction` class:. * add `const` to all the relevant member functions. * remove the `fCommand` member, because it can be inferred from the. other 3 members and it should not be set independently. * use `std::string` by const-reference when possible. * follow the RooFit coding style of using lower-case vor function. argument names. Furthermore, a bugfix is also done:. * in `PreprocessFunction::PrintXML`, replace the XML special. characters which almost always appear in any formula with the XML. escape codes. The bugfix addresses a problem where it was not possible to read an XML. generated by `Measurement::PrintXML` because the special characters in. the formula expression were not properly escaped. With all these changes applied, the source files for this class changed. almost completely, and this opportunity was taken to reformat the code. with the ROOT `clang-format` style. Closes #10840.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10884
https://github.com/root-project/root/pull/10884:525,interoperability,XML,XML,525,"[RF] Improve RooStats::HistFactory::PreprocessFunction class; Some improvements are made to the `PreprocessFunction` class:. * add `const` to all the relevant member functions. * remove the `fCommand` member, because it can be inferred from the. other 3 members and it should not be set independently. * use `std::string` by const-reference when possible. * follow the RooFit coding style of using lower-case vor function. argument names. Furthermore, a bugfix is also done:. * in `PreprocessFunction::PrintXML`, replace the XML special. characters which almost always appear in any formula with the XML. escape codes. The bugfix addresses a problem where it was not possible to read an XML. generated by `Measurement::PrintXML` because the special characters in. the formula expression were not properly escaped. With all these changes applied, the source files for this class changed. almost completely, and this opportunity was taken to reformat the code. with the ROOT `clang-format` style. Closes #10840.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10884
https://github.com/root-project/root/pull/10884:600,interoperability,XML,XML,600,"[RF] Improve RooStats::HistFactory::PreprocessFunction class; Some improvements are made to the `PreprocessFunction` class:. * add `const` to all the relevant member functions. * remove the `fCommand` member, because it can be inferred from the. other 3 members and it should not be set independently. * use `std::string` by const-reference when possible. * follow the RooFit coding style of using lower-case vor function. argument names. Furthermore, a bugfix is also done:. * in `PreprocessFunction::PrintXML`, replace the XML special. characters which almost always appear in any formula with the XML. escape codes. The bugfix addresses a problem where it was not possible to read an XML. generated by `Measurement::PrintXML` because the special characters in. the formula expression were not properly escaped. With all these changes applied, the source files for this class changed. almost completely, and this opportunity was taken to reformat the code. with the ROOT `clang-format` style. Closes #10840.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10884
https://github.com/root-project/root/pull/10884:687,interoperability,XML,XML,687,"[RF] Improve RooStats::HistFactory::PreprocessFunction class; Some improvements are made to the `PreprocessFunction` class:. * add `const` to all the relevant member functions. * remove the `fCommand` member, because it can be inferred from the. other 3 members and it should not be set independently. * use `std::string` by const-reference when possible. * follow the RooFit coding style of using lower-case vor function. argument names. Furthermore, a bugfix is also done:. * in `PreprocessFunction::PrintXML`, replace the XML special. characters which almost always appear in any formula with the XML. escape codes. The bugfix addresses a problem where it was not possible to read an XML. generated by `Measurement::PrintXML` because the special characters in. the formula expression were not properly escaped. With all these changes applied, the source files for this class changed. almost completely, and this opportunity was taken to reformat the code. with the ROOT `clang-format` style. Closes #10840.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10884
https://github.com/root-project/root/pull/10884:980,interoperability,format,format,980,"[RF] Improve RooStats::HistFactory::PreprocessFunction class; Some improvements are made to the `PreprocessFunction` class:. * add `const` to all the relevant member functions. * remove the `fCommand` member, because it can be inferred from the. other 3 members and it should not be set independently. * use `std::string` by const-reference when possible. * follow the RooFit coding style of using lower-case vor function. argument names. Furthermore, a bugfix is also done:. * in `PreprocessFunction::PrintXML`, replace the XML special. characters which almost always appear in any formula with the XML. escape codes. The bugfix addresses a problem where it was not possible to read an XML. generated by `Measurement::PrintXML` because the special characters in. the formula expression were not properly escaped. With all these changes applied, the source files for this class changed. almost completely, and this opportunity was taken to reformat the code. with the ROOT `clang-format` style. Closes #10840.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10884
https://github.com/root-project/root/pull/10884:894,safety,compl,completely,894,"[RF] Improve RooStats::HistFactory::PreprocessFunction class; Some improvements are made to the `PreprocessFunction` class:. * add `const` to all the relevant member functions. * remove the `fCommand` member, because it can be inferred from the. other 3 members and it should not be set independently. * use `std::string` by const-reference when possible. * follow the RooFit coding style of using lower-case vor function. argument names. Furthermore, a bugfix is also done:. * in `PreprocessFunction::PrintXML`, replace the XML special. characters which almost always appear in any formula with the XML. escape codes. The bugfix addresses a problem where it was not possible to read an XML. generated by `Measurement::PrintXML` because the special characters in. the formula expression were not properly escaped. With all these changes applied, the source files for this class changed. almost completely, and this opportunity was taken to reformat the code. with the ROOT `clang-format` style. Closes #10840.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10884
https://github.com/root-project/root/pull/10884:894,security,compl,completely,894,"[RF] Improve RooStats::HistFactory::PreprocessFunction class; Some improvements are made to the `PreprocessFunction` class:. * add `const` to all the relevant member functions. * remove the `fCommand` member, because it can be inferred from the. other 3 members and it should not be set independently. * use `std::string` by const-reference when possible. * follow the RooFit coding style of using lower-case vor function. argument names. Furthermore, a bugfix is also done:. * in `PreprocessFunction::PrintXML`, replace the XML special. characters which almost always appear in any formula with the XML. escape codes. The bugfix addresses a problem where it was not possible to read an XML. generated by `Measurement::PrintXML` because the special characters in. the formula expression were not properly escaped. With all these changes applied, the source files for this class changed. almost completely, and this opportunity was taken to reformat the code. with the ROOT `clang-format` style. Closes #10840.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10884
https://github.com/root-project/root/pull/10884:995,usability,Close,Closes,995,"[RF] Improve RooStats::HistFactory::PreprocessFunction class; Some improvements are made to the `PreprocessFunction` class:. * add `const` to all the relevant member functions. * remove the `fCommand` member, because it can be inferred from the. other 3 members and it should not be set independently. * use `std::string` by const-reference when possible. * follow the RooFit coding style of using lower-case vor function. argument names. Furthermore, a bugfix is also done:. * in `PreprocessFunction::PrintXML`, replace the XML special. characters which almost always appear in any formula with the XML. escape codes. The bugfix addresses a problem where it was not possible to read an XML. generated by `Measurement::PrintXML` because the special characters in. the formula expression were not properly escaped. With all these changes applied, the source files for this class changed. almost completely, and this opportunity was taken to reformat the code. with the ROOT `clang-format` style. Closes #10840.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10884
https://github.com/root-project/root/pull/10885:20,interoperability,prox,proxy,20,"[RF] Correctly sync proxy normalization sets in `RooAddPdf::getValV()`; When getValV() was directly implemented in RooAddPdf, it was missed to. copy-paste the part from RooAbsPdf::getValV() where the normalization. sets for the proxies was synced. A unit test with the reproducer for an issue caused by missing the. syncing is also introduced with this commit, involving the SPlot from. RooStats. Closes #10869.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10885
https://github.com/root-project/root/pull/10885:228,interoperability,prox,proxies,228,"[RF] Correctly sync proxy normalization sets in `RooAddPdf::getValV()`; When getValV() was directly implemented in RooAddPdf, it was missed to. copy-paste the part from RooAbsPdf::getValV() where the normalization. sets for the proxies was synced. A unit test with the reproducer for an issue caused by missing the. syncing is also introduced with this commit, involving the SPlot from. RooStats. Closes #10869.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10885
https://github.com/root-project/root/pull/10885:255,safety,test,test,255,"[RF] Correctly sync proxy normalization sets in `RooAddPdf::getValV()`; When getValV() was directly implemented in RooAddPdf, it was missed to. copy-paste the part from RooAbsPdf::getValV() where the normalization. sets for the proxies was synced. A unit test with the reproducer for an issue caused by missing the. syncing is also introduced with this commit, involving the SPlot from. RooStats. Closes #10869.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10885
https://github.com/root-project/root/pull/10885:250,testability,unit,unit,250,"[RF] Correctly sync proxy normalization sets in `RooAddPdf::getValV()`; When getValV() was directly implemented in RooAddPdf, it was missed to. copy-paste the part from RooAbsPdf::getValV() where the normalization. sets for the proxies was synced. A unit test with the reproducer for an issue caused by missing the. syncing is also introduced with this commit, involving the SPlot from. RooStats. Closes #10869.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10885
https://github.com/root-project/root/pull/10885:255,testability,test,test,255,"[RF] Correctly sync proxy normalization sets in `RooAddPdf::getValV()`; When getValV() was directly implemented in RooAddPdf, it was missed to. copy-paste the part from RooAbsPdf::getValV() where the normalization. sets for the proxies was synced. A unit test with the reproducer for an issue caused by missing the. syncing is also introduced with this commit, involving the SPlot from. RooStats. Closes #10869.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10885
https://github.com/root-project/root/pull/10885:397,usability,Close,Closes,397,"[RF] Correctly sync proxy normalization sets in `RooAddPdf::getValV()`; When getValV() was directly implemented in RooAddPdf, it was missed to. copy-paste the part from RooAbsPdf::getValV() where the normalization. sets for the proxies was synced. A unit test with the reproducer for an issue caused by missing the. syncing is also introduced with this commit, involving the SPlot from. RooStats. Closes #10869.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10885
https://github.com/root-project/root/pull/10886:126,availability,failur,failures,126,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:126,deployability,fail,failures,126,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:185,deployability,FAIL,FAILED,185,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:453,deployability,updat,updated,453,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:224,energy efficiency,Optim,Optimization-Cpu,224,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:14,performance,time,timeout,14,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:64,performance,time,timeouts,64,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:118,performance,time,timeout,118,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:126,performance,failur,failures,126,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:224,performance,Optimiz,Optimization-Cpu,224,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:242,performance,Time,Timeout,242,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:289,performance,Time,Timeout,289,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:308,performance,time,timeout,308,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:126,reliability,fail,failures,126,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:185,reliability,FAIL,FAILED,185,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:9,safety,test,test,9,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:14,safety,timeout,timeout,14,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:59,safety,test,test,59,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:64,safety,timeout,timeouts,64,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:113,safety,test,test,113,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:118,safety,timeout,timeout,118,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:179,safety,test,tests,179,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:242,safety,Timeout,Timeout,242,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:289,safety,Timeout,Timeout,289,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:308,safety,timeout,timeout,308,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:362,safety,test,tests,362,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:423,safety,test,tested,423,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:453,safety,updat,updated,453,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:453,security,updat,updated,453,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:9,testability,test,test,9,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:59,testability,test,test,59,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:113,testability,test,test,113,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:179,testability,test,tests,179,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:362,testability,test,tests,362,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10886:423,testability,test,tested,423,"Increase test timeout; # This Pull request:. Increase some test timeouts. ## Changes or fixes:. Fixes occasional test timeout failures. Mostly seen on aarch64. ```. The following tests FAILED:. 	330 - TMVA-DNN-MethodDL-Adam-Optimization-Cpu (Timeout). 	967 - tutorial-tmva-TMVAMulticlass (Timeout). ```. The timeout has been seen for various tutorial-tmva-TMVA* tests, not just the one mentions above. ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10886
https://github.com/root-project/root/pull/10888:170,modifiability,maintain,maintained,170,[skip-ci] Add a warning on the User's Guide.; As requested here:. https://github.com/root-project/root/issues/10722. The user's has now a warning notice saying it is not maintained anymore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10888
https://github.com/root-project/root/pull/10888:170,safety,maintain,maintained,170,[skip-ci] Add a warning on the User's Guide.; As requested here:. https://github.com/root-project/root/issues/10722. The user's has now a warning notice saying it is not maintained anymore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10888
https://github.com/root-project/root/pull/10888:31,usability,User,User,31,[skip-ci] Add a warning on the User's Guide.; As requested here:. https://github.com/root-project/root/issues/10722. The user's has now a warning notice saying it is not maintained anymore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10888
https://github.com/root-project/root/pull/10888:38,usability,Guid,Guide,38,[skip-ci] Add a warning on the User's Guide.; As requested here:. https://github.com/root-project/root/issues/10722. The user's has now a warning notice saying it is not maintained anymore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10888
https://github.com/root-project/root/pull/10888:121,usability,user,user,121,[skip-ci] Add a warning on the User's Guide.; As requested here:. https://github.com/root-project/root/issues/10722. The user's has now a warning notice saying it is not maintained anymore.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10888
https://github.com/root-project/root/pull/10889:34,availability,cluster,cluster,34,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:119,availability,cluster,cluster,119,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:284,availability,cluster,clusters,284,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:586,availability,cluster,clusters,586,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:34,deployability,cluster,cluster,34,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:119,deployability,cluster,cluster,119,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:284,deployability,cluster,clusters,284,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:586,deployability,cluster,clusters,586,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:761,deployability,updat,updated,761,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:303,energy efficiency,current,current,303,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:21,integrability,configur,configurable,21,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:261,integrability,configur,configurable,261,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:552,integrability,configur,configurable,552,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:21,modifiability,configur,configurable,21,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:261,modifiability,configur,configurable,261,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:552,modifiability,configur,configurable,552,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:645,performance,parallel,parallels,645,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:146,reliability,doe,does,146,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:731,safety,test,tested,731,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:761,safety,updat,updated,761,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:21,security,configur,configurable,21,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:261,security,configur,configurable,261,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:552,security,configur,configurable,552,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:761,security,updat,updated,761,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/pull/10889:731,testability,test,tested,731,"[ntuple,daos] Enable configurable cluster prefetching; This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally. - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10889
https://github.com/root-project/root/issues/10891:945,deployability,manag,manage,945,"[RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; Different from C++, any objects created in Python are not deleted in the inverse order of their creation. This causes crashes in some RooFit user code, for examples when some object has only a non-owing reference/pointer as a data member, this data member is used in the constructor, and then the referenced object is destructed first. Hence, the user is sometimes forced to use `del` explicitly in Python, for example in these tutorials:. * `rf207_comptools.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf207_comptools.py#L116. * `rf514_RooCustomizer.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf514_RooCustomizer.py#L95. * `rs101_limitexample.py`: https://github.com/root-project/root/blob/master/tutorials/roostats/rs101_limitexample.py#L184. The RooFit/RooStats code needs some Pythonizations that manage ownership such that the deletion order doesn't matter anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10891
https://github.com/root-project/root/issues/10891:945,energy efficiency,manag,manage,945,"[RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; Different from C++, any objects created in Python are not deleted in the inverse order of their creation. This causes crashes in some RooFit user code, for examples when some object has only a non-owing reference/pointer as a data member, this data member is used in the constructor, and then the referenced object is destructed first. Hence, the user is sometimes forced to use `del` explicitly in Python, for example in these tutorials:. * `rf207_comptools.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf207_comptools.py#L116. * `rf514_RooCustomizer.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf514_RooCustomizer.py#L95. * `rs101_limitexample.py`: https://github.com/root-project/root/blob/master/tutorials/roostats/rs101_limitexample.py#L184. The RooFit/RooStats code needs some Pythonizations that manage ownership such that the deletion order doesn't matter anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10891
https://github.com/root-project/root/issues/10891:991,reliability,doe,doesn,991,"[RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; Different from C++, any objects created in Python are not deleted in the inverse order of their creation. This causes crashes in some RooFit user code, for examples when some object has only a non-owing reference/pointer as a data member, this data member is used in the constructor, and then the referenced object is destructed first. Hence, the user is sometimes forced to use `del` explicitly in Python, for example in these tutorials:. * `rf207_comptools.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf207_comptools.py#L116. * `rf514_RooCustomizer.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf514_RooCustomizer.py#L95. * `rs101_limitexample.py`: https://github.com/root-project/root/blob/master/tutorials/roostats/rs101_limitexample.py#L184. The RooFit/RooStats code needs some Pythonizations that manage ownership such that the deletion order doesn't matter anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10891
https://github.com/root-project/root/issues/10891:945,safety,manag,manage,945,"[RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; Different from C++, any objects created in Python are not deleted in the inverse order of their creation. This causes crashes in some RooFit user code, for examples when some object has only a non-owing reference/pointer as a data member, this data member is used in the constructor, and then the referenced object is destructed first. Hence, the user is sometimes forced to use `del` explicitly in Python, for example in these tutorials:. * `rf207_comptools.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf207_comptools.py#L116. * `rf514_RooCustomizer.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf514_RooCustomizer.py#L95. * `rs101_limitexample.py`: https://github.com/root-project/root/blob/master/tutorials/roostats/rs101_limitexample.py#L184. The RooFit/RooStats code needs some Pythonizations that manage ownership such that the deletion order doesn't matter anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10891
https://github.com/root-project/root/issues/10891:230,usability,user,user,230,"[RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; Different from C++, any objects created in Python are not deleted in the inverse order of their creation. This causes crashes in some RooFit user code, for examples when some object has only a non-owing reference/pointer as a data member, this data member is used in the constructor, and then the referenced object is destructed first. Hence, the user is sometimes forced to use `del` explicitly in Python, for example in these tutorials:. * `rf207_comptools.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf207_comptools.py#L116. * `rf514_RooCustomizer.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf514_RooCustomizer.py#L95. * `rs101_limitexample.py`: https://github.com/root-project/root/blob/master/tutorials/roostats/rs101_limitexample.py#L184. The RooFit/RooStats code needs some Pythonizations that manage ownership such that the deletion order doesn't matter anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10891
https://github.com/root-project/root/issues/10891:436,usability,user,user,436,"[RF] Deletion order of objects in RooFit/RooStats tutorials should not matter in Python; Different from C++, any objects created in Python are not deleted in the inverse order of their creation. This causes crashes in some RooFit user code, for examples when some object has only a non-owing reference/pointer as a data member, this data member is used in the constructor, and then the referenced object is destructed first. Hence, the user is sometimes forced to use `del` explicitly in Python, for example in these tutorials:. * `rf207_comptools.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf207_comptools.py#L116. * `rf514_RooCustomizer.py`: https://github.com/root-project/root/blob/master/tutorials/roofit/rf514_RooCustomizer.py#L95. * `rs101_limitexample.py`: https://github.com/root-project/root/blob/master/tutorials/roostats/rs101_limitexample.py#L184. The RooFit/RooStats code needs some Pythonizations that manage ownership such that the deletion order doesn't matter anymore.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10891
https://github.com/root-project/root/pull/10892:90,availability,failur,failures,90,[TO REVERT] Add debug prints to dataframe_snapshot; In order to debug not understood test failures that we could. not reproduce outside of the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10892
https://github.com/root-project/root/pull/10892:90,deployability,fail,failures,90,[TO REVERT] Add debug prints to dataframe_snapshot; In order to debug not understood test failures that we could. not reproduce outside of the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10892
https://github.com/root-project/root/pull/10892:90,performance,failur,failures,90,[TO REVERT] Add debug prints to dataframe_snapshot; In order to debug not understood test failures that we could. not reproduce outside of the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10892
https://github.com/root-project/root/pull/10892:90,reliability,fail,failures,90,[TO REVERT] Add debug prints to dataframe_snapshot; In order to debug not understood test failures that we could. not reproduce outside of the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10892
https://github.com/root-project/root/pull/10892:85,safety,test,test,85,[TO REVERT] Add debug prints to dataframe_snapshot; In order to debug not understood test failures that we could. not reproduce outside of the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10892
https://github.com/root-project/root/pull/10892:85,testability,test,test,85,[TO REVERT] Add debug prints to dataframe_snapshot; In order to debug not understood test failures that we could. not reproduce outside of the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10892
https://github.com/root-project/root/pull/10893:5,deployability,Updat,Update,5,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:19,deployability,version,version,19,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:96,deployability,version,version,96,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:336,deployability,version,version,336,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:505,deployability,version,version,505,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:19,integrability,version,version,19,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:96,integrability,version,version,96,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:336,integrability,version,version,336,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:505,integrability,version,version,505,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:473,interoperability,format,formatted,473,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:19,modifiability,version,version,19,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:96,modifiability,version,version,96,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:336,modifiability,version,version,336,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:505,modifiability,version,version,505,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:5,safety,Updat,Update,5,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:5,security,Updat,Update,5,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:144,testability,simpl,simplify,144,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:144,usability,simpl,simplify,144,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/pull/10893:515,usability,Close,Closes,515,"[RF] Update Python version of rf408_RDataFrameToRooFit tutorial; In db1a2ceb40 (#9352), the C++ version of the rf408 tutorial was. improved:. * simplify code. * remove race condition. * fix typos. In this commit, the same changes are also applied to the corresponding. Python tutorial. Furthermore, two problems exclusive to the Python version were fixed:. * Replace second `RooDataSetHelper` with `RooDataHistHelper`. * Fix line breaks in data printing (now the output is formatted just. like in the C++ version). Closes #9360.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10893
https://github.com/root-project/root/issues/10895:155,availability,error,errors,155,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:201,availability,error,error,201,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:209,availability,error,error,209,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:1156,availability,error,error,1156,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:155,performance,error,errors,155,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:201,performance,error,error,201,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:209,performance,error,error,209,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:1156,performance,error,error,1156,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:140,reliability,doe,does,140,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:76,safety,test,test,76,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:155,safety,error,errors,155,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:201,safety,error,error,201,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:209,safety,error,error,209,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:231,safety,test,test,231,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:377,safety,test,test,377,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:399,safety,test,test,399,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:466,safety,test,test,466,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:1156,safety,error,error,1156,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:631,security,Team,Team,631,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:76,testability,test,test,76,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:231,testability,test,test,231,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:377,testability,test,test,377,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:399,testability,test,test,399,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:466,testability,test,test,466,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:985,testability,context,context,985,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:155,usability,error,errors,155,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:201,usability,error,error,201,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:209,usability,error,error,209,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:294,usability,behavi,behavior,294,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:836,usability,help,help,836,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:1156,usability,error,error,1156,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/issues/10895:1323,usability,experien,experience,1323,"[cling] void macro should not return value; ### Describe the bug. ```. void test() { return 1; }. ```. Interpreting this snippet with cling does not raise errors. Compiling with AcLiC .C+ generates an error.` error: void function 'test' should not return a value [-Wreturn-type]`. ### Expected behavior. Interpreting should at least raise a warning? ### To Reproduce. `root -l test.C`. vs. `root -l test.C+`. or copy-paste the function in the ROOT terminal and call test(). ### Setup. ```. ------------------------------------------------------------------. | Welcome to ROOT 6.27/01 https://root.cern |. | (c) 1995-2022, The ROOT Team; conception: R. Brun, F. Rademakers |. | Built for linuxx8664gcc on Apr 25 2022, 22:21:18 |. | From heads/master@v6-25-01-3897-gf39eb0e984 |. | With c++ (Ubuntu 8.4.0-1ubuntu1~18.04) 8.4.0 |. | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |. ------------------------------------------------------------------. ```. ### Additional context. Since I always teach my students to use ""root -l myscript.c+"", @Axel-Naumann asked me once for one example where compiling the code gave me more useful info when error appears than just interpreting, in order to find your own silly bugs when you write code. At that moment, I couldn't find a good example, it was more about past experience I had in the back of the mind, but this could be one (not specially relevant) case ;). (Maybe it's not exactly about cling, but rather to the fact that the compilation enables more warning flags than the 'interpret', thus making it easier to you to find your issues in the code).",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10895
https://github.com/root-project/root/pull/10896:192,deployability,modul,modular,192,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:965,deployability,updat,updated,965,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:15,integrability,Filter,Filter,15,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:192,integrability,modular,modular,192,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:254,integrability,Filter,Filter,254,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:284,integrability,Filter,Filter,284,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:134,modifiability,reu,reused,134,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:192,modifiability,modul,modular,192,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:192,safety,modul,modular,192,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:588,safety,test,test,588,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:815,safety,test,test,815,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:935,safety,test,tested,935,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:965,safety,updat,updated,965,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:81,security,sign,signature,81,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:965,security,updat,updated,965,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:192,testability,modula,modular,192,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:588,testability,test,test,588,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:815,testability,test,test,815,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/pull/10896:935,testability,test,tested,935,"Pythonized RDF Filter; Created a new class in _function_utils to obtain function signature and jit the function. This will be further reused for Defines, which can may make _numbadeclare more modular. # This Pull request:. ## Changes or fixes:. 1. Added Filter pythonizations to RDF. Filter now directly works with python functions. 2. Resolved comments: 1,2 on repeated imports. 3. Resolved comment: 3 on lazy imports. 4. Resolved comment: 4 on comments. 5. Resolved comment: 5 on using a single pythonizer. 6. Resolving comment: 7 on using multiple commits. Future commits will include test cases, Defines, and Tutorial changes. 7. Resolved comment: 8 added docs for internal functions. 8. Resolving comment: 9 on Pydefine. NOt implemented in this branch. 9. The remaining comments are on the organisation of the test cases and tutorials which will be done in the different branches and will be addressed there. ## Checklist:. - [ ] tested changes locally. - [ ] updated the docs (if necessary). This PR fixes # .",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/pull/10896
https://github.com/root-project/root/issues/10898:1155,availability,operat,operator,1155,"``. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fffee41cf98 in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:4991,availability,failur,failures,4991,"dule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . actionResult=@0x7fffffff993c: cling::MetaSema::AR_Success). ```. This leaves `TClingCallFunc::fWrapper` point to invalid memory and causes test failures at least in `roottest-root-meta-callfunc-assertUnload-auto`. I have disabled the deletion of the code segments, but that's just a temporary hack to make progress. We need a callback from the unloading to inform all `TClingCallFunc`s that use unloaded sections (including an update of `gWrapperStore` and friends), such that they can re-emit/-JIT the code if their `Decl` has not been unloaded. This serves as a marker to re-enable the deletion of the Sections, by enabling the `#if 0`'ed code around `interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:189` (in `IncrementalJIT::removeModule(const Transaction& T)`), as introduced by the llvm 13 upgrade.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:32,deployability,unload,unloading,32,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:52,deployability,upgrad,upgrade,52,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:83,deployability,Resourc,ResourceTracker,83,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:146,deployability,unload,unloading,146,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:185,deployability,releas,releaseMappedMemory,185,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:228,deployability,build,build,228,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:379,deployability,releas,releaseMappedMemory,379,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:499,deployability,build,build,499,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:738,deployability,build,build,738,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:977,deployability,build,build,977,"TClingCallFunc needs to support unloading; With the upgrade to llvm13, `llvm::orc::ResourceTracker` takes care of deleting the code sections upon unloading:. ```. #0 llvm::sys::Memory::releaseMappedMemory (M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/Support/Unix/Memory.inc:162. #1 0x00007fffee4988ab in llvm::(anonymous namespace)::DefaultMMapper::releaseMappedMemory (. this=0x7ffff6a3c620 <llvm::(anonymous namespace)::DefaultMMapperInstance>, M=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:263. #2 0x00007fffee498701 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:237. #3 0x00007fffee4987a0 in llvm::SectionMemoryManager::~SectionMemoryManager (this=0x5555588b0570, . __in_chrg=<optimized out>). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/SectionMemoryManager.cpp:239. #4 0x00007fffee41a1b4 in std::default_delete<llvm::RuntimeDyld::MemoryManager>::operator() (this=0x5555587feb70, . __ptr=0x5555588b0570) at /usr/include/c++/11/bits/unique_ptr.h:85. #5 0x00007fffee418420 in std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >::~unique_ptr (this=0x5555587feb70, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/unique_ptr.h:361. #6 0x00007fffee41f27f in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__pointer=0x5555587feb70) at /usr/include/c++/11/bits/stl_construct.h:151. #7 0x00007fffee41e671 in std::_Destroy_aux<false>::__destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:163. #8 0x00007fff",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:3100,deployability,build,build,3100,"untimeDyld::MemoryManager> >*> (__first=0x5555587feb70, __last=0x5555587feb78). at /usr/include/c++/11/bits/stl_construct.h:196. #9 0x00007fffee41ae3b in std::_Destroy<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >*, std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__first=0x5555587feb70, __last=0x5555587feb78) at /usr/include/c++/11/bits/alloc_traits.h:848. #10 0x00007fffee4192ad in std::vector<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >, std::allocator<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > >::~vector (this=0x7fffffff9280, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/stl_vector.h:680. #11 0x00007fffee4162c1 in llvm::orc::RTDyldObjectLinkingLayer::handleRemoveResources (this=0x55555587cd40, . K=93825045309680). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp:336. #12 0x00007fffee378503 in llvm::orc::ExecutionSession::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:3328,deployability,build,build,3328,"lt_delete<llvm::RuntimeDyld::MemoryManager> >*, std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > (__first=0x5555587feb70, __last=0x5555587feb78) at /usr/include/c++/11/bits/alloc_traits.h:848. #10 0x00007fffee4192ad in std::vector<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >, std::allocator<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > >::~vector (this=0x7fffffff9280, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/stl_vector.h:680. #11 0x00007fffee4162c1 in llvm::orc::RTDyldObjectLinkingLayer::handleRemoveResources (this=0x55555587cd40, . K=93825045309680). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp:336. #12 0x00007fffee378503 in llvm::orc::ExecutionSession::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/in",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:3452,deployability,Resourc,ResourceTracker,3452,"meDyld::MemoryManager> > > (__first=0x5555587feb70, __last=0x5555587feb78) at /usr/include/c++/11/bits/alloc_traits.h:848. #10 0x00007fffee4192ad in std::vector<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >, std::allocator<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > >::~vector (this=0x7fffffff9280, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/stl_vector.h:680. #11 0x00007fffee4162c1 in llvm::orc::RTDyldObjectLinkingLayer::handleRemoveResources (this=0x55555587cd40, . K=93825045309680). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp:336. #12 0x00007fffee378503 in llvm::orc::ExecutionSession::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, ",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:3513,deployability,build,build,3513,"st=0x5555587feb78) at /usr/include/c++/11/bits/alloc_traits.h:848. #10 0x00007fffee4192ad in std::vector<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> >, std::allocator<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > >::~vector (this=0x7fffffff9280, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/stl_vector.h:680. #11 0x00007fffee4162c1 in llvm::orc::RTDyldObjectLinkingLayer::handleRemoveResources (this=0x55555587cd40, . K=93825045309680). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp:336. #12 0x00007fffee378503 in llvm::orc::ExecutionSession::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmup",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:3704,deployability,build,build,3704,"d::MemoryManager> >, std::allocator<std::unique_ptr<llvm::RuntimeDyld::MemoryManager, std::default_delete<llvm::RuntimeDyld::MemoryManager> > > >::~vector (this=0x7fffffff9280, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/stl_vector.h:680. #11 0x00007fffee4162c1 in llvm::orc::RTDyldObjectLinkingLayer::handleRemoveResources (this=0x55555587cd40, . K=93825045309680). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp:336. #12 0x00007fffee378503 in llvm::orc::ExecutionSession::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrad",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:3843,deployability,unload,unloadModule,3843,"> >::~vector (this=0x7fffffff9280, __in_chrg=<optimized out>). at /usr/include/c++/11/bits/stl_vector.h:680. #11 0x00007fffee4162c1 in llvm::orc::RTDyldObjectLinkingLayer::handleRemoveResources (this=0x55555587cd40, . K=93825045309680). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp:336. #12 0x00007fffee378503 in llvm::orc::ExecutionSession::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . ac",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:3900,deployability,build,build,3900,"d out>). at /usr/include/c++/11/bits/stl_vector.h:680. #11 0x00007fffee4162c1 in llvm::orc::RTDyldObjectLinkingLayer::handleRemoveResources (this=0x55555587cd40, . K=93825045309680). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp:336. #12 0x00007fffee378503 in llvm::orc::ExecutionSession::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . actionResult=@0x7fffffff993c: cling::MetaSema::AR_Succes",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:4115,deployability,build,build,4115,"rade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/RTDyldObjectLinkingLayer.cpp:336. #12 0x00007fffee378503 in llvm::orc::ExecutionSession::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . actionResult=@0x7fffffff993c: cling::MetaSema::AR_Success). ```. This leaves `TClingCallFunc::fWrapper` point to invalid memory and causes test failures at least in `roottest-root-meta-callfunc-assertUnload-auto`. I have disabled the deletion of the code segments, but th",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:4251,deployability,unload,unload,4251,"ssion::removeResourceTracker (this=0x555555cc9bb0, RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . actionResult=@0x7fffffff993c: cling::MetaSema::AR_Success). ```. This leaves `TClingCallFunc::fWrapper` point to invalid memory and causes test failures at least in `roottest-root-meta-callfunc-assertUnload-auto`. I have disabled the deletion of the code segments, but that's just a temporary hack to make progress. We need a callback from the unloading to inform all `TClingCallFunc`s that use unloaded sec",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:4302,deployability,build,build,4302,"RT=...). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:2162. #13 0x00007fffee36932a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . actionResult=@0x7fffffff993c: cling::MetaSema::AR_Success). ```. This leaves `TClingCallFunc::fWrapper` point to invalid memory and causes test failures at least in `roottest-root-meta-callfunc-assertUnload-auto`. I have disabled the deletion of the code segments, but that's just a temporary hack to make progress. We need a callback from the unloading to inform all `TClingCallFunc`s that use unloaded sections (including an update of `gWrapperStore` and f",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:4431,deployability,unload,unload,4431,"32a in llvm::orc::ResourceTracker::remove (this=0x5555587f28f0). at /home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . actionResult=@0x7fffffff993c: cling::MetaSema::AR_Success). ```. This leaves `TClingCallFunc::fWrapper` point to invalid memory and causes test failures at least in `roottest-root-meta-callfunc-assertUnload-auto`. I have disabled the deletion of the code segments, but that's just a temporary hack to make progress. We need a callback from the unloading to inform all `TClingCallFunc`s that use unloaded sections (including an update of `gWrapperStore` and friends), such that they can re-emit/-JIT the code if their `Decl` has not been unloaded. This serves as a marker to re-enable the",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:4499,deployability,build,build,4499,"/home/axel/build/root/llvmupgrade/src/interpreter/llvm/src/lib/ExecutionEngine/Orc/Core.cpp:53. #14 0x00007fffec164fc7 in cling::IncrementalJIT::removeModule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . actionResult=@0x7fffffff993c: cling::MetaSema::AR_Success). ```. This leaves `TClingCallFunc::fWrapper` point to invalid memory and causes test failures at least in `roottest-root-meta-callfunc-assertUnload-auto`. I have disabled the deletion of the code segments, but that's just a temporary hack to make progress. We need a callback from the unloading to inform all `TClingCallFunc`s that use unloaded sections (including an update of `gWrapperStore` and friends), such that they can re-emit/-JIT the code if their `Decl` has not been unloaded. This serves as a marker to re-enable the deletion of the Sections, by enabling the `#if 0`'ed code around `i",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
https://github.com/root-project/root/issues/10898:4686,deployability,build,build,4686,"dule (this=0x5555557aaed0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184. #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181. #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119. #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551. #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572. #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...). at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222. #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, . actionResult=@0x7fffffff993c: cling::MetaSema::AR_Success). ```. This leaves `TClingCallFunc::fWrapper` point to invalid memory and causes test failures at least in `roottest-root-meta-callfunc-assertUnload-auto`. I have disabled the deletion of the code segments, but that's just a temporary hack to make progress. We need a callback from the unloading to inform all `TClingCallFunc`s that use unloaded sections (including an update of `gWrapperStore` and friends), such that they can re-emit/-JIT the code if their `Decl` has not been unloaded. This serves as a marker to re-enable the deletion of the Sections, by enabling the `#if 0`'ed code around `interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:189` (in `IncrementalJIT::removeModule(const Transaction& T)`), as introduced by the llvm 13 upgrade.",MatchSource.ISSUE,root-project,root,v6-32-06,https://root.cern,https://github.com/root-project/root/issues/10898
