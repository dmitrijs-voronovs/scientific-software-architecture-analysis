quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words,format_prompt,to_eliminate,reason
Availability," -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * t",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6557,down,download,6557,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['down'],['download'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * t
",False,"The text contains instructions on how to download, build, and install fastp along with dependency libraries. While it includes shell commands and technical details about compilation, the content is explanatory and provides human-readable steps for installation and usage. It does not primarily consist of code snippets or logs but rather guides the user through a process."
Availability," 15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdefl",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:5606,down,download,5606,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['down'],['download'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdefl
",False,
Availability," should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled, the `dup_calc_accuracy` level is default to `3`, and it can be changed to any value of 1 ~ 6. # all options; ```shell; usage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:28608,down,downstream,28608,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['down'],['downstream'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled, the `dup_calc_accuracy` level is default to `3`, and it can be changed to any value of 1 ~ 6. # all options; ```shell; usage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] 
",False,"The text contains explanatory information about the duplication rate and deduplication process in fastp. It includes details on how duplication is evaluated, hash algorithms used, buffer settings, and options for adjusting accuracy. The content is technical but provides meaningful explanations suitable for humans. There are complete sentences discussing these topics without relying on code syntax or logs."
Availability,".fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:5825,down,download,5825,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['down'],['download'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: .fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source 
",False,"The text contains a mixture of code snippets, installation instructions, and explanatory content. While there are command lines and technical details, the overall context is informative and not purely code-based. The presence of natural language explanations about using FastP, installation options, and configuration steps indicates that it's intended for human readers."
Availability,; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:911,down,download,911,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,8,['down'],"['download', 'download-and-build-fastp', 'download-and-build-libdeflate', 'download-and-build-libisal', 'download-the-latest-prebuilt-binary-for-linux-users']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl
",False,"The text contains a list of items and instructions that are meant for users, such as installation methods, steps to build different libraries, input/output descriptions, and usage tips. These are all part of the documentation aimed at guiding users through the process of using or setting up the software."
Availability,"> record3-R2 ... `; ## input from STDIN; * specify `--stdin` if you want to read the STDIN for processing.; * if the STDIN is an interleaved paired-end stream, specify `--interleaved_in` to indicate that.; ## store the unpaired reads for PE data; * you can specify `--unpaired1` to store the reads that read1 passes filters but its paired read2 doesn't, as well as `--unpaired2` for unpaired read2.; * `--unpaired1` and `--unpaired2` can be the same, so the unpaired read1/read2 will be written to the same single file.; ## store the reads that fail the filters; * give `--failed_out` to specify the file name to store the failed reads.; * if one read failed and is written to `--failed_out`, its `failure reason` will be appended to its read name. For example, `failed_quality_filter`, `failed_too_short` etc.; * for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the `failure reason` will be `paired_read_is_failing`.; ## process only part of the data; If you don't want to process all the data, you can specify `--reads_to_process` to limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.; ## do not overwrite exiting files; You can enable the option `--dont_overwrite` to protect the existing files not to be overwritten by `fastp`. In this case, `fastp` will report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.; ## split the output to multiple files for parallel processing; See [output splitting](#output-splitting); ## merge PE reads; See [merge paired-end reads](#merge-paired-end-reads). # filtering; Multiple filters have been implemented.; ## quality filter; Quality filtering is enabled by default, but you can disable it by `-Q` or `disable_quality_filtering`. Currently it su",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:9085,failure,failure,9085,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['failure'],['failure'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: > record3-R2 ... `; ## input from STDIN; * specify `--stdin` if you want to read the STDIN for processing.; * if the STDIN is an interleaved paired-end stream, specify `--interleaved_in` to indicate that.; ## store the unpaired reads for PE data; * you can specify `--unpaired1` to store the reads that read1 passes filters but its paired read2 doesn't, as well as `--unpaired2` for unpaired read2.; * `--unpaired1` and `--unpaired2` can be the same, so the unpaired read1/read2 will be written to the same single file.; ## store the reads that fail the filters; * give `--failed_out` to specify the file name to store the failed reads.; * if one read failed and is written to `--failed_out`, its `failure reason` will be appended to its read name. For example, `failed_quality_filter`, `failed_too_short` etc.; * for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the `failure reason` will be `paired_read_is_failing`.; ## process only part of the data; If you don't want to process all the data, you can specify `--reads_to_process` to limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.; ## do not overwrite exiting files; You can enable the option `--dont_overwrite` to protect the existing files not to be overwritten by `fastp`. In this case, `fastp` will report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.; ## split the output to multiple files for parallel processing; See [output splitting](#output-splitting); ## merge PE reads; See [merge paired-end reads](#merge-paired-end-reads). # filtering; Multiple filters have been implemented.; ## quality filter; Quality filtering is enabled by default, but you can disable it by `-Q` or `disable_quality_filtering`. Currently it su
",False,"The text contains multiple commands and options related to the use of a tool, such as `--stdin`, `--interleaved_in`, `--unpaired1`, etc. These indicate programmatic usage rather than human-readable content."
Availability,"GGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12507,robust,robust,12507,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['robust'],['robust'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: GGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` 
",False,
Availability,"L report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 i",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6214,down,download,6214,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['down'],['download'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: L report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 i
",False,"The provided text contains a mixture of installation instructions, build steps, and some descriptive content. While there are code snippets and shell commands, the text also includes human-readable explanations and setup guides which make it meaningful and relevant for humans."
Availability,[![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); [![install with conda](; https://anaconda.org/bioconda/fastp/badges/downloads.svg)](https://anaconda.org/bioconda/fastp); [![DebianBadge](; https://badges.debian.net/badges/debian/unstable/fastp/version.svg)](https://packages.debian.org/unstable/fastp); [![fastp ci](https://github.com/OpenGene/fastp/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/OpenGene/fastp/actions/workflows/ci.yml). # fastp; A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance.; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:188,down,downloads,188,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['down'],['downloads'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); [![install with conda](; https://anaconda.org/bioconda/fastp/badges/downloads.svg)](https://anaconda.org/bioconda/fastp); [![DebianBadge](; https://badges.debian.net/badges/debian/unstable/fastp/version.svg)](https://packages.debian.org/unstable/fastp); [![fastp ci](https://github.com/OpenGene/fastp/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/OpenGene/fastp/actions/workflows/ci.yml). # fastp; A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance.; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl
",True,"The text contains markdown links and badges which are typically used in documentation or readmes. However, these elements themselves do not form meaningful sentences but rather serve as pointers to resources or information. Additionally, the content includes installation instructions and feature descriptions which are more aligned with programmatic documentation rather than human-readable prose. The presence of section headers like # fastp; # features; etc., further indicates that this is structured documentation, possibly from a readme file."
Availability,"cify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `index2` the second index is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `read1` the head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `read2` the head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `per_index` `index1_index2` is used as UMI for both read1/read2.; * `per_read` define `umi1` as the head of read1, and `umi2` as the head ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:21058,error,error,21058,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['error'],['error'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: cify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `index2` the second index is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `read1` the head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `read2` the head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `per_index` `index1_index2` is used as UMI for both read1/read2.; * `per_read` define `umi1` as the head of read1, and `umi2` as the head 
",False,
Availability,"erged_xxx_yyy`will be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, `; @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`; means that 150bp are from read1, and 15bp are from read2. `fastp` prefers the bases in read1 since they usually have higher quality than read2. Same as the [base correction feature](#base-correction-for-pe-data), this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy le",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:27931,error,error,27931,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['error'],['error'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: erged_xxx_yyy`will be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, `; @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`; means that 150bp are from read1, and 15bp are from read2. `fastp` prefers the bases in read1 since they usually have higher quality than read2. Same as the [base correction feature](#base-correction-for-pe-data), this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy le
",False,"This text contains meaningful sentences discussing how duplication rate is evaluated in fastp, including explanations of deduplication options and hash buffer settings. It is written in natural language without code snippets or logs."
Availability,"inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13290,error,errors,13290,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['error'],['errors'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``
",False,
Availability,"n, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * the output will be gzip-compressed if its file name ends with `.gz`; ## output to STDOUT; `fastp` supports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`, or be passed to aligners like `bwa` and `bowtie2`.; * specify `",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6788,down,download,6788,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['down'],['download'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: n, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * the output will be gzip-compressed if its file name ends with `.gz`; ## output to STDOUT; `fastp` supports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`, or be passed to aligners like `bwa` and `bowtie2`.; * specify `
",True,"The text consists primarily of code snippets, build instructions, and configuration commands. It includes shell commands with syntax highlighting and code formatting that are typical in code blocks. There are also make/cmake commands and version control instructions (git clone, autogen.sh, configure options). Additionally, there are dependency requirements listed for building libraries like libisal and libdeflate. The text contains instructions on how to compile and install software, which is more aligned with programming and build processes rather than meaningful human-readable content."
Availability,"s like `bzip2`, or be passed to aligners like `bwa` and `bowtie2`.; * specify `--stdout` to enable this mode to stream output to STDOUT; * for PE data, the output will be interleaved FASTQ, which means the output will contain records like `record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ... `; ## input from STDIN; * specify `--stdin` if you want to read the STDIN for processing.; * if the STDIN is an interleaved paired-end stream, specify `--interleaved_in` to indicate that.; ## store the unpaired reads for PE data; * you can specify `--unpaired1` to store the reads that read1 passes filters but its paired read2 doesn't, as well as `--unpaired2` for unpaired read2.; * `--unpaired1` and `--unpaired2` can be the same, so the unpaired read1/read2 will be written to the same single file.; ## store the reads that fail the filters; * give `--failed_out` to specify the file name to store the failed reads.; * if one read failed and is written to `--failed_out`, its `failure reason` will be appended to its read name. For example, `failed_quality_filter`, `failed_too_short` etc.; * for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the `failure reason` will be `paired_read_is_failing`.; ## process only part of the data; If you don't want to process all the data, you can specify `--reads_to_process` to limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.; ## do not overwrite exiting files; You can enable the option `--dont_overwrite` to protect the existing files not to be overwritten by `fastp`. In this case, `fastp` will report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.; ## split the output to multiple files for parallel processing; S",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:8778,failure,failure,8778,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['failure'],['failure'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: s like `bzip2`, or be passed to aligners like `bwa` and `bowtie2`.; * specify `--stdout` to enable this mode to stream output to STDOUT; * for PE data, the output will be interleaved FASTQ, which means the output will contain records like `record1-R1 -> record1-R2 -> record2-R1 -> record2-R2 -> record3-R1 -> record3-R2 ... `; ## input from STDIN; * specify `--stdin` if you want to read the STDIN for processing.; * if the STDIN is an interleaved paired-end stream, specify `--interleaved_in` to indicate that.; ## store the unpaired reads for PE data; * you can specify `--unpaired1` to store the reads that read1 passes filters but its paired read2 doesn't, as well as `--unpaired2` for unpaired read2.; * `--unpaired1` and `--unpaired2` can be the same, so the unpaired read1/read2 will be written to the same single file.; ## store the reads that fail the filters; * give `--failed_out` to specify the file name to store the failed reads.; * if one read failed and is written to `--failed_out`, its `failure reason` will be appended to its read name. For example, `failed_quality_filter`, `failed_too_short` etc.; * for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the `failure reason` will be `paired_read_is_failing`.; ## process only part of the data; If you don't want to process all the data, you can specify `--reads_to_process` to limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.; ## do not overwrite exiting files; You can enable the option `--dont_overwrite` to protect the existing files not to be overwritten by `fastp`. In this case, `fastp` will report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.; ## split the output to multiple files for parallel processing; S
",False,"The text contains complete sentences discussing options and parameters for a tool, which is descriptive content. It does not consist of code snippets or logs."
Availability,"the filters; * give `--failed_out` to specify the file name to store the failed reads.; * if one read failed and is written to `--failed_out`, its `failure reason` will be appended to its read name. For example, `failed_quality_filter`, `failed_too_short` etc.; * for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the `failure reason` will be `paired_read_is_failing`.; ## process only part of the data; If you don't want to process all the data, you can specify `--reads_to_process` to limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.; ## do not overwrite exiting files; You can enable the option `--dont_overwrite` to protect the existing files not to be overwritten by `fastp`. In this case, `fastp` will report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.; ## split the output to multiple files for parallel processing; See [output splitting](#output-splitting); ## merge PE reads; See [merge paired-end reads](#merge-paired-end-reads). # filtering; Multiple filters have been implemented.; ## quality filter; Quality filtering is enabled by default, but you can disable it by `-Q` or `disable_quality_filtering`. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`), and the percentage of unqualified bases.  . To filter reads by its percentage of unqualified bases, two options should be provided:; * `-q, --qualified_quality_phred`       the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.; * `-u, --unqualified_percent_limit`   how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%. You can also filter reads by its average quality score; * `-e, --average_qual` if on",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:9592,error,error,9592,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['error'],['error'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: the filters; * give `--failed_out` to specify the file name to store the failed reads.; * if one read failed and is written to `--failed_out`, its `failure reason` will be appended to its read name. For example, `failed_quality_filter`, `failed_too_short` etc.; * for PE data, if unpaired reads are not stored (by giving --unpaired1 or --unpaired2), the failed pair of reads will be put together. If one read passes the filters but its pair doesn't, the `failure reason` will be `paired_read_is_failing`.; ## process only part of the data; If you don't want to process all the data, you can specify `--reads_to_process` to limit the reads to be processed. This is useful if you want to have a fast preview of the data quality, or you want to create a subset of the filtered data.; ## do not overwrite exiting files; You can enable the option `--dont_overwrite` to protect the existing files not to be overwritten by `fastp`. In this case, `fastp` will report an error and quit if it finds any of the output files (read1, read2, json report, html report) already exists before.; ## split the output to multiple files for parallel processing; See [output splitting](#output-splitting); ## merge PE reads; See [merge paired-end reads](#merge-paired-end-reads). # filtering; Multiple filters have been implemented.; ## quality filter; Quality filtering is enabled by default, but you can disable it by `-Q` or `disable_quality_filtering`. Currently it supports filtering by limiting the N base number (`-n, --n_base_limit`), and the percentage of unqualified bases.  . To filter reads by its percentage of unqualified bases, two options should be provided:; * `-q, --qualified_quality_phred`       the quality value that a base is qualified. Default 15 means phred quality >=Q15 is qualified.; * `-u, --unqualified_percent_limit`   how many percents of bases are allowed to be unqualified (0~100). Default 40 means 40%. You can also filter reads by its average quality score; * `-e, --average_qual` if on
",False,"The text contains sentences that are explanatory and describe the filtering options in detail. It includes instructions for users, such as how to enable or disable quality filters and what parameters they can use. The content is written in a way that is understandable for humans discussing concepts related to data processing."
Deployability," # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * the output will be gzip-compressed if its file name ends with `.gz`; ## output to STDOUT; `fastp` supports streaming the passing-filter reads to STDOUT, so th",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6756,install,install,6756,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['install'],['install'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * the output will be gzip-compressed if its file name ends with `.gz`; ## output to STDOUT; `fastp` supports streaming the passing-filter reads to STDOUT, so th
",False,"The text contains a series of commands and instructions for downloading, compiling, and installing software. It includes code snippets like 'wget' and 'make', but it also provides context about how the software works, such as input/output options and features. There are no code snippets without explanations, and the content is more descriptive than programming-related."
Deployability," 15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdefl",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:5568,install,install,5568,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['install'],['install'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdefl
",False,
Deployability," file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved input; 14. support ultra-fast FASTQ-level deduplication; 15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to b",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:5348,install,install,5348,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['install'],['install'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved input; 14. support ultra-fast FASTQ-level deduplication; 15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to b
",False,
Deployability,; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:857,install,install,857,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['install'],"['install', 'install-with-bioconda']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl
",False,"The content contains a list of menu items or sections related to the installation and usage of a software tool. While it includes some technical terms, it is structured as an unordered list without any clear narrative or explanation. However, each item does appear to be part of an interface or documentation that could be considered helpful for users. Therefore, this text should not be filtered out."
Deployability,[![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); [![install with conda](; https://anaconda.org/bioconda/fastp/badges/downloads.svg)](https://anaconda.org/bioconda/fastp); [![DebianBadge](; https://badges.debian.net/badges/debian/unstable/fastp/version.svg)](https://packages.debian.org/unstable/fastp); [![fastp ci](https://github.com/OpenGene/fastp/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/OpenGene/fastp/actions/workflows/ci.yml). # fastp; A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance.; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3,install,install,3,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['install'],['install'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); [![install with conda](; https://anaconda.org/bioconda/fastp/badges/downloads.svg)](https://anaconda.org/bioconda/fastp); [![DebianBadge](; https://badges.debian.net/badges/debian/unstable/fastp/version.svg)](https://packages.debian.org/unstable/fastp); [![fastp ci](https://github.com/OpenGene/fastp/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/OpenGene/fastp/actions/workflows/ci.yml). # fastp; A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance.; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl
",False,
Deployability,"bisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * the output will be gzip-compressed if its file name ends with `.gz`; ## output to STDOUT; `fastp` supports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`, or be passed to aligners like `bwa` and `bowtie2`.; * specify `--stdout` to enable this mode to stream output to STDOUT; * for PE data, the output will be interleaved FASTQ, which means the output will contain records like `record1-R1 -> recor",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6996,install,install,6996,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['install'],['install'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: bisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * the output will be gzip-compressed if its file name ends with `.gz`; ## output to STDOUT; `fastp` supports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`, or be passed to aligners like `bwa` and `bowtie2`.; * specify `--stdout` to enable this mode to stream output to STDOUT; * for PE data, the output will be interleaved FASTQ, which means the output will contain records like `record1-R1 -> recor
",False,
Deployability,"e: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6531,install,install,6531,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['install'],['install'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: e: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the
",False,"The text contains detailed, step-by-step instructions for installing and building fastp, including shell commands. While it's technical, it's readable and provides guidance that is not purely code or logs. The content includes explanatory text about the dependencies and installation steps, which fits the criteria for keeping text."
Deployability,"h `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `index2` the second index is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `read1` the head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `read2` the head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `per_index` `index1_index2` is used as UMI for both read1/read2.; * `per_read` define `umi1` as the head of read1, and `umi2` as the head of read2. `umi1_umi2` is used as UMI for both read1/read2. If `--umi_loc` is specified with `read1`, `read2` or `per_read`, the length of UMI should specified with `--umi_len`. `fastp` will extract the UMIs, and append t",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:21269,integrat,integrated,21269,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['integrat'],['integrated'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: h `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `index2` the second index is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `read1` the head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `read2` the head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `per_index` `index1_index2` is used as UMI for both read1/read2.; * `per_read` define `umi1` as the head of read1, and `umi2` as the head of read2. `umi1_umi2` is used as UMI for both read1/read2. If `--umi_loc` is specified with `read1`, `read2` or `per_read`, the length of UMI should specified with `--umi_len`. `fastp` will extract the UMIs, and append t
",False,"The text contains complete, meaningful sentences in natural language discussing features and usage of fastp tool. It includes explanations about polyG and polyX trimming, UMI processing options, which are all relevant to the functionality and configuration of the software."
Deployability,"n, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * the output will be gzip-compressed if its file name ends with `.gz`; ## output to STDOUT; `fastp` supports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`, or be passed to aligners like `bwa` and `bowtie2`.; * specify `",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6890,release,releases,6890,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['release'],['releases'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: n, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the QC will still be done for both data before and after filtering.; * the output will be gzip-compressed if its file name ends with `.gz`; ## output to STDOUT; `fastp` supports streaming the passing-filter reads to STDOUT, so that it can be passed to other compressors like `bzip2`, or be passed to aligners like `bwa` and `bowtie2`.; * specify `
",False,
Deployability,"t; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE)",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6143,upgrade,upgrade,6143,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['upgrade'],['upgrade'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: t; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE)
",False,"The text contains detailed installation instructions for the fastp tool, including steps for installing via Bioconda, downloading prebuilt binaries, compiling from source, and dependencies. It also explains how to build and install the software. While some parts may resemble code snippets or shell commands, the overall content is explanatory and provides human-readable guidance on using the tool, which should not be filtered out."
Energy Efficiency," 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you ca",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12386,adapt,adapters,12386,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you ca
",False,"The text contains multiple paragraphs of explanatory and descriptive content about adapter trimming settings in a software tool. It includes detailed information on how different filters and options work, which are meant to aid users in processing their data effectively. There are no code snippets or logs present; instead, it's human-readable prose discussing the features and functionality of the software."
Energy Efficiency," PE data, the front/tail trimming settings are given with `-F, --trim_front2` and `-T, --trim_tail2`. But if these options are not specified, they will be as same as read1 options, which means `trim_front2 = trim_front1` and `trim_tail2 = trim_tail1`.; * If you want to trim the reads to maximum length, you can specify `-b, --max_len1` for read1, and `-B, --max_len2` for read2. If `--max_len1` is specified but `--max_len2` is not, `--max_len2` will be same as `--max_len1`. For example, if `--max_len1` is specified and read1 is longer than `--max_len1`, `fastp` will trim read1 at its tail to make it as long as `--max_len1`. Please note that the trimming for `--max_len` limitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:; ```; 1, UMI preprocessing (--umi); 2, global trimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:19495,adapt,adapter,19495,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  PE data, the front/tail trimming settings are given with `-F, --trim_front2` and `-T, --trim_tail2`. But if these options are not specified, they will be as same as read1 options, which means `trim_front2 = trim_front1` and `trim_tail2 = trim_tail1`.; * If you want to trim the reads to maximum length, you can specify `-b, --max_len1` for read1, and `-B, --max_len2` for read2. If `--max_len1` is specified but `--max_len2` is not, `--max_len2` will be same as `--max_len1`. For example, if `--max_len1` is specified and read1 is longer than `--max_len1`, `fastp` will trim read1 at its tail to make it as long as `--max_len1`. Please note that the trimming for `--max_len` limitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:; ```; 1, UMI preprocessing (--umi); 2, global trimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. 
",False,
Energy Efficiency," default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12101,adapt,adapters,12101,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you 
",False,
Energy Efficiency," phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32001,adapt,adapter,32001,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=
",False,
Energy Efficiency," will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regul",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13340,adapt,adapter,13340,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regul
",False,"The provided text contains detailed explanations about the use of adapters in a bioinformatics tool, including how they work and how to specify them for processing. The content is written in plain language, explaining concepts and procedures without code snippets or logs. It describes features and options available, such as enabling auto-detection and specifying sequences, which are intended for human users to understand how the software functions. There are no code elements, error messages, or programmatic descriptions present. Instead, it provides instructions and context that are meaningful and informative for anyone using the tool."
Energy Efficiency,"#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved inpu",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3604,adapt,adapter,3604,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: #splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved inpu
",False,
Energy Efficiency,"* For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13970,adapt,adapter,13970,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is 
",True,The text includes code samples and programmatic descriptions such as adapter configuration instructions and quality control settings.
Energy Efficiency,"-complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contain",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12629,adapt,adapter,12629,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: -complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contain
",False,
Energy Efficiency,"CTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default i",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14423,adapt,adapter,14423,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapt'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: CTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default i
",True,"The text contains code snippets, such as `--adapter_sequence`, `--cut_front` and `--cut_tail`, which are command line options. Additionally, it includes configuration details like the use of FASTA files for adapter trimming, which are part of programmatic descriptions."
Energy Efficiency,"Disabled by default.; -6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_l",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:31875,adapt,adapter,31875,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: Disabled by default.; -6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_l
",False,
Energy Efficiency,"GGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12564,adapt,adapter,12564,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: GGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` 
",True,"The text consists primarily of program documentation, including configuration options and technical details about adapters for sequencing data processing. This type of content is considered API documentation or specifications."
Energy Efficiency,"aired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, i",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32248,adapt,adapter,32248,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: aired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, i
",True,"The text consists primarily of code options and parameters, which are typically used in command-line tools or scripts."
Energy Efficiency,"ata, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one o",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13916,adapt,adapters,13916,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ata, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one o
",False,
Energy Efficiency,"by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FAS",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12892,adapt,adapter,12892,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FAS
",False,
Energy Efficiency,"ce the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14198,adapt,adapter,14198,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ce the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the 
",False,
Energy Efficiency,"ch contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplicatio",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32572,adapt,adapter,32572,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ch contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplicatio
",True,"The text consists of command line options and parameters which are typical in code or program documentation. It includes descriptions of flags, their purposes, default values, etc., which are common in API or configuration files."
Energy Efficiency,"ch means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38368,adapt,adapter,38368,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ch means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_
",False,"The text contains multiple command line options and parameters with explanations. While it's technical, the content is more descriptive and explanatory rather than being code or logs. It details various filters and settings for a tool, which is considered human-readable prose discussing concepts."
Energy Efficiency,"code per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]). # reporting options; -j, --json the json format report file n",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38590,adapt,adapter,38590,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: code per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]). # reporting options; -j, --json the json format report file n
",False,
Energy Efficiency,"d for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by qual",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13683,adapt,adapter,13683,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: d for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by qual
",False,
Energy Efficiency,"default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly clea",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12226,adapt,adapter,12226,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly clea
",False,
Energy Efficiency,"dely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail`",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14362,adapt,adapters,14362,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: dely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail`
",False,"The text contains detailed explanations about how adapters are handled in the `fastp` tool, including specific commands and parameters. While it includes some technical details, these are presented in a human-readable format with meaningful sentences explaining the functionality rather than being purely code or logs."
Energy Efficiency,"er. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/rea",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38156,adapt,adapter,38156,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: er. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/rea
",False,"The text contains complete sentences discussing configuration options and parameters for a tool. However, these are technical descriptions rather than human-readable prose. While they provide information about how the tool operates, they don't present a meaningful narrative or discussion beyond the mechanics of the tool's features."
Energy Efficiency,"he percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The m",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12286,adapt,adapter,12286,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: he percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The m
",False,
Energy Efficiency,"inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13144,adapt,adapters,13144,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapt'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``
",False,
Energy Efficiency,"ing implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an is",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12829,adapt,adapters,12829,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ing implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an is
",False,"The provided text consists of detailed explanations and descriptions about adapters in the `fastp` tool, including how they work for both PE and SE data. It includes configuration options and usage guidelines, which are meant to inform users on how to properly configure the tool with adapter sequences. The content is written in a human-readable format, discussing concepts and providing guidance without any code snippets or logs."
Energy Efficiency,"litting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support re",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3505,adapt,adapters,3505,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: litting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support re
",False,"The text includes human-readable sentences discussing data processing and quality control steps, such as filtering bad reads, trimming adapters, and preprocessing UMIs. It also mentions visualization and splitting output into multiple files for parallel processing."
Energy Efficiency,"ng `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14611,adapt,adapters,14611,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ng `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set 
",True,"The text contains code snippets, API documentation, configuration details, and programmatic descriptions which are primarily technical in nature and not meaningful human-readable sentences."
Energy Efficiency,ource); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low complexity filter](#low-complexity-filter); - [Other filter](#other-filter); - [adapters](#adapters); - [per read cutting by quality score](#per-read-cutting-by-quality-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations).,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:2076,adapt,adapters,2076,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ource); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low complexity filter](#low-complexity-filter); - [Other filter](#other-filter); - [adapters](#adapters); - [per read cutting by quality score](#per-read-cutting-by-quality-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations).
",False,
Energy Efficiency,"ow quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13753,adapt,adapters,13753,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ow quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality
",True,"The text contains code snippets, API documentation, and programmatic descriptions which are primarily about adapter trimming in a bioinformatics tool."
Energy Efficiency,"r gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specif",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32112,adapt,adapter,32112,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: r gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specif
",True,"The text consists primarily of program arguments and options with brief descriptions, which are typically found in API documentation or configuration files."
Energy Efficiency,"some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit` to discard the reads longer than `length_limit`. The default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:11898,adapt,adapters,11898,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit` to discard the reads longer than `length_limit`. The default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since 
",True,"The text consists primarily of code explanations, parameters, and settings that are typically found in program documentation or API specifications. It includes specific commands (`--length_limit`, `-y`, `--low_complexity_filter`, `-Y`, etc.), code examples (the 51-bp sequence with calculations), and detailed explanations of features like adapter trimming which are more technical in nature."
Energy Efficiency,"y-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a sin",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3227,adapt,adapter,3227,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: y-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a sin
",False,"The text contains several bullet points discussing data processing steps such as trimming, adapter removal, polyG/polyX trimming, UMI processing, merging paired-end reads, deduplication, and other quality control measures. It also mentions the output format and visualization of results. These are detailed technical descriptions that are more programmatic in nature but they are accompanied by explanatory text rather than code snippets or logs. The content is descriptive of data handling procedures which is relevant for a human audience interested in understanding the processing pipeline."
Integrability," 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you ca",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12386,adapter,adapters,12386,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you ca
",False,"The text contains complete sentences discussing adapter trimming settings and configuration options for a tool like fastp, which is relevant to users wanting to understand how to process their sequencing data."
Integrability," PE data, the front/tail trimming settings are given with `-F, --trim_front2` and `-T, --trim_tail2`. But if these options are not specified, they will be as same as read1 options, which means `trim_front2 = trim_front1` and `trim_tail2 = trim_tail1`.; * If you want to trim the reads to maximum length, you can specify `-b, --max_len1` for read1, and `-B, --max_len2` for read2. If `--max_len1` is specified but `--max_len2` is not, `--max_len2` will be same as `--max_len1`. For example, if `--max_len1` is specified and read1 is longer than `--max_len1`, `fastp` will trim read1 at its tail to make it as long as `--max_len1`. Please note that the trimming for `--max_len` limitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:; ```; 1, UMI preprocessing (--umi); 2, global trimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:19495,adapter,adapter,19495,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  PE data, the front/tail trimming settings are given with `-F, --trim_front2` and `-T, --trim_tail2`. But if these options are not specified, they will be as same as read1 options, which means `trim_front2 = trim_front1` and `trim_tail2 = trim_tail1`.; * If you want to trim the reads to maximum length, you can specify `-b, --max_len1` for read1, and `-B, --max_len2` for read2. If `--max_len1` is specified but `--max_len2` is not, `--max_len2` will be same as `--max_len1`. For example, if `--max_len1` is specified and read1 is longer than `--max_len1`, `fastp` will trim read1 at its tail to make it as long as `--max_len1`. Please note that the trimming for `--max_len` limitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:; ```; 1, UMI preprocessing (--umi); 2, global trimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. 
",True,"The text consists primarily of programmatic API description, parameter lists, and configuration details, which are typical indicators that the content should be filtered."
Integrability," default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12101,adapter,adapters,12101,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you 
",True,"The text consists primarily of programmatic descriptions and configuration settings, including parameter options and adapter configurations which are typical in API documentation or software tool settings. It includes commands for enabling/disabling features, specifies parameters like '--adapter_sequence' and '--complexity_threshold', and discusses evaluation methods which are more suitable for a program's configuration rather than human-readable content."
Integrability," phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32001,adapter,adapter,32001,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=
",False,"The text contains a mix of command line options and explanations, but the majority consists of meaningful sentences discussing the tool's functionality and parameters. The content is not purely code or logs."
Integrability," will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regul",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13340,adapter,adapter,13340,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapter'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regul
",False,"The text contains detailed explanations about adapters used in a sequencing pipeline, including how they are detected and specified. It includes specific command-line options and configurations. While this is technical, it is still descriptive prose discussing the functionality of the tool."
Integrability,"#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved inpu",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3604,adapter,adapter,3604,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: #splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved inpu
",False,"The text consists of a series of bullet points describing various data processing steps, including quality control and filtering methods for reads. While it's technical, the content is explanatory and describes processes that are part of bioinformatics workflows. It does not primarily consist of code snippets or logs."
Integrability,"* For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13970,adapter,adapter,13970,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is 
",True,"The text contains code snippets, API documentation, and programmatic descriptions, including commands, parameters, and technical specifications."
Integrability,"-complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contain",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12629,adapter,adapter,12629,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: -complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contain
",False,
Integrability,"CTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default i",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14423,adapter,adapter,14423,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapter'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: CTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default i
",False,
Integrability,"Disabled by default.; -6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_l",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:31875,adapter,adapter,31875,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: Disabled by default.; -6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_l
",False,
Integrability,"GGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12564,adapter,adapter,12564,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: GGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` 
",False,
Integrability,"aired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, i",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32248,adapter,adapter,32248,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: aired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, i
",True,"The content consists primarily of programmatic options and parameters used in a script or command line tool, which is typical of API documentation or specifications."
Integrability,"ata, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one o",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13916,adapter,adapters,13916,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ata, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one o
",False,
Integrability,"by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FAS",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12892,adapter,adapter,12892,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapter'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FAS
",False,
Integrability,"ce the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14198,adapter,adapter,14198,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ce the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the 
",False,
Integrability,"ch contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplicatio",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32572,adapter,adapter,32572,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ch contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplicatio
",False,
Integrability,"ch means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38368,adapter,adapter,38368,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ch means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_
",False,"The text includes configuration options for a tool, which may be part of API documentation or programmatic descriptions. However, it's not purely code or logs. It's more like a set of parameters and explanations, which could be considered descriptive content."
Integrability,"code per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]). # reporting options; -j, --json the json format report file n",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38590,adapter,adapter,38590,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: code per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]). # reporting options; -j, --json the json format report file n
",False,"The text contains detailed explanations about command-line arguments and their functions related to data processing parameters. It includes descriptions of various options such as --filter_by_index2, --filter_by_index_threshold, etc., which are technical in nature but still provide information on how the software operates. The text is not purely code or logs; it's explanatory content discussing software configuration and usage."
Integrability,"d for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by qual",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13683,adapter,adapter,13683,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: d for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by qual
",False,
Integrability,"default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly clea",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12226,adapter,adapter,12226,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly clea
",True,"The text is programmatic API documentation discussing configuration options and parameters for an adapter trimming feature. It includes command-line options and details about how adapters are detected for different types of data (SE and PE), which are technical descriptions rather than human-readable content."
Integrability,"dely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail`",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14362,adapter,adapters,14362,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: dely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail`
",False,
Integrability,"er. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/rea",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38156,adapter,adapter,38156,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: er. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/rea
",False,The text includes detailed command line options and parameters for a tool or software. This type of content is typically part of API documentation or programmatic descriptions.
Integrability,"fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6000,depend,depends,6000,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['depend'],['depends'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can 
",False,"The provided text contains multiple steps on how to install and build the FastP tool. It includes detailed shell commands for downloading, installing via conda, compiling from source, building dependencies like libdeflate and libisal, and configuring the build options. While there are technical instructions, they are presented in a human-readable format with clear explanations rather than code snippets or logs. The text is not primarily composed of code or API documentation but provides guidance for installation and usage, which is considered meaningful content."
Integrability,"h `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `index2` the second index is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `read1` the head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `read2` the head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `per_index` `index1_index2` is used as UMI for both read1/read2.; * `per_read` define `umi1` as the head of read1, and `umi2` as the head of read2. `umi1_umi2` is used as UMI for both read1/read2. If `--umi_loc` is specified with `read1`, `read2` or `per_read`, the length of UMI should specified with `--umi_len`. `fastp` will extract the UMIs, and append t",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:21269,integrat,integrated,21269,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['integrat'],['integrated'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: h `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `index2` the second index is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `read1` the head of read1 is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `read2` the head of read2 is used as UMI. PE data only, this UMI will be used for both read1/read2.; * `per_index` `index1_index2` is used as UMI for both read1/read2.; * `per_read` define `umi1` as the head of read1, and `umi2` as the head of read2. `umi1_umi2` is used as UMI for both read1/read2. If `--umi_loc` is specified with `read1`, `read2` or `per_read`, the length of UMI should specified with `--umi_len`. `fastp` will extract the UMIs, and append t
",True,"The text contains API documentation or specifications including parameter lists and descriptions such as UMI location options (`index1`, `index2`, etc.) and UMI length specification. It also includes code-like terms and configurations which are typically found in programmatic content."
Integrability,"he percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The m",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12286,adapter,adapter,12286,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: he percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The m
",False,
Integrability,"hould be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]). # reporting options; -j, --json the json format report file name (string [=fastp.json]); -h, --html the html format report file name (string [=fastp.html]); -R, --report_title should be quoted with ' or "", default is ""fastp report"" (string [=fastp report]). # threading options; -w, --thread worker thread number, default is 3 (int [=3]). # output splitting options; -s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]). # help; -?, --help print this message; ```. # citations; ### Shifu Chen. 2023. Ultrafast one-pass FASTQ data preprocessing, quality control, and deduplication using fastp. iMeta 2: e107. https://doi.org/10.1002/imt2.107; ### Shifu Chen, Yanqing Zhou, Yaru Chen, Jia Gu; fastp: an ultra-fast all-in-one FASTQ preprocessor, Bioinformatics, Volume 34, Issue 17, 1 September 2018, Pages i884–i890, https://doi.org/10.1093/bioinformatics/bty560. ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:40506,message,message,40506,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['message'],['message'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: hould be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]). # reporting options; -j, --json the json format report file name (string [=fastp.json]); -h, --html the html format report file name (string [=fastp.html]); -R, --report_title should be quoted with ' or "", default is ""fastp report"" (string [=fastp report]). # threading options; -w, --thread worker thread number, default is 3 (int [=3]). # output splitting options; -s, --split split output by limiting total split file number with this option (2~999), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (int [=0]); -S, --split_by_lines split output by limiting lines of each file with this option(>=1000), a sequential number prefix will be added to output name ( 0001.out.fq, 0002.out.fq...), disabled by default (long [=0]); -d, --split_prefix_digits the digits for the sequential number padding (1~10), default is 4, so the filename will be padded as 0001.xxx, 0 to disable padding (int [=4]). # help; -?, --help print this message; ```. # citations; ### Shifu Chen. 2023. Ultrafast one-pass FASTQ data preprocessing, quality control, and deduplication using fastp. iMeta 2: e107. https://doi.org/10.1002/imt2.107; ### Shifu Chen, Yanqing Zhou, Yaru Chen, Jia Gu; fastp: an ultra-fast all-in-one FASTQ preprocessor, Bioinformatics, Volume 34, Issue 17, 1 September 2018, Pages i884–i890, https://doi.org/10.1093/bioinformatics/bty560. 
",False,The text contains meaningful human-readable sentences discussing the tool's functionality and its academic citations.
Integrability,"inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13144,adapter,adapters,13144,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapter'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``
",False,
Integrability,"ing implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an is",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12829,adapter,adapters,12829,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ing implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an is
",False,"The text contains several sentences that describe and explain different aspects of adapters in the program, including how they are detected and handled. These sentences are written in plain language and provide meaningful information for users. They discuss features such as auto-detection, trimming options, parameters, and recommendations for specific adapter sequences. The content is intended to help users understand and utilize the program's functionality related to adapters, which is a significant part of the software's operation. There are no code snippets, logs, or API documentation present in this text."
Integrability,"litting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support re",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3505,adapter,adapters,3505,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: litting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support re
",False,
Integrability,"ng `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14611,adapter,adapters,14611,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ng `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set 
",False,"The text contains detailed explanations about how adapters work in the tool, including examples of usage and configuration options."
Integrability,ource); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low complexity filter](#low-complexity-filter); - [Other filter](#other-filter); - [adapters](#adapters); - [per read cutting by quality score](#per-read-cutting-by-quality-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations).,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:2076,adapter,adapters,2076,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ource); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low complexity filter](#low-complexity-filter); - [Other filter](#other-filter); - [adapters](#adapters); - [per read cutting by quality score](#per-read-cutting-by-quality-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations).
",True,"The text consists of a list of steps, commands, and configurations which are primarily code-related. It includes itemized lists that resemble code syntax or build instructions, such as 'download and build libisal' and 'store the unpaired reads for PE data'. The structure resembles command line operations rather than meaningful human-readable sentences. This content is more appropriate for program documentation or operational guides rather than general prose."
Integrability,"ow quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13753,adapter,adapters,13753,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ow quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality
",False,"This text contains a mix of descriptive paragraphs and technical details about adapter trimming in a bioinformatics tool. The content is written in natural language, explaining concepts such as Illumina TruSeq adapters, how to specify them, and the impact on output. While there are code snippets (e.g., FASTA examples) and some technical jargon, the majority of the text is explanatory and not purely code-based or log-like. Therefore, it should not be filtered out."
Integrability,"r gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specif",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32112,adapter,adapter,32112,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: r gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specif
",False,"The text contains detailed explanations of command-line options and their functionalities, which are meaningful and human-readable."
Integrability,"some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit` to discard the reads longer than `length_limit`. The default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:11898,adapter,adapters,11898,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit` to discard the reads longer than `length_limit`. The default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since 
",True,"The text contains API documentation or specifications, including parameter lists (e.g., --adapter_sequence), return types, and configuration options. It also includes code examples which are marked with backticks and semicolons. Additionally, the content provides explanations of filters but in a manner that is more aligned with programmatic descriptions rather than natural language. The overall structure suggests it's part of documentation for a tool or application, possibly related to data processing."
Integrability,"y-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a sin",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3227,adapter,adapter,3227,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapter'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: y-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a sin
",False,
Modifiability," 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you ca",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12386,adapt,adapters,12386,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you ca
",False,The text contains complete sentences and explanatory content about adapter trimming settings in a software tool.
Modifiability," PE data, the front/tail trimming settings are given with `-F, --trim_front2` and `-T, --trim_tail2`. But if these options are not specified, they will be as same as read1 options, which means `trim_front2 = trim_front1` and `trim_tail2 = trim_tail1`.; * If you want to trim the reads to maximum length, you can specify `-b, --max_len1` for read1, and `-B, --max_len2` for read2. If `--max_len1` is specified but `--max_len2` is not, `--max_len2` will be same as `--max_len1`. For example, if `--max_len1` is specified and read1 is longer than `--max_len1`, `fastp` will trim read1 at its tail to make it as long as `--max_len1`. Please note that the trimming for `--max_len` limitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:; ```; 1, UMI preprocessing (--umi); 2, global trimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:19495,adapt,adapter,19495,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  PE data, the front/tail trimming settings are given with `-F, --trim_front2` and `-T, --trim_tail2`. But if these options are not specified, they will be as same as read1 options, which means `trim_front2 = trim_front1` and `trim_tail2 = trim_tail1`.; * If you want to trim the reads to maximum length, you can specify `-b, --max_len1` for read1, and `-B, --max_len2` for read2. If `--max_len1` is specified but `--max_len2` is not, `--max_len2` will be same as `--max_len1`. For example, if `--max_len1` is specified and read1 is longer than `--max_len1`, `fastp` will trim read1 at its tail to make it as long as `--max_len1`. Please note that the trimming for `--max_len` limitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:; ```; 1, UMI preprocessing (--umi); 2, global trimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. 
",False,
Modifiability," default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12101,adapt,adapters,12101,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you 
",False,
Modifiability," phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32001,adapt,adapter,32001,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=
",False,
Modifiability," will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regul",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13340,adapt,adapter,13340,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regul
",False,"The text contains detailed explanations about how `fastp` handles PE data adapters, including configuration options and examples. It is not primarily code or logs but descriptive text explaining functionality."
Modifiability,"#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved inpu",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3604,adapt,adapter,3604,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: #splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved inpu
",True,"The provided text appears to be a programmatic description of data processing steps, including code snippets and API documentation. It mentions features like splitting files, trimming reads, correcting mismatches, etc., which are typically part of data analysis pipelines rather than human-readable content."
Modifiability,"* For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13970,adapt,adapter,13970,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is 
",False,
Modifiability,"-complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contain",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12629,adapt,adapter,12629,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: -complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contain
",False,
Modifiability,"CTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default i",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14423,adapt,adapter,14423,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapt'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: CTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default i
",True,"The text contains programmatic descriptions and API specifications, such as parameter lists and command line options. It includes code snippets with syntax elements and technical details that are more suited for developers rather than general readers."
Modifiability,"Disabled by default.; -6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_l",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:31875,adapt,adapter,31875,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: Disabled by default.; -6, --phred64 indicate the input is using phred64 scoring (it'll be converted to phred33, so the output will still be phred33); -z, --compression compression level for gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_l
",False,
Modifiability,"GGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12564,adapt,adapter,12564,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: GGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` 
",False,
Modifiability,"aired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, i",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32248,adapt,adapter,32248,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: aired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, i
",False,
Modifiability,"ata, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one o",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13916,adapt,adapters,13916,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ata, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one o
",False,"The text contains multiple complete sentences discussing how adapters are handled in a software tool, including explanations of options like `--detect_adapter_for_pe`, built-in sequences, and trimming logic. The content is human-readable and provides guidance for users."
Modifiability,"by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FAS",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12892,adapt,adapter,12892,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FAS
",False,
Modifiability,"ce the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14198,adapt,adapter,14198,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ce the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the 
",False,
Modifiability,"ch contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplicatio",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32572,adapt,adapter,32572,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ch contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplicatio
",False,
Modifiability,"ch means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38368,adapt,adapter,38368,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ch means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_
",False,
Modifiability,"code per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]). # reporting options; -j, --json the json format report file n",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38590,adapt,adapter,38590,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: code per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smaller is slower, default is 20. (int [=20]). # reporting options; -j, --json the json format report file n
",False,
Modifiability,"d for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by qual",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13683,adapt,adapter,13683,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: d for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by qual
",False,
Modifiability,"default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly clea",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12226,adapt,adapter,12226,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly clea
",False,
Modifiability,"dely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail`",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14362,adapt,adapters,14362,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: dely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail`
",False,
Modifiability,"e: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:6470,config,configure,6470,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['config'],['configure'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: e: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdeflate; ```shell; git clone https://github.com/ebiggers/libdeflate.git; cd libdeflate; cmake -B build; cmake --build build; cmake --install build; ```. ### Step 3: download and build fastp; ```shell; # get source (you can also use browser to download from master or releases); git clone https://github.com/OpenGene/fastp.git. # build; cd fastp; make. # Install; sudo make install; ```; You can add `-j8` option to `make/cmake` to use 8 threads for the compilation. . # input and output; `fastp` supports both single-end (SE) and paired-end (PE) input/output.; * for SE data, you only have to specify read1 input by `-i` or `--in1`, and specify read1 output by `-o` or `--out1`.; * for PE data, you should also specify read2 input by `-I` or `--in2`, and specify read2 output by `-O` or `--out2`.; * if you don't specify the output file names, no output files will be written, but the
",False,
Modifiability,"er. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/rea",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38156,adapt,adapter,38156,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: er. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/rea
",True,"The text contains code parameters and command line options which are typically found in program documentation, API specifications, or configuration files. It includes syntax such as option descriptions (e.g., --filter_by_index1), parameter types (e.g., string [=]), and other programmatic elements that are not meaningful as standalone human-readable sentences."
Modifiability,"he percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The m",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12286,adapt,adapter,12286,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: he percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The m
",False,"The text includes multiple complete sentences discussing concepts and explaining features such as complexity threshold, adapters trimming, and their configurations. These are meaningful and human-readable explanations suitable for understanding the tool's functionality."
Modifiability,"inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13144,adapt,adapters,13144,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,3,['adapt'],"['adapter', 'adapters']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``
",False,
Modifiability,"ing implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an is",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12829,adapt,adapters,12829,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ing implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an is
",False,"The text contains detailed descriptions and explanations about adapters in the `fastp` tool, including how they work for both PE and SE data. It explains options and configurations available to users, which are meant to be read by humans to understand and utilize the tool effectively."
Modifiability,"litting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support re",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3505,adapt,adapters,3505,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: litting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support re
",False,"The text contains detailed descriptions and explanations of various processing steps in data analysis, including quality control measures. These are presented in a natural language format rather than code or logs. The content is meant to inform users about the methodology rather than provide executable instructions."
Modifiability,"ng `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14611,adapt,adapters,14611,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ng `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The trailing N bases are also trimmed. Use `cut_tail_window_size` to set the widnow size, and `cut_tail_mean_quality` to set 
",True,"The content consists primarily of programmatic descriptions, including code-like syntax (`--adapter_fasta`, `cut_front_mean_quality`, etc.), logs or API documentation."
Modifiability,ource); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low complexity filter](#low-complexity-filter); - [Other filter](#other-filter); - [adapters](#adapters); - [per read cutting by quality score](#per-read-cutting-by-quality-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations).,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:2076,adapt,adapters,2076,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ource); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low complexity filter](#low-complexity-filter); - [Other filter](#other-filter); - [adapters](#adapters); - [per read cutting by quality score](#per-read-cutting-by-quality-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations).
",False,
Modifiability,"ow quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13753,adapt,adapters,13753,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ow quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality
",False,
Modifiability,"r gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specif",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32112,adapt,adapter,32112,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: r gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specif
",False,"The text contains explanatory sentences about command-line options and their functions, such as '--stdin', '--stdout', '--fix_mgi_id', etc. These are meant to help users understand how the tool works rather than being code or logs."
Modifiability,"some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit` to discard the reads longer than `length_limit`. The default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:11898,adapt,adapters,11898,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapters'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: some applications like small RNA sequencing, you may want to discard the long reads. You can specify `--length_limit` to discard the reads longer than `length_limit`. The default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since 
",True,"The text contains code snippets and programmatic descriptions, such as command line options and filter configurations. It includes technical details that are more appropriate for a program's documentation rather than general human-readable content."
Modifiability,"y-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a sin",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3227,adapt,adapter,3227,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['adapt'],['adapter'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: y-score); - [base correction for PE data](#base-correction-for-pe-data); - [global trimming](#global-trimming); - [polyG tail trimming](#polyg-tail-trimming); - [polyX tail trimming](#polyx-tail-trimming); - [unique molecular identifier (UMI) processing](#unique-molecular-identifier-umi-processing); - [UMI example](#umi-example); - [output splitting](#output-splitting); - [splitting by limiting file number](#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a sin
",False,"The text includes detailed descriptions of processing steps, such as trimming, correcting mismatches, trimming polyG and polyX tails, handling UMIs, and reporting results in JSON format. These are all part of data preprocessing methods, which are meant to be implemented programmatically rather than being human-readable explanations."
Performance," step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `index2` the second index is used as UMI. PE data only, this UMI will be u",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:20689,perform,perform,20689,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['perform'],['perform'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI. If the data is PE, this UMI will be used for both read1/read2.; * `index2` the second index is used as UMI. PE data only, this UMI will be u
",False,"This text contains explanatory and descriptive content about polyG tail trimming, UMI processing, and their usage in Illumina sequencing. It includes sentences that are meaningful and written in natural language, discussing how features work and their implications for data analysis."
Performance,"SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads due to the low quality starting bases. Please be noted that `--cut_front` will interfere deduplication for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `. # base correction for PE data; `fastp` perform `overlap analysis` for PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.  . This function is not enabled by default, specify `-c` or `--correction` to enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # global trimming; `fastp` supports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run. For example, the last cycle of Illumina sequencing is uaually with",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:17122,perform,perform,17122,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['perform'],['perform'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads due to the low quality starting bases. Please be noted that `--cut_front` will interfere deduplication for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `. # base correction for PE data; `fastp` perform `overlap analysis` for PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.  . This function is not enabled by default, specify `-c` or `--correction` to enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # global trimming; `fastp` supports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run. For example, the last cycle of Illumina sequencing is uaually with
",True,The text is an API documentation or specifications describing various parameters and functions of the `fastp` tool.
Performance,[![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); [![install with conda](; https://anaconda.org/bioconda/fastp/badges/downloads.svg)](https://anaconda.org/bioconda/fastp); [![DebianBadge](; https://badges.debian.net/badges/debian/unstable/fastp/version.svg)](https://packages.debian.org/unstable/fastp); [![fastp ci](https://github.com/OpenGene/fastp/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/OpenGene/fastp/actions/workflows/ci.yml). # fastp; A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance.; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:691,perform,performance,691,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['perform'],['performance'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); [![install with conda](; https://anaconda.org/bioconda/fastp/badges/downloads.svg)](https://anaconda.org/bioconda/fastp); [![DebianBadge](; https://badges.debian.net/badges/debian/unstable/fastp/version.svg)](https://packages.debian.org/unstable/fastp); [![fastp ci](https://github.com/OpenGene/fastp/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/OpenGene/fastp/actions/workflows/ci.yml). # fastp; A tool designed to provide fast all-in-one preprocessing for FastQ files. This tool is developed in C++ with multithreading supported to afford high performance.; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl
",False,"The content consists of a mixture of markdown links and text. The links are for installation via conda and debian. There are also badges indicating CI workflows. The main text describes what fastp is, its features, usage examples, installation options, steps to build it, input/output, processing options, etc. It's a mix of explanatory and descriptive content that is readable by humans discussing concepts about the tool. While there are some formatting elements (like headers and links), the majority of the text is written in natural language explaining the tool."
Performance,"ng of FASTQ files (i.e. alignment in parallel), `fastp` supports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number` or `by limiting lines of each file`. These two modes cannot be enabled together.  . The file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1` or `--out2`, and the width of the prefix is controlled by the `-d` or `--split_prefix_digits` option. For example, `--split_prefix_digits=4`, `--out1=out.fq`, `--split=3`, then the output files will be `0001.out.fq`,`0002.out.fq`,`0003.out.fq`. ## splitting by limiting file number; Use `-s` or `--split` to specify how many files you want to have. `fastp` evaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number. ## splitting by limiting the lines of each file; Use `-S` or `--split_by_lines` to limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines` since `fastp` reads and writes data by blocks (a block = 1000 reads). # overrepresented sequence analysis; Overrepresented sequence analysis is disabled by default, you can specify `-p` or `--overrepresentation_analysis` to enable it. For consideration of speed and memory, `fastp` only counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ). By default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P` or `--overrepresentation_sampling` option. For example, if you set `-P 100`, only 1/100 reads will be used for counting, and if you set `-P 1`, all reads will be used but it w",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:24561,perform,performance,24561,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['perform'],['performance'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ng of FASTQ files (i.e. alignment in parallel), `fastp` supports splitting the output into multiple files. The splitting can work with two different modes: `by limiting file number` or `by limiting lines of each file`. These two modes cannot be enabled together.  . The file names of these split files will have a sequential number prefix, adding to the original file name specified by `--out1` or `--out2`, and the width of the prefix is controlled by the `-d` or `--split_prefix_digits` option. For example, `--split_prefix_digits=4`, `--out1=out.fq`, `--split=3`, then the output files will be `0001.out.fq`,`0002.out.fq`,`0003.out.fq`. ## splitting by limiting file number; Use `-s` or `--split` to specify how many files you want to have. `fastp` evaluates the read number of a FASTQ by reading its first ~1M reads. This evaluation is not accurate so the file sizes of the last several files can be a little differnt (a bit bigger or smaller). For best performance, it is suggested to specify the file number to be a multiple of the thread number. ## splitting by limiting the lines of each file; Use `-S` or `--split_by_lines` to limit the lines of each file. The last files may have smaller sizes since usually the input file cannot be perfectly divided. The actual file lines may be a little greater than the value specified by `--split_by_lines` since `fastp` reads and writes data by blocks (a block = 1000 reads). # overrepresented sequence analysis; Overrepresented sequence analysis is disabled by default, you can specify `-p` or `--overrepresentation_analysis` to enable it. For consideration of speed and memory, `fastp` only counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ). By default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P` or `--overrepresentation_sampling` option. For example, if you set `-P 100`, only 1/100 reads will be used for counting, and if you set `-P 1`, all reads will be used but it w
",False,"The text contains detailed explanations about the functionality of `fastp` tool in various aspects such as splitting FASTQ files, handling overrepresented sequences, and configuration options. The content is written in natural language, provides context and instructions for users, which makes it human-readable and meaningful."
Performance,"ze` to set the widnow size, and `cut_tail_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `TRAILING` method.; * `-r, --cut_right` move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use `cut_right_window_size` to set the widnow size, and `cut_right_mean_quality` to set the mean quality threshold. This is similar as the Trimmomatic `SLIDINGWINDOW` method. ***WARNING: all these three operations will interfere deduplication for SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads due to the low quality starting bases. Please be noted that `--cut_front` will interfere deduplication for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `. # base correction for PE data; `fastp` perform `overlap analysis` for PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.  . This function is not enabled b",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:16541,perform,performed,16541,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['perform'],['performed'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ze` to set the widnow size, and `cut_tail_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `TRAILING` method.; * `-r, --cut_right` move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use `cut_right_window_size` to set the widnow size, and `cut_right_mean_quality` to set the mean quality threshold. This is similar as the Trimmomatic `SLIDINGWINDOW` method. ***WARNING: all these three operations will interfere deduplication for SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads due to the low quality starting bases. Please be noted that `--cut_front` will interfere deduplication for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `. # base correction for PE data; `fastp` perform `overlap analysis` for PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.  . This function is not enabled b
",False,
Safety," 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you ca",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12402,detect,detected,12402,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detected'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you ca
",False,"The text contains descriptive explanations about adapter trimming options in a software tool. It includes instructions on how to disable adapter trimming and how different types of data (PE/SE) are handled with specific options. There are also details on when auto-detection might fail or be disabled. This is explanatory prose discussing the functionality and usage of the tool, making it human-readable and meaningful."
Safety," specify `--length_limit` to discard the reads longer than `length_limit`. The default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_f",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12051,detect,detected,12051,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detected'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  specify `--length_limit` to discard the reads longer than `length_limit`. The default value 0 means no limitation. ## low complexity filter; Low complexity filter is disabled by default, and you can enable it by `-y` or `--low_complexity_filter`. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_f
",True,"The text consists primarily of programmatic API descriptions and configuration settings, such as parameter lists and options for software tools."
Safety,"#splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved inpu",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:3554,detect,detected,3554,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detected'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: #splitting-by-limiting-file-number); - [splitting by limiting the lines of each file](#splitting-by-limiting-the-lines-of-each-file); - [overrepresented sequence analysis](#overrepresented-sequence-analysis); - [merge paired-end reads](#merge-paired-end-reads); - [duplication rate and deduplication](#duplication-rate-and-deduplication); - [duplication rate evaluation](#duplication-rate-evaluation); - [deduplication](#deduplication); - [all options](#all-options); - [citations](#citations). # features; 0. comprehensive quality profiling for both before and after filtering data (quality curves, base contents, KMER, Q20/Q30, GC Ratio, duplication, adapter contents...); 1. filter out bad reads (too low quality, too short, or too many N...); 2. cut low quality bases for per read in its 5' and 3' by evaluating the mean quality from a sliding window (like Trimmomatic but faster).; 3. trim all reads in front and tail; 4. cut adapters. Adapter sequences can be automatically detected, which means you don't have to input the adapter sequences to trim them.; 5. correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality; 6. trim polyG in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved inpu
",False,
Safety,").; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p,",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38280,detect,detect,38280,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detect'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p,
",True,"The text consists primarily of program options and parameters, which are typically associated with code or command-line arguments. It includes terms like 'filter_by_index1', '--correction', '--overlap_len_require', etc., which are indicative of a command line interface or configuration settings rather than meaningful human-readable content."
Safety,"CTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default i",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:14414,detect,detected,14414,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detected'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: CTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by quality score; `fastp` supports per read sliding window cutting by evaluating the mean quality scores in the sliding window. From `v0.19.6`, `fastp` supports 3 different operations, and you enable one or all of them:; * `-5, --cut_front` move a sliding window from front (5') to tail, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default is disabled. The leading N bases are also trimmed. Use `cut_front_window_size` to set the widnow size, and `cut_front_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `LEADING` method.; * `-3, --cut_tail` move a sliding window from tail (3') to front, drop the bases in the window if its mean quality is below cut_mean_quality, stop otherwise. Default i
",False,
Safety,"ality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:20313,detect,detect,20313,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detect'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two
",False,"The text contains complete, meaningful sentences in natural language explaining trimming processes and UMI processing."
Safety,"ans no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplication evaluation and deduplication; -D, --dedup enable deduplication to drop the duplicated reads/pairs; --dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0]); --dont_eval_duplication don't evaluate duplication rate to save time and use less memory. # polyG tail trimming, useful for NextSeq/NovaSeq data; -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; --poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10]); -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data. # polyX tail trimming; -x, --trim_poly_x enable polyX trimming in 3' ends.; --poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10]). # per read cutting by quality options; -5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.; -3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.; -r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.; -W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4]); -M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20]); --cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4]); --cut_front_mean_quality the mean quality requi",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:34412,detect,detect,34412,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detect'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ans no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplication evaluation and deduplication; -D, --dedup enable deduplication to drop the duplicated reads/pairs; --dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0]); --dont_eval_duplication don't evaluate duplication rate to save time and use less memory. # polyG tail trimming, useful for NextSeq/NovaSeq data; -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; --poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10]); -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data. # polyX tail trimming; -x, --trim_poly_x enable polyX trimming in 3' ends.; --poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10]). # per read cutting by quality options; -5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.; -3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.; -r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.; -W, --cut_window_size the window size option shared by cut_front, cut_tail or cut_sliding. Range: 1~1000, default: 4 (int [=4]); -M, --cut_mean_quality the mean quality requirement option shared by cut_front, cut_tail or cut_sliding. Range: 1~36 default: 20 (Q20) (int [=20]); --cut_front_window_size the window size option of cut_front, default to cut_window_size if not specified (int [=4]); --cut_front_mean_quality the mean quality requi
",True,"The text provided is a series of command-line options and parameters for a software tool. It includes various flags like -D, --dup_calc_accuracy, -g, --poly_g_min_len, etc. These are typically part of API documentation or programmatic descriptions, which should be filtered out as they consist primarily of code-like syntax and technical specifications."
Safety,"by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FAS",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12914,detect,detection,12914,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detection'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FAS
",False,"The content contains complete sentences discussing adapter sequences for the FastP tool, including explanations of how auto-detection works, parameter options, and usage recommendations. It is not primarily code or logs but rather explanatory text about software configuration."
Safety,"ch contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplicatio",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32594,detect,detection,32594,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detection'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ch contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplicatio
",True,"The text consists primarily of program options and parameters with their descriptions, which are typically found in API documentation or configuration files."
Safety,"d for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by qual",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13717,detect,detection,13717,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detection'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: d for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, then trims the adapters given by `--adapter_fasta` one by one. The sequence distribution of trimmed adapters can be found at the HTML/JSON reports. # per read cutting by qual
",False,"The text contains complete, meaningful sentences in natural language discussing how `fastp` trims adapters for reads and PE data, along with specific instructions on using parameters like `--adapter_sequence`, etc."
Safety,"efault for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:20564,detect,detect,20564,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detect'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: efault for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ctDNA sequencing. Commonly for Illumina platforms, UMIs can be integrated in two different places: `index` or head of `read`.  ; To enable UMI processing, you have to enable `-U` or `--umi` option in the command line, and specify `--umi_loc` to specify the UMI location, it can be one of:; * `index1` the first index is used as UMI
",True,"The text contains code snippets and programmatic descriptions, such as parameter lists, command line options, and technical details that are more suitable for API documentation or configuration files rather than human-readable prose."
Safety,"erged, `read1` passes filters but `read2` doesn't.; * `--unpaired2` will be the reads that cannot be merged, `read2` passes filters but `read1` doesn't.; * `--include_unmerged` can be enabled to make reads of `--out1`, `--out2`, `--unpaired1` and `--unpaired2` redirected to `--merged_out`. So you will get a single output file. This option is disabled by default. `--failed_out` can still be given to store the reads (either merged or unmerged) failed to passing filters. In the output file, a tag like `merged_xxx_yyy`will be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, `; @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`; means that 150bp are from read1, and 15bp are from read2. `fastp` prefers the bases in read1 since they usually have higher quality than read2. Same as the [base correction feature](#base-correction-for-pe-data), this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:27415,detect,detection,27415,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detection'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: erged, `read1` passes filters but `read2` doesn't.; * `--unpaired2` will be the reads that cannot be merged, `read2` passes filters but `read1` doesn't.; * `--include_unmerged` can be enabled to make reads of `--out1`, `--out2`, `--unpaired1` and `--unpaired2` redirected to `--merged_out`. So you will get a single output file. This option is disabled by default. `--failed_out` can still be given to store the reads (either merged or unmerged) failed to passing filters. In the output file, a tag like `merged_xxx_yyy`will be added to each read name to indicate that how many base pairs are from read1 and from read2, respectively. For example, `; @NB551106:9:H5Y5GBGX2:1:22306:18653:13119 1:N:0:GATCAG merged_150_15`; means that 150bp are from read1, and 15bp are from read2. `fastp` prefers the bases in read1 since they usually have higher quality than read2. Same as the [base correction feature](#base-correction-for-pe-data), this function is also based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the 
",True,The content consists primarily of API documentation and technical specifications.
Safety,"he percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The m",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:12326,detect,detection,12326,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detection'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: he percentage of base that is different from its next base (base[i] != base[i+1]). For example:; ```; # a 51-bp sequence, with 3 bases that is different from its next base; seq = 'AAAATTTTTTTTTTTTTTTTTTTTTGGGGGGGGGGGGGGGGGGGGGGCCCC'; complexity = 3/(51-1) = 6%; ```; The threshold for low complexity filter can be specified by `-Y` or `--complexity_threshold`. It's range should be `0~100`, and its default value is 30, which means 30% complexity is required. ## Other filter; New filters are being implemented. If you have a new idea or new request, please file an issue. # adapters; Adapter trimming is enabled by default, but you can disable it by `-A` or `--disable_adapter_trimming`. Adapter sequences can be automatically detected for both PE/SE data.; * For SE data, the adapters are evaluated by analyzing the tails of first ~1M reads. This evaluation may be inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The m
",False,
Safety,"ile lines may be a little greater than the value specified by `--split_by_lines` since `fastp` reads and writes data by blocks (a block = 1000 reads). # overrepresented sequence analysis; Overrepresented sequence analysis is disabled by default, you can specify `-p` or `--overrepresentation_analysis` to enable it. For consideration of speed and memory, `fastp` only counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ). By default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P` or `--overrepresentation_sampling` option. For example, if you set `-P 100`, only 1/100 reads will be used for counting, and if you set `-P 1`, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy. `fastp` not only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found. # merge paired-end reads; For paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge` option. In this `merging` mode:. * `--merged_out` shouuld be given to specify the file to store merged reads, otherwise you should enable `--stdout` to stream the merged reads to STDOUT. The merged reads are also filtered.; * `--out1` and `--out2` will be the reads that cannot be merged successfully, but both pass all the filters.; * `--unpaired1` will be the reads that cannot be merged, `read1` passes filters but `read2` doesn't.; * `--unpaired2` will be the reads that cannot be merged, `read2` passes filters but `read1` doesn't.; * `--include_unmerged` can be enabled to make reads of `--out1`, `--out2`, `--unpaired1` and `--unpaired2` redirected to `--merged_out`. So you will get a single output file. This option is disabled by default. `--failed_out` can still be given to store the reads (either merged or unm",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:25845,detect,detected,25845,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detected'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ile lines may be a little greater than the value specified by `--split_by_lines` since `fastp` reads and writes data by blocks (a block = 1000 reads). # overrepresented sequence analysis; Overrepresented sequence analysis is disabled by default, you can specify `-p` or `--overrepresentation_analysis` to enable it. For consideration of speed and memory, `fastp` only counts sequences with length of 10bp, 20bp, 40bp, 100bp or (cycles - 2 ). By default, fastp uses 1/20 reads for sequence counting, and you can change this settings by specifying `-P` or `--overrepresentation_sampling` option. For example, if you set `-P 100`, only 1/100 reads will be used for counting, and if you set `-P 1`, all reads will be used but it will be extremely slow. The default value 20 is a balance of speed and accuracy. `fastp` not only gives the counts of overrepresented sequence, but also gives the information that how they distribute over cycles. A figure is provided for each detected overrepresented sequence, from which you can know where this sequence is mostly found. # merge paired-end reads; For paired-end (PE) input, fastp supports stiching them by specifying the `-m/--merge` option. In this `merging` mode:. * `--merged_out` shouuld be given to specify the file to store merged reads, otherwise you should enable `--stdout` to stream the merged reads to STDOUT. The merged reads are also filtered.; * `--out1` and `--out2` will be the reads that cannot be merged successfully, but both pass all the filters.; * `--unpaired1` will be the reads that cannot be merged, `read1` passes filters but `read2` doesn't.; * `--unpaired2` will be the reads that cannot be merged, `read2` passes filters but `read1` doesn't.; * `--include_unmerged` can be enabled to make reads of `--out1`, `--out2`, `--unpaired1` and `--unpaired2` redirected to `--merged_out`. So you will get a single output file. This option is disabled by default. `--failed_out` can still be given to store the reads (either merged or unm
",False,
Safety,"imitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplication evaluation and deduplication; -D, --dedup enable deduplication to drop the duplicated reads/pairs; --dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0]); --dont_eval_duplication don't evaluate duplication rate to save time and use less memory. # polyG tail trimming, useful for NextSeq/NovaSeq data; -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; --poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10]); -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data. # polyX tail trimming; -x, --trim_poly_x enable polyX trimming in 3' ends.; --poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10]). # per read cutting by quality options; -5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.; -3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.; -r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.; -W, --cut_window_size the window size opti",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:34103,detect,detect,34103,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detect'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: imitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specified, it will follow read1's settings (int [=0]); -T, --trim_tail2 trimming how many bases in tail for read2. If it's not specified, it will follow read1's settings (int [=0]); -B, --max_len2 if read2 is longer than max_len2, then trim read2 at its tail to make it as long as max_len2. Default 0 means no limitation. If it's not specified, it will follow read1's settings (int [=0]). # duplication evaluation and deduplication; -D, --dedup enable deduplication to drop the duplicated reads/pairs; --dup_calc_accuracy accuracy level to calculate duplication (1~6), higher level uses more memory (1G, 2G, 4G, 8G, 16G, 24G). Default 1 for no-dedup mode, and 3 for dedup mode. (int [=0]); --dont_eval_duplication don't evaluate duplication rate to save time and use less memory. # polyG tail trimming, useful for NextSeq/NovaSeq data; -g, --trim_poly_g force polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data; --poly_g_min_len the minimum length to detect polyG in the read tail. 10 by default. (int [=10]); -G, --disable_trim_poly_g disable polyG tail trimming, by default trimming is automatically enabled for Illumina NextSeq/NovaSeq data. # polyX tail trimming; -x, --trim_poly_x enable polyX trimming in 3' ends.; --poly_x_min_len the minimum length to detect polyX in the read tail. 10 by default. (int [=10]). # per read cutting by quality options; -5, --cut_front move a sliding window from front (5') to tail, drop the bases in the window if its mean quality < threshold, stop otherwise.; -3, --cut_tail move a sliding window from tail (3') to front, drop the bases in the window if its mean quality < threshold, stop otherwise.; -r, --cut_right move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop.; -W, --cut_window_size the window size opti
",False,"The text contains detailed descriptions of command line options for a program. It explains each option's purpose, defaults, and behavior when not specified. This is more about programmatic usage rather than human-readable content."
Safety,"inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13176,detect,detection,13176,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detection'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: inacurrate, and you can specify the adapter sequence by `-a` or `--adapter_sequence` option. If adapter sequence is specified, the auto detection for SE data will be disabled.; * For PE data, the adapters can be detected by per-read overlap analysis, which seeks for the overlap of each pair of reads. This method is robust and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ``
",False,
Safety,"length_limit will be discarded, default 0 means no limitation. (int [=0]). # low complexity filtering; -y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline wi",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38068,detect,detect,38068,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detect'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: length_limit will be discarded, default 0 means no limitation. (int [=0]). # low complexity filtering; -y, --low_complexity_filter enable low complexity filter. The complexity is defined as the percentage of base that is different from its next base (base[i] != base[i+1]).; -Y, --complexity_threshold the threshold for low complexity filter (0~100). Default is 30, which means 30% complexity is required. (int [=30]). # filter reads with unwanted indexes (to remove possible contamination); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline wi
",True,The text contains API documentation and parameter specifications which are likely to be programmatic.
Safety,"o make it as long as `--max_len1`. Please note that the trimming for `--max_len` limitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:; ```; 1, UMI preprocessing (--umi); 2, global trimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mR",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:19934,detect,detect,19934,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detect'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: o make it as long as `--max_len1`. Please note that the trimming for `--max_len` limitation will be applied at the last step. Following are fastp's processing steps that may orderly affect the read lengthes:; ```; 1, UMI preprocessing (--umi); 2, global trimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mR
",False,
Safety,"on for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `. # base correction for PE data; `fastp` perform `overlap analysis` for PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.  . This function is not enabled by default, specify `-c` or `--correction` to enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # global trimming; `fastp` supports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run. For example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1` or `--trim_tail1=1` option. * For read1 or SE data, the front/tail trimming settings are given with `-f, --trim_front1` and `-t, --trim_tail1`.; * For read2 of PE data, the front/tail trimming settings are given with `-F, --trim_front2` and `-T, --trim_tail2`. But if these options are not specified, they will be as same as read1 options, which means `trim_front2 = trim_front1` and `trim_tail2 = trim_tail1`.; * If you want to trim the reads to maximum length, you can specify `-b, --max_len1` for read1, and `",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:17648,detect,detection,17648,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detection'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: on for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `. # base correction for PE data; `fastp` perform `overlap analysis` for PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.  . This function is not enabled by default, specify `-c` or `--correction` to enable it. This function is based on overlapping detection, which has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # global trimming; `fastp` supports global trimming, which means trim all reads in the front or the tail. This function is useful since sometimes you want to drop some cycles of a sequencing run. For example, the last cycle of Illumina sequencing is uaually with low quality, and it can be dropped with `-t 1` or `--trim_tail1=1` option. * For read1 or SE data, the front/tail trimming settings are given with `-f, --trim_front1` and `-t, --trim_tail1`.; * For read2 of PE data, the front/tail trimming settings are given with `-F, --trim_front2` and `-T, --trim_tail2`. But if these options are not specified, they will be as same as read1 options, which means `trim_front2 = trim_front1` and `trim_tail2 = trim_tail1`.; * If you want to trim the reads to maximum length, you can specify `-b, --max_len1` for read1, and `
",False,
Safety,"on); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smal",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:38502,detect,detect,38502,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detect'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: on); --filter_by_index1 specify a file contains a list of barcodes of index1 to be filtered out, one barcode per line (string [=]); --filter_by_index2 specify a file contains a list of barcodes of index2 to be filtered out, one barcode per line (string [=]); --filter_by_index_threshold the allowed difference of index barcode for index filtering, default 0 means completely identical. (int [=0]). # base correction by overlap analysis options; -c, --correction enable base correction in overlapped regions (only for PE data), default is disabled; --overlap_len_require the minimum length to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 30 by default. (int [=30]); --overlap_diff_limit the maximum number of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. 5 by default. (int [=5]); --overlap_diff_percent_limit the maximum percentage of mismatched bases to detect overlapped region of PE reads. This will affect overlap analysis based PE merge, adapter trimming and correction. Default 20 means 20%. (int [=20]). # UMI processing; -U, --umi enable unique molecular identifier (UMI) preprocessing; --umi_loc specify the location of UMI, can be (index1/index2/read1/read2/per_index/per_read, default is none (string [=]); --umi_len if the UMI is in read1/read2, its length should be provided (int [=0]); --umi_prefix if specified, an underline will be used to connect prefix and UMI (i.e. prefix=UMI, UMI=AATTCG, final=UMI_AATTCG). No prefix by default (string [=]); --umi_skip if the UMI is in read1/read2, fastp can skip several bases following UMI, default is 0 (int [=0]). # overrepresented sequence analysis; -p, --overrepresentation_analysis enable overrepresented sequence analysis.; -P, --overrepresentation_sampling One in (--overrepresentation_sampling) reads will be computed for overrepresentation analysis (1~10000), smal
",True,"The text contains a series of command line arguments and parameters with their descriptions, which are typically part of API documentation or program specifications. This includes options like --filter_by_index1, --filter_by_index2, etc., along with their default values and explanations. The structure resembles that of configuration files or build system outputs, where detailed parameters are listed for specific functionalities. Additionally, the presence of terms like 'int [=0]' and 'string [=]' indicates a programmatic setup, often seen in API docs or command line parameter listings."
Safety,"r gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specif",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:32133,detect,detected,32133,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detected'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: r gzip output (1 ~ 9). 1 is fastest, 9 is smallest, default is 4. (int [=4]); --stdin input from STDIN. If the STDIN is interleaved paired-end FASTQ, please also add --interleaved_in.; --stdout output passing-filters reads to STDOUT. This option will result in interleaved FASTQ output for paired-end input. Disabled by default.; --interleaved_in indicate that <in1> is an interleaved FASTQ which contains both read1 and read2. Disabled by default.; --reads_to_process specify how many reads/pairs to be processed. Default 0 means process all reads. (int [=0]); --dont_overwrite don't overwrite existing files. Overwritting is allowed by default.; --fix_mgi_id the MGI FASTQ ID format is not compatible with many BAM operation tools, enable this option to fix it. # adapter trimming options; -A, --disable_adapter_trimming adapter trimming is enabled by default. If this option is specified, adapter trimming is disabled; -a, --adapter_sequence the adapter for read1. For SE data, if not specified, the adapter will be auto-detected. For PE data, this is used if R1/R2 are found not overlapped. (string [=auto]); --adapter_sequence_r2 the adapter for read2 (PE data only). This is used if R1/R2 are found not overlapped. If not specified, it will be the same as <adapter_sequence> (string [=]); --adapter_fasta specify a FASTA file to trim both read1 and read2 (if PE) by all the sequences in this FASTA file (string [=]); --detect_adapter_for_pe by default, the adapter sequence auto-detection is enabled for SE data only, turn on this option to enable it for PE data. # global trimming options; -f, --trim_front1 trimming how many bases in front for read1, default is 0 (int [=0]); -t, --trim_tail1 trimming how many bases in tail for read1, default is 0 (int [=0]); -b, --max_len1 if read1 is longer than max_len1, then trim read1 at its tail to make it as long as max_len1. Default 0 means no limitation (int [=0]); -F, --trim_front2 trimming how many bases in front for read2. If it's not specif
",False,"The text contains a mixture of command-line options and explanations, which is primarily descriptive rather than code or logs."
Safety,"rimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:20194,detect,detected,20194,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detected'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: rimming at front (--trim_front); 3, global trimming at tail (--trim_tail); 4, quality pruning at 5' (--cut_front); 5, quality pruning by sliding window (--cut_right); 6, quality pruning at 3' (--cut_tail); 7, trim polyG (--trim_poly_g, enabled by default for NovaSeq/NextSeq data); 8, trim adapter by overlap analysis (enabled by default for PE data); 9, trim adapter by adapter sequence (--adapter_sequence, --adapter_sequence_r2. For PE data, this step is skipped if last step succeeded); 10, trim polyX (--trim_poly_x); 11, trim to max length (---max_len); ```. # polyG tail trimming; For Illumina NextSeq/NovaSeq data, `polyG` can happen in read tails since `G` means no signal in the Illumina two-color systems. `fastp` can detect the polyG in read tails and trim them. This feature is enabled for NextSeq/NovaSeq data by default, and you can specify `-g` or `--trim_poly_g` to enable it for any data, or specify `-G` or `--disable_trim_poly_g` to disable it. NextSeq/NovaSeq data is detected by the machine ID in the FASTQ records.  . A minimum length can be set with `<poly_g_min_len>` for `fastp` to detect polyG. This value is 10 by default. # polyX tail trimming; This feature is similar as polyG tail trimming, but is disabled by default. Use `-x` or `--trim_poly_x` to enable it. A minimum length can be set with `<poly_x_min_len>` for `fastp` to detect polyX. This value is 10 by default. When `polyG tail trimming` and `polyX tail trimming` are both enabled, fastp will perform `polyG trimming` first, then perform `polyX trimming`. This setting is useful for trimming the tails having `polyX (i.e. polyA) ` before `polyG`. `polyG` is usually caused by sequencing artifacts, while `polyA` can be commonly found from the tails of mRNA-Seq reads. # unique molecular identifier (UMI) processing; UMI is useful for duplication elimination and error correction based on generating consensus of reads originated from a same DNA fragment. It's usually used in deep sequencing applications like 
",False,
Safety,"st and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:13583,detect,detection,13583,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['detect'],['detection'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: st and fast, so normally you don't have to input the adapter sequence even you know it. But you can still specify the adapter sequences for read1 by `--adapter_sequence`, and for read2 by `--adapter_sequence_r2`. If `fastp` fails to find an overlap (i.e. due to low quality bases), it will use these sequences to trim adapters for read1 and read2 respectively.; * For PE data, the adapter sequence auto-detection is disabled by default since the adapters can be trimmed by overlap analysis. However, you can specify `--detect_adapter_for_pe` to enable it.; * For PE data, `fastp` will run a little slower if you specify the sequence adapters or enable adapter auto-detection, but usually result in a slightly cleaner output, since the overlap analysis may fail due to sequencing errors or adapter dimers.; * The most widely used adapter is the Illumina TruSeq adapters. If your data is from the TruSeq library, you can add `--adapter_sequence=AGATCGGAAGAGCACACGTCTGAACTCCAGTCA --adapter_sequence_r2=AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT` to your command lines, or enable auto detection for PE data by specifing `detect_adapter_for_pe`.; * `fastp` contains some built-in known adapter sequences for better auto-detection. If you want to make some adapters to be a part of the built-in adapters, please file an issue. You can also specify `--adapter_fasta` to give a FASTA file to tell `fastp` to trim multiple adapters in this FASTA file. Here is a sample of such adapter FASTA file:; ```; >Illumina TruSeq Adapter Read 1; AGATCGGAAGAGCACACGTCTGAACTCCAGTCA; >Illumina TruSeq Adapter Read 2; AGATCGGAAGAGCGTCGTGTAGGGAAAGAGTGT; >polyA; AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA; ```. The adapter sequence in this file should be at least 6bp long, otherwise it will be skipped. And you can give whatever you want to trim, rather than regular sequencing adapters (i.e. polyA). `fastp` first trims the auto-detected adapter or the adapter sequences given by `--adapter_sequence | --adapter_sequence_r2`, 
",False,
Safety,"ze` to set the widnow size, and `cut_tail_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `TRAILING` method.; * `-r, --cut_right` move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use `cut_right_window_size` to set the widnow size, and `cut_right_mean_quality` to set the mean quality threshold. This is similar as the Trimmomatic `SLIDINGWINDOW` method. ***WARNING: all these three operations will interfere deduplication for SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads due to the low quality starting bases. Please be noted that `--cut_front` will interfere deduplication for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `. # base correction for PE data; `fastp` perform `overlap analysis` for PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.  . This function is not enabled b",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:16581,avoid,avoid,16581,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['avoid'],['avoid'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ze` to set the widnow size, and `cut_tail_mean_quality` to set the mean quality threshold. If the window size is 1, this is similar as the Trimmomatic `TRAILING` method.; * `-r, --cut_right` move a sliding window from front to tail, if meet one window with mean quality < threshold, drop the bases in the window and the right part, and then stop. Use `cut_right_window_size` to set the widnow size, and `cut_right_mean_quality` to set the mean quality threshold. This is similar as the Trimmomatic `SLIDINGWINDOW` method. ***WARNING: all these three operations will interfere deduplication for SE data, and `--cut_front` or `--cut_right` may also interfere deduplication for PE data. The deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs.***. If `--cut_right` is enabled, then there is no need to enable `--cut_tail`, since the former is more aggressive. If `--cut_right` is enabled together with `--cut_front`, `--cut_front` will be performed first before `--cut_right` to avoid dropping whole reads due to the low quality starting bases. Please be noted that `--cut_front` will interfere deduplication for both PE/SE data, and `--cut_tail` will interfere deduplication for SE data, since the deduplication algorithms rely on the exact matchment of coordination regions of the grouped reads/pairs. If you don't set window size and mean quality threshold for these function respectively, `fastp` will use the values from `-W, --cut_window_size` and `-M, --cut_mean_quality `. # base correction for PE data; `fastp` perform `overlap analysis` for PE data, which try to find an overlap of each pair of reads. If an proper overlap is found, it can correct mismatched base pairs in overlapped regions of paired end reads, if one base is with high quality while the other is with ultra low quality. If a base is corrected, the quality of its paired base will be assigned to it so that they will share the same quality.  . This function is not enabled b
",False,
Security,"1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled, the `dup_calc_accuracy` level is default to `3`, and it can be changed to any value of 1 ~ 6. # all options; ```shell; usage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]; options:; # I/O options; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); --unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=]); --unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:28951,hash,hash,28951,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['hash'],['hash'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled, the `dup_calc_accuracy` level is default to `3`, and it can be changed to any value of 1 ~ 6. # all options; ```shell; usage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]; options:; # I/O options; -i, --in1 read1 input file name (string); -o, --out1 read1 output file name (string [=]); -I, --in2 read2 input file name (string [=]); -O, --out2 read2 output file name (string [=]); --unpaired1 for PE input, if read1 passed QC but read2 not, it will be written to unpaired1. Default is to discard it. (string [=]); --unpaired2 for PE input, if read2 passed QC but read1 not, it will be written to unpaired2. If --unpaired2 is same as --unpaired1 (default 
",False,
Security,"default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled, the `dup_calc_accuracy` level is default to `3`, and",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:28479,hash,hash,28479,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['hash'],['hash'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled, the `dup_calc_accuracy` level is default to `3`, and
",True,"The provided text consists primarily of programmatic API description, parameter lists, error messages, and code-related content."
Security,"hich has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled,",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:28411,hash,hash,28411,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['hash'],['hash'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: hich has adjustable parameters `overlap_len_require (default 30)`, `overlap_diff_limit (default 5)` and `overlap_diff_percent_limit (default 20%)`. Please note that the reads should meet these three conditions simultaneously. # duplication rate and deduplication; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled,
",False,
Security,"n; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled, the `dup_calc_accuracy` level is default to `3`, and it can be changed to any value of 1 ~ 6. # all options; ```shell; usage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]; options:; # I/O options; -i, --in1 read1 input file name (string); -o, --o",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:28703,hash,hash,28703,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['hash'],['hash'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: n; For both SE and PE data, fastp supports evaluating its duplication rate and removing duplicated reads/pairs. fastp considers one read as duplicated only if its all base pairs are identical as another one. This meas if there is a sequencing error or an N base, the read will not be treated as duplicated. ## duplication rate evaluation; By default, fastp evaluates duplication rate, and this module may use 1G memory and take 10% ~ 20% more running time. If you don't need the duplication rate information, you can set `--dont_eval_duplication` to disable the duplication evaluation. But please be noted that, if deduplication (`--dedup`) option is enabled, then `--dont_eval_duplication` option is ignored. fastp uses a hash algorithm to find the identical sequences. Due to the possible hash collision, about 0.01% of the total reads may be wrongly recognized as deduplicated reads. Normally this may not impact the downstream analysis. The accuracy of calculating duplication can be improved by increasing the hash buffer number or enlarge the buffer size. The option `--dup_calc_accuracy` can be used to specify the level (1 ~ 6). The higher level means more memory usage and more running time. Please refer to following table:. | dup_calc_accuracy level | hash buffer number | buffer size | memory usage | speed | |; |- | - | - | - | - | - |; | 1 | 1 | 1G | 1G | ultra-fast | default for no-dedup mode |; | 2 | 1 | 2G | 2G | fast | |; | 3 | 2 | 2G | 4G | fast | default for dedup|; | 4 | 2 | 4G | 8G | fast | |; | 5 | 2 | 8G | 12G | fast | |; | 6 | 3 | 8G | 24G | moderate | |. ## deduplication; Since `v0.22.0`, fastp supports deduplication for FASTQ data. Specify `-D` or `--dedup` to enable this option. When `--dedup` is enabled, the `dup_calc_accuracy` level is default to `3`, and it can be changed to any value of 1 ~ 6. # all options; ```shell; usage: fastp -i <in1> -o <out1> [-I <in1> -O <out2>] [options...]; options:; # I/O options; -i, --in1 read1 input file name (string); -o, --o
",False,
Testability," 15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdefl",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:5699,test,tested,5699,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['test'],['tested'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content:  15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; chmod a+x ./fastp. # or download specified version, i.e. fastp v0.23.1; wget http://opengene.org/fastp/fastp.0.23.1; mv fastp.0.23.1 fastp; chmod a+x ./fastp; ```; ## or compile from source; `fastp` depends on `libdeflate` and `libisal`, while `libisal` is not compatible with gcc 4.8. If you use gcc 4.8, your fastp will fail to run. Please upgrade your gcc before you build the libraries and fastp. ### Step 1: download and build libisal; See https://github.com/intel/isa-l; `autoconf`, `automake`, `libtools`, `nasm (>=v2.11.01)` and `yasm (>=1.2.0)` are required to build this isal; ```shell; git clone https://github.com/intel/isa-l.git; cd isa-l; ./autogen.sh; ./configure --prefix=/usr --libdir=/usr/lib64; make; sudo make install; ```. ### step 2: download and build libdeflate; See https://github.com/ebiggers/libdefl
",False,"The text contains multiple code snippets, shell commands, and installation instructions, which are programming-related. However, it also includes descriptive text about the tool (such as usage examples, reports, and downloading options). The content is a mix of informative sentences and programmatic instructions."
Usability,; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl,MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:752,simpl,simple,752,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,2,['simpl'],"['simple', 'simple-usage']","You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: ; - [fastp](#fastp); - [features](#features); - [simple usage](#simple-usage); - [examples of report](#examples-of-report); - [get fastp](#get-fastp); - [install with Bioconda](#install-with-bioconda); - [or download the latest prebuilt binary for Linux users](#or-download-the-latest-prebuilt-binary-for-linux-users); - [or compile from source](#or-compile-from-source); - [Step 1: download and build libisal](#step-1-download-and-build-libisal); - [step 2: download and build libdeflate](#step-2-download-and-build-libdeflate); - [Step 3: download and build fastp](#step-3-download-and-build-fastp); - [input and output](#input-and-output); - [output to STDOUT](#output-to-stdout); - [input from STDIN](#input-from-stdin); - [store the unpaired reads for PE data](#store-the-unpaired-reads-for-pe-data); - [store the reads that fail the filters](#store-the-reads-that-fail-the-filters); - [process only part of the data](#process-only-part-of-the-data); - [do not overwrite exiting files](#do-not-overwrite-exiting-files); - [split the output to multiple files for parallel processing](#split-the-output-to-multiple-files-for-parallel-processing); - [merge PE reads](#merge-pe-reads); - [filtering](#filtering); - [quality filter](#quality-filter); - [length filter](#length-filter); - [low compl
",False,"The text contains a list of sections such as 'fastp', 'features', 'simple usage', etc. These are likely navigation links or headings in a documentation page. They do not consist of code snippets, logs, API docs, or other programmatic content. Instead, they appear to be descriptive and explanatory, guiding the user through different parts of the documentation. Therefore, this text should not be eliminated."
Usability,"G in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved input; 14. support ultra-fast FASTQ-level deduplication; 15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; ",MatchSource.DOCS,OpenGene,fastp,v0.23.4,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md:4767,simpl,simple,4767,README.md,,https://github.com/OpenGene/fastp/tree/v0.23.4/README.md,1,['simpl'],['simple'],"You are an expert in analyzing and categorizing text content. Your task is to evaluate whether the given text contains meaningful human-readable sentences or if it consists primarily of logs, code samples, or programmatic API description that should be filtered out.

For each input text, analyze it and determine:
1. Whether it should be eliminated (true/false)
2. The reason for elimination (if applicable)

Evaluation criteria:
- Eliminate text that consists primarily of:
  * Code snippets or samples (marked by syntax, keywords like ""if/else"", brackets, etc.)
  * Program logs or error messages (timestamps, error codes, stack traces)
  * API documentation or specifications (parameter lists, return types)
  * Configuration files or build system output
  * Version control metadata or comments
  * Compiler/interpreter output or warnings
- Keep text that contains:
  * Complete, meaningful sentences in natural language
  * Explanatory or descriptive content
  * Human-written prose discussing concepts or ideas

Content: G in 3' ends, which is commonly seen in NovaSeq/NextSeq data. Trim polyX in 3' ends to remove unwanted polyX tailing (i.e. polyA tailing for mRNA-Seq data); 7. preprocess unique molecular identifier (UMI) enabled data, shift UMI to sequence name.; 8. report JSON format result for further interpreting.; 9. visualize quality control and filtering results on a single HTML page (like FASTQC but faster and more informative).; 10. split the output to multiple files (0001.R1.gz, 0002.R1.gz...) to support parallel processing. Two modes can be used, limiting the total split file number, or limitting the lines of each split file.; 11. support long reads (data from PacBio / Nanopore devices).; 12. support reading from STDIN and writing to STDOUT; 13. support interleaved input; 14. support ultra-fast FASTQ-level deduplication; 15. ... If you find a bug or have additional requirement for `fastp`, please file an issue:https://github.com/OpenGene/fastp/issues/new. # simple usage; * for single end data (not compressed); ```; fastp -i in.fq -o out.fq; ```; * for paired end data (gzip compressed); ```; fastp -i in.R1.fq.gz -I in.R2.fq.gz -o out.R1.fq.gz -O out.R2.fq.gz; ```; By default, the HTML report is saved to `fastp.html` (can be specified with `-h` option), and the JSON report is saved to `fastp.json` (can be specified with `-j` option). # examples of report; `fastp` creates reports in both HTML and JSON format.; * HTML report: http://opengene.org/fastp/fastp.html; * JSON report: http://opengene.org/fastp/fastp.json. # get fastp; ## install with Bioconda; [![install with conda](; https://anaconda.org/bioconda/fastp/badges/version.svg)](https://anaconda.org/bioconda/fastp); ```shell; # note: the fastp version in bioconda may be not the latest; conda install -c bioconda fastp; ```; ## or download the latest prebuilt binary for Linux users; This binary was compiled on CentOS, and tested on CentOS/Ubuntu; ```shell; # download the latest build; wget http://opengene.org/fastp/fastp; 
",False,
