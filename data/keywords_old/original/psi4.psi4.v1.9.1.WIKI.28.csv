id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://psicode.org/psi4manual/1.3.2/psithoninput.html:8304,Modifiability,variab,variables,8304,"is Sets; Inputting effective core potentials (ECPs). PSI Variables¶; To harness the power of Python, PSI4 makes the most pertinent results; of each computation available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of; H2 and H atom:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h {; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol * (2*h_energy - h2_energy); print ""De=%f"" % D_e. The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module, and PSI Variables by Alpha defines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation fun",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:8727,Modifiability,variab,variables,8727,"ence rhf; h2_energy = energy('scf'). molecule h {; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol * (2*h_energy - h2_energy); print ""De=%f"" % D_e. The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module, and PSI Variables by Alpha defines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:8887,Modifiability,variab,variables,8887,"""De=%f"" % D_e. The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module, and PSI Variables by Alpha defines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = f",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:9206,Modifiability,variab,variables,9206," multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module, and PSI Variables by Alpha defines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:11214,Modifiability,variab,variable,11214," 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; 1; 2; 3; 4basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their b",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:11337,Modifiability,variab,variable,11337,"; G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; 1; 2; 3; 4basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4 for analogous Z-matrix; and Cartiesian scans. Tables of Results¶; The results of computations c",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:11948,Modifiability,variab,variable,11948,"y('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4 for analogous Z-matrix; and Cartiesian scans. Tables of Results¶; The results of computations can be compactly tabulated with the Table() Psithon; function. For example, in the following potential energy surface scan for water; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27molecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(100,102,2). table=Table(rows=[""R"",""A""], cols=[""E(SCF)"",""E(SCS)"",""E(DFMP2)""]). set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edf",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:12014,Modifiability,variab,variables,12014,"y('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4 for analogous Z-matrix; and Cartiesian scans. Tables of Results¶; The results of computations can be compactly tabulated with the Table() Psithon; function. For example, in the following potential energy surface scan for water; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27molecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(100,102,2). table=Table(rows=[""R"",""A""], cols=[""E(SCF)"",""E(SCS)"",""E(DFMP2)""]). set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edf",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:194,Performance,perform,performed,194,"﻿. Psithon: Structuring an Input File. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:335,Performance,perform,performed,335,"﻿. Psithon: Structuring an Input File. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:946,Performance,perform,performing,946,"﻿. Psithon: Structuring an Input File. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:1463,Performance,load,loaded,1463,"ed for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the memory keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to PSI4:; 1; 2; 3; 4; 5; 6; 7# all equivalent. memory 2 GB. memory 2000 MB. memory 2000000 kB. Please note that memory can be speci",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:1513,Performance,load,loaded,1513,".; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the memory keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to PSI4:; 1; 2; 3; 4; 5; 6; 7# all equivalent. memory 2 GB. memory 2000 MB. memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). PSI4 recognizes and ob",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:2099,Performance,perform,perform,2099," For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the memory keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to PSI4:; 1; 2; 3; 4; 5; 6; 7# all equivalent. memory 2 GB. memory 2000 MB. memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). PSI4 recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB).; By default, PSI4 performs a “sanity check” when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check by directly setting the number of bytes availble to PSI4:; 1; 2# setting available memory to 2 MB; set_memory_bytes(2000000). Please note that this memory setting only governs the maximal memory; usage of the major data structures, and actual total me",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:2636,Performance,perform,performs,2636,"omatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the memory keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to PSI4:; 1; 2; 3; 4; 5; 6; 7# all equivalent. memory 2 GB. memory 2000 MB. memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). PSI4 recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB).; By default, PSI4 performs a “sanity check” when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check by directly setting the number of bytes availble to PSI4:; 1; 2# setting available memory to 2 MB; set_memory_bytes(2000000). Please note that this memory setting only governs the maximal memory; usage of the major data structures, and actual total memory usage; is slightly higher. This is usually a negligible amount, except when; setting tiny memory allowances.; One convenient way to override the PSI4 default memory is to place a; memory command in the ~/.psi4rc file (Sec. ~/.psi4rc File). For example,; the following makes the default memory 2 GB.; 1set_memory(2000000000). However, unless you’re assured of having only one job running on a node at; a time (and all nodes on the filesystem with ~/.psi4rc have similar memory; capacities), it is advised to set memory in the input file on a; per-calculation basis.; That same command can be used ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:4236,Performance,perform,perform,4236,"efault memory is to place a; memory command in the ~/.psi4rc file (Sec. ~/.psi4rc File). For example,; the following makes the default memory 2 GB.; 1set_memory(2000000000). However, unless you’re assured of having only one job running on a node at; a time (and all nodes on the filesystem with ~/.psi4rc have similar memory; capacities), it is advised to set memory in the input file on a; per-calculation basis.; That same command can be used for PsiAPI mode:; 1psi4.set_memory(int(5e8)). Note; For parallel jobs, the memory keyword represents the total memory; available to the job, not the memory per thread. Molecule and Geometry Specification¶. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. To add EFP fragments to a molecule, see Molecule Specification. Job Control Keywords¶; PSI4 comprises a number of C++ modules that each perform; specific tasks and are callable directly from the Python front end. Each module; recognizes specific keywords in the input file which control its function.; These keywords are detailed in Appendix Keywords by Module.; The keywords can be made global, or scoped to apply to; certain specific modules. The following examples demonstrate some of the ways; that global keywords can be specified:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21# all equivalent. set globals basis cc-pVDZ. set basis cc-pVDZ. set globals basis = cc-pVDZ. set basis = cc-pVDZ. set globals{; basis cc-pVDZ; }. set {; basis cc-pVDZ; }. set {; basis = cc-pVDZ; }. Note the lack of quotes around cc-pVDZ, even though it is a string. The; Psithon preprocessor automatically wraps any string values in set commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords:; 1; 2; 3; 4; 5set {; basis = cc-pVDZ; print = 1; reference = rhf; }. For argume",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:6072,Performance,perform,performs,6072," commands in; strings. The last three examples provide a more convenient way for specifying; multiple keywords:; 1; 2; 3; 4; 5set {; basis = cc-pVDZ; print = 1; reference = rhf; }. For arguments that require an array input, standard Python list syntax should; be used, viz.:; 1; 2; 3set {; docc = [3, 0, 1, 1]; }. List/matrix inputs may span multiple lines, as long as the opening [ is; on the same line as the name of the keyword.; Any of the above keyword specifications can be scoped to individual modules,; by adding the name of the module after the set keyword. Omitting the module; name, or using the name global or globals will result in the keyword being; applied to all modules. For example, in the following input; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule{; o; h 1 roh; h 1 roh 2 ahoh. roh = 0.957; ahoh = 104.5; }. set basis cc-pVDZ; set ccenergy print 3; set scf print 1; energy('ccsd'). the basis set is set to cc-pVDZ throughout, the SCF code will have a print; level of 1 and the ccenergy code, which performs coupled cluster computations,; will use a print level of 3. In this example a full CCSD computation is; performed by running the SCF code first, then the coupled cluster modules;; the energy() Python helper function ensures that this is performed correctly.; Note that the Python interpreter executes commands in the order they appear in; the input file, so if the last four commands in the above example were to read; 1; 2; 3; 4set basis cc-pVDZ; energy('ccsd'); set ccenergy print 3; set scf print 1. the commands that set the print level would be ineffective, as they would be; processed after the CCSD computation completes.; In PsiAPI mode, one can use commands set_options() and; set_module_options() like below. Note that these values; should be of correct type, strings for strings, floats for floats like; convergences. The function ~psi4.core.clean_options that reinitializes; all options may also be useful to separate calculations in a PsiAPI; session.; 1",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:6185,Performance,perform,performed,6185,"ts that require an array input, standard Python list syntax should; be used, viz.:; 1; 2; 3set {; docc = [3, 0, 1, 1]; }. List/matrix inputs may span multiple lines, as long as the opening [ is; on the same line as the name of the keyword.; Any of the above keyword specifications can be scoped to individual modules,; by adding the name of the module after the set keyword. Omitting the module; name, or using the name global or globals will result in the keyword being; applied to all modules. For example, in the following input; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule{; o; h 1 roh; h 1 roh 2 ahoh. roh = 0.957; ahoh = 104.5; }. set basis cc-pVDZ; set ccenergy print 3; set scf print 1; energy('ccsd'). the basis set is set to cc-pVDZ throughout, the SCF code will have a print; level of 1 and the ccenergy code, which performs coupled cluster computations,; will use a print level of 3. In this example a full CCSD computation is; performed by running the SCF code first, then the coupled cluster modules;; the energy() Python helper function ensures that this is performed correctly.; Note that the Python interpreter executes commands in the order they appear in; the input file, so if the last four commands in the above example were to read; 1; 2; 3; 4set basis cc-pVDZ; energy('ccsd'); set ccenergy print 3; set scf print 1. the commands that set the print level would be ineffective, as they would be; processed after the CCSD computation completes.; In PsiAPI mode, one can use commands set_options() and; set_module_options() like below. Note that these values; should be of correct type, strings for strings, floats for floats like; convergences. The function ~psi4.core.clean_options that reinitializes; all options may also be useful to separate calculations in a PsiAPI; session.; 1; 2; 3; 4; 5; 6; 7; 8; 9psi4.set_options({; 'scf_type': 'pk',; 'e_convergence': 1.e-5,; 'soscf': True; }). psi4.set_module_options({; 'geom_maxiter': 50; }). Basis Sets¶. Basis Sets; Built-In",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:6318,Performance,perform,performed,6318,"ts that require an array input, standard Python list syntax should; be used, viz.:; 1; 2; 3set {; docc = [3, 0, 1, 1]; }. List/matrix inputs may span multiple lines, as long as the opening [ is; on the same line as the name of the keyword.; Any of the above keyword specifications can be scoped to individual modules,; by adding the name of the module after the set keyword. Omitting the module; name, or using the name global or globals will result in the keyword being; applied to all modules. For example, in the following input; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule{; o; h 1 roh; h 1 roh 2 ahoh. roh = 0.957; ahoh = 104.5; }. set basis cc-pVDZ; set ccenergy print 3; set scf print 1; energy('ccsd'). the basis set is set to cc-pVDZ throughout, the SCF code will have a print; level of 1 and the ccenergy code, which performs coupled cluster computations,; will use a print level of 3. In this example a full CCSD computation is; performed by running the SCF code first, then the coupled cluster modules;; the energy() Python helper function ensures that this is performed correctly.; Note that the Python interpreter executes commands in the order they appear in; the input file, so if the last four commands in the above example were to read; 1; 2; 3; 4set basis cc-pVDZ; energy('ccsd'); set ccenergy print 3; set scf print 1. the commands that set the print level would be ineffective, as they would be; processed after the CCSD computation completes.; In PsiAPI mode, one can use commands set_options() and; set_module_options() like below. Note that these values; should be of correct type, strings for strings, floats for floats like; convergences. The function ~psi4.core.clean_options that reinitializes; all options may also be useful to separate calculations in a PsiAPI; session.; 1; 2; 3; 4; 5; 6; 7; 8; 9psi4.set_options({; 'scf_type': 'pk',; 'e_convergence': 1.e-5,; 'soscf': True; }). psi4.set_module_options({; 'geom_maxiter': 50; }). Basis Sets¶. Basis Sets; Built-In",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:8456,Performance,perform,performing,8456,"ish the previous example of; H2 and H atom:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h {; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol * (2*h_energy - h2_energy); print ""De=%f"" % D_e. The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module, and PSI Variables by Alpha defines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures t",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:9337,Performance,optimiz,optimize,9337,"ines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:9889,Performance,optimiz,optimize,9889,"iables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; 1; 2; 3; 4basis_sets = [""cc-pVDZ"", ""cc-pVTZ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:9952,Performance,optimiz,optimize,9952," file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; 1; 2; 3; 4basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set;",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:10257,Performance,optimiz,optimize,10257,"riables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; 1; 2; 3; 4basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixi",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:10381,Performance,optimiz,optimize,10381,"the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; 1; 2; 3; 4basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy sca",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:12214,Performance,perform,performed,12214,"s strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4 for analogous Z-matrix; and Cartiesian scans. Tables of Results¶; The results of computations can be compactly tabulated with the Table() Psithon; function. For example, in the following potential energy surface scan for water; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27molecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(100,102,2). table=Table(rows=[""R"",""A""], cols=[""E(SCF)"",""E(SCS)"",""E(DFMP2)""]). set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; ind",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:13173,Performance,perform,performed,13173," are performed. See scf4 for analogous Z-matrix; and Cartiesian scans. Tables of Results¶; The results of computations can be compactly tabulated with the Table() Psithon; function. For example, in the following potential energy surface scan for water; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27molecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(100,102,2). table=Table(rows=[""R"",""A""], cols=[""E(SCF)"",""E(SCS)"",""E(DFMP2)""]). set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; 1energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:13768,Performance,perform,performed,13768,"R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edfmp2]. print table; relative=table.copy(); relative.absolute_to_relative(); print relative. we first define a table (on line 10) with two row indices and three column; indices. As the potential energy scan is performed, the results are stored; (line 22) and the final table is printed to the output file (line 24). The; table is converted from absolute energies to relative energies (in kcal mol-1); on line 26, before being printed again. The relative energies are reported with; respect to the lowest value in each column. More examples of how to control the; formatting of the tables can be found in the sample input files provided; see; Appendix Test Suite and Sample Inputs for a complete listing. Python Wrappers¶; The Python foundations of the PSI4 driver and Psithon syntax permit; many commonly performed post-processing procedures to be integrated into; the PSI4 suite.; As seen in the neon dimer example from the tutorial section,; the nbody_gufunc() wrapper provides automatic computation of; counterpoise-corrected interaction energies between two molecules. For; example,; 1energy('mp2', bsse_type='cp'). will compute the counterpoise-corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; lar",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:15151,Performance,perform,perform,15151,"the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:2648,Safety,sanity check,sanity check,2648,"omatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the memory keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to PSI4:; 1; 2; 3; 4; 5; 6; 7# all equivalent. memory 2 GB. memory 2000 MB. memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). PSI4 recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB).; By default, PSI4 performs a “sanity check” when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check by directly setting the number of bytes availble to PSI4:; 1; 2# setting available memory to 2 MB; set_memory_bytes(2000000). Please note that this memory setting only governs the maximal memory; usage of the major data structures, and actual total memory usage; is slightly higher. This is usually a negligible amount, except when; setting tiny memory allowances.; One convenient way to override the PSI4 default memory is to place a; memory command in the ~/.psi4rc file (Sec. ~/.psi4rc File). For example,; the following makes the default memory 2 GB.; 1set_memory(2000000000). However, unless you’re assured of having only one job running on a node at; a time (and all nodes on the filesystem with ~/.psi4rc have similar memory; capacities), it is advised to set memory in the input file on a; per-calculation basis.; That same command can be used ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:1905,Security,access,access,1905,"urrent user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB of memory are available. While this is; enough for many computations, many of the algorithms will perform better if; more is available. To specify memory, the memory keyword should be used. The following; lines are all equivalent methods for specifying that 2 GB of RAM is available; to PSI4:; 1; 2; 3; 4; 5; 6; 7# all equivalent. memory 2 GB. memory 2000 MB. memory 2000000 kB. Please note that memory can be specified both in IEC binary units (1 KiB = 1024 bytes) and SI units (1 kB = 1000 bytes). PSI4 recognizes and obeys both of them correctly. The units are not case sensitive (Kb and KB are equivalent to kB).; By default, PSI4 performs a “sanity check” when parsing Psithon input files, enforcing a minimum memory requirement of 250 MiB. While it is generally not recomennded to do so, expert users can bypass this check by directly setting the number of bytes availble to PSI4:; 1; 2# setting ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:8390,Security,access,accessed,8390,"Python, PSI4 makes the most pertinent results; of each computation available to the Python interpreter for; post-processing. To demonstrate, we can embellish the previous example of; H2 and H atom:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; h2_energy = energy('scf'). molecule h {; H; }. set basis cc-pvdz; set reference uhf; h_energy = energy('scf'). D_e = psi_hartree2kcalmol * (2*h_energy - h2_energy); print ""De=%f"" % D_e. The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module, and PSI Variables by Alpha defines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:10613,Security,access,access,10613,"th the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; 1; 2; 3; 4basis_sets = [""cc-pVDZ"", ""cc-pVTZ"", ""cc-pVQZ""]; for basis_set in basis_sets:; set basis = $basis_set; energy('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:11929,Security,access,access,11929,"y('scf'). The declaration of basis_sets is completely standard Python, as is the next; line, which iterates over the list. However, because the Psithon preprocessor; wraps strings in quotes by default, we have to tell it that basis_set is a; Python variable, not a string, by prefixing it with a dollar sign.; The geometry specification supports delayed initialization of variable,; which permits potential energy scans. As an example, we can scan both the; angle and bond length in water:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16molecule h2o{; O; H 1 R; H 1 R 2 A; }. Rvals = [0.9, 1.0, 1.1]; Avals = range(102, 106, 2). set basis cc-pvdz; set scf e_convergence=11; for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('scf'). The declarations of Rvals and Avals are both completely standard Python syntax.; Having named our molecule h2o we can then set the values of R and A within; the loops. Note that we do not need the dollar sign to access the Python; variable in this example; that is required only when using Python variables; with the set keyword.; Cartesian geometries, because of details of the geometry update process,; need to be specified within the loop(s) along with their basis set when; geometry scans are performed. See scf4 for analogous Z-matrix; and Cartiesian scans. Tables of Results¶; The results of computations can be compactly tabulated with the Table() Psithon; function. For example, in the following potential energy surface scan for water; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27molecule h2o {; O; H 1 R; H 1 R 2 A; }. Rvals=[0.9,1.0,1.1]; Avals=range(100,102,2). table=Table(rows=[""R"",""A""], cols=[""E(SCF)"",""E(SCS)"",""E(DFMP2)""]). set basis cc-pvdz. for R in Rvals:; h2o.R = R; for A in Avals:; h2o.A = A; energy('mp2'); escf = get_variable('SCF TOTAL ENERGY'); edfmp2 = get_variable('MP2 TOTAL ENERGY'); escsmp2 = get_variable('SCS-MP2 TOTAL ENERGY'); table[R][A] = [escf, escsmp2, edf",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:564,Testability,test,test,564,"﻿. Psithon: Structuring an Input File. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:654,Testability,test,test,654,"﻿. Psithon: Structuring an Input File. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:15127,Testability,benchmark,benchmark,15127,"corrected density-fitted MP2 interaction energy; between two molecules.; PSI4 also provides the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:15333,Testability,benchmark,benchmark,15333,"the cbs() wrapper,; which automatically computes a complete-basis-set extrapolation (and; automatically sets up the computations with different basis sets required to; do the extrapolation). For example,:; 1; 2; 3; 4; 5# all equivalent. cbs('mp2', corl_basis='cc-pv[dt]z', corl_scheme=corl_xtpl_helgaker_2). energy('mp2/cc-pv[dt]z'). will compute a 2-point Helgaker extrapolation of the correlation energy; using the cc-pVDZ and cc-pVTZ basis sets (with method MP2) and add this; extrapolated correlation energy to the Hartree–Fock energy in the; largest basis (cc-pVTZ). cbs() can; either be called directly, as in the first example, or the convenience; syntax of the equivalent second example can be used.; Another very useful and powerful feature of PSI4 is the ability; to compute results on entire databases of molecules at a time,; as provided by the database() wrapper. For example,:; 1database('mp2', 'S22', cp=1, benchmark='S22B'). will perform DF-MP2 counterpoise-corrected interaction energies; (cp=1) on all members of Hobza’s S22 database set of van der Waals; dimers, and then compare the results against the S22B benchmark energies.; Built-in databases include S22, A24, HTBH, HBC6, HSG, S22by5, S66, JSCH,; NCB31, S66by8, and NBC10, among others.; These wrapper functions are discussed separately in; Psithon Functions: Invoking a Calculation. Note that the options documented for Python; functions are placed as arguments in the command that calls the function,; not in the set {...} block or with any other set command. table of contents. Psithon: Structuring an Input File; Physical Constants; Memory Specification; Molecule and Geometry Specification; Job Control Keywords; Basis Sets; PSI Variables; Return Values; Loops; Tables of Results; Python Wrappers. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:284,Usability,simpl,simpler,284,"﻿. Psithon: Structuring an Input File. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File¶; To allow arbitrarily complex computations to be performed, PSI4 was built; upon the Python interpreter. However, to make the input syntax simpler, some; pre-processing of the input file is performed before it is interpreted,; resulting in Python syntax that is customized for PSI, termed Psithon. In; this section we will describe the essential features of the Psithon language.; PSI4 is distributed with an extensive test suite, described in section; Test Suite and Sample Inputs; the input files for these test cases can be found in the; samples subdirectory of the top-level PSI4 source directory and should; serve as useful examples. Physical Constants¶; For convenience, the Python interpreter will execute the contents of the; ~/.psi4rc file in the current user’s home area (if present) before performing any; tasks in the input file. This allows frequently used python variables to be; automatically defined in all input files. For example, if we repeatedly make; use of the universal gravitational constant, the following line could be placed; in the ~/.psi4rc file; 1UGC = 6.67384E-11 # m^3 / kg^-1 s^-2. which would make the variable UGC available in all PSI4 input files.; For convenience, the physical constants used within the PSI4 code (which; are obtained from NIST CODATA 2014; are also automatically loaded as Psithon; variables (before ~/.psi4rc is loaded, so that the user’s ~/.psi4rc values can; override the builtins (in the input file, not in the C++ code).; The physical constants used within PSI4, which are automatically; made available within all PSI4 input files are in Physical Constants.; In Psithon input files, prepend physical constants with psi_ to; prevent clashes with user-defined variables (e.g., psi_h). In; PsiAPI mode, access as, e.g., psi4.constants.h. Memory Specification¶; By default, PSI4 assumes that 500 MiB ",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:8902,Usability,clear,cleared,8902,"""De=%f"" % D_e. The energy() function returns the final result of the; computation, the requested total energy in Hartrees, which we assign to a; Python variable. The two energies are then converted to a dissociation; energy and printed to the output file using standard Python notation.; Generally, there are multiple quantities of interest. Appendix; PSI Variables by Module lists PSI variables variables set by each; module, and PSI Variables by Alpha defines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = f",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:9374,Usability,simpl,simply,9374,"ines them. These can be; accessed through the get_variable() function. For example, after; performing a density fitted MP2 computation, both the spin component; scaled energy and the unscaled MP2 energy are made available:; 1; 2e_mp2 = get_variable('MP2 TOTAL ENERGY'); e_scs_mp2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:9636,Usability,simpl,simple,9636,"2 = get_variable('SCS-MP2 TOTAL ENERGY'). Each module and the Python driver set PSI variables over the course of a; calculation. The values for all can be printed in the output file with; the input file command print_variables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithoninput.html:9852,Usability,simpl,simple,9852,"ables(). Note that PSI variables; are cleared at the start of each energy(), etc. in an input; file by clean_variables().; So if you run in a single input file a STO-3G FCI followed by a; aug-cc-pVQZ SCF followed by a print_variables() command, the; last will include SCF TOTAL ENERGY but not; FCI TOTAL ENERGY.; The entire dictionary of PSI variables can be obtained through; get_variables(). Return Values¶; Most of the usual user computation functions (i.e.,; energy(), optimize(), and; frequency()) return simply the current total energy.; Consult the descriptions of other functions in Psithon Functions: Invoking a Calculation for; what quantities they return and for what data structures they make; available for post-processing. Many users need only deal with the simple return; form for the computation functions.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11# E is total energy float; # G is gradient array; # H is hessian array; # wfn is class instance with many computational details. # simple returns; E = energy(...); E = optimize(...); E = frequency(...); G = gradient(...) # used by optimize(); H = hessian(...) # used by frequency(). For more elaborate post-processing of computations, adding; return_wfn=True keyword argument additionally returns; Wavefunction.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16# power user returns; E, wfn = energy(..., return_wfn=True); E, wfn = optimize(..., return_wfn=True); E, wfn = frequency(..., return_wfn=True); G, wfn = gradient(..., return_wfn=True) # used by optimize(); H, wfn = hessian(..., return_wfn=True) # used by frequency(). # print gradient array and its rms; wfn.gradient.print_out(); print wfn.gradient().rms(). # format output for other programs; molden(wfn, 'mycalc.molden'). # access array in another format; np.array(wfn.hessian()). Loops¶; Python provides many control structures, any of which can be used within PSI4; input files. For example, to loop over three basis sets, the following code can; be used:; 1; 2; 3; 4basis_s",MatchSource.WIKI,psi4manual/1.3.2/psithoninput.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithoninput.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:14200,Availability,reliab,reliable,14200,"on, we can specify; 1SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; \(C_s\) (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:2032,Deployability,patch,patch,2032,"hin the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which i",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:2079,Deployability,patch,patch,2079,"ible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information ca",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:2761,Deployability,patch,patch,2761," H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; c",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:17488,Deployability,update,update,17488,"ct_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_e",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:18360,Deployability,update,update,18360,".0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). Molecules can be initiated from XYZ files and fragmented for SAPT computations.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39# >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.083393104",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:22165,Deployability,update,updated,22165,"2; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:3319,Energy Efficiency,charge,charge,3319,"-1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; can be achieved by adding either no_reorient or noreorient.; To prevent even recentering of the molecule, add no_com or nocom.; PubChem; A line reading pubchem:mol fetches the geometry for molecule; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not b",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:3429,Energy Efficiency,charge,charge,3429,"-1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; can be achieved by adding either no_reorient or noreorient.; To prevent even recentering of the molecule, add no_com or nocom.; PubChem; A line reading pubchem:mol fetches the geometry for molecule; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not b",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:3541,Energy Efficiency,charge,charge,3541,"8; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; can be achieved by adding either no_reorient or noreorient.; To prevent even recentering of the molecule, add no_com or nocom.; PubChem; A line reading pubchem:mol fetches the geometry for molecule; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpret",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:5016,Energy Efficiency,energy,energy,5016,"e; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. c",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:5106,Energy Efficiency,energy,energy,5106,"number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provi",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:5818,Energy Efficiency,energy,energy,5818,"ld be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; U",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:5901,Energy Efficiency,energy,energy,5901,"; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subje",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:6035,Energy Efficiency,energy,energy,6035,"an(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:6669,Energy Efficiency,charge,charge,6669,"0; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this will change the; molecule’s point group symmetry.; 1; 2; 3; 4; 5; 6molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by PSI4 can be found at; psi4/psi4/include/psi4/masses.h. See freq-isotope for about; the only use to which isotopologues can presently be put in PSI4. PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide ch",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:10661,Energy Efficiency,charge,charge,10661,"lfonamide; 7505 benzonitrile; 78438 N-[anilino(phenyl)phosphoryl]aniline; 12581 3-phenylpropanenitrile; 517327 sodium benzenesulfonate; 637563 1-methoxy-4-[(E)-prop-1-enyl]benzene; 252325 [(E)-prop-1-enyl]benzene. Note that some of these results do not contain the string “benzene”; these; compounds have synonyms containing that text. We can now replace the; “benzene*” in the input file with one of the above compounds using either the; IUPAC name or the CID provided in the list, viz:; 1; 2; 3molecule benzene {; pubchem:637563; }. or; 1; 2; 3molecule benzene {; pubchem:1-methoxy-4-[(E)-prop-1-enyl]benzene; }. Some of the structures in the database are quite loosely optimized and do not; have the correct symmetry. Before starting the computation, PSI4 will; check to see if the molecule is close to having each of the possible; symmetries, and will adjust the structure accordingly so that the maximum; symmetry is utilized.; The standard keywords, described in Molecule Keywords, can be; used in conjunction to specify charge, multiplicity, symmetry to use, etc. . Symmetry¶; For efficiency, PSI4 can utilize the largest Abelian subgroup of the full; point group of the molecule. Concomitantly, a number of quantities, such as; SOCC and DOCC, are arrays whose entries pertain to irreducible; representations (irreps) of the molecular point group. Ordering of irreps; follows the convention used in Cotton’s Chemical Applications of Group; Theory, as detailed in Table Irreps. We refer to this; convention as “Cotton Ordering” hereafter. Ordering of irreducible representations (irreps) used in PSI4¶. Point Group; 1; 2; 3; 4; 5; 6; 7; 8. \(C_1\); \(A\);  ;  ;  ;  ;  ;  ;  . \(C_i\); \(A_g\); \(A_u\);  ;  ;  ;  ;  ;  . \(C_2\); \(A\); \(B\);  ;  ;  ;  ;  ;  . \(C_s\); \(A'\); \(A''\);  ;  ;  ;  ;  ;  . \(D_2\); \(A\); \(B_1\); \(B_2\); \(B_3\);  ;  ;  ;  . \(C_{2v}\); \(A_1\); \(A_2\); \(B_1\); \(B_2\);  ;  ;  ;  . \(C_{2h}\); \(A_g\); \(B_g\); \(A_u\); \(B_u\);  ;  ;  ;  . \(D_{2h}\); \",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:14038,Energy Efficiency,energy,energy,14038,"rical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the \(^2B_1\); state of water cation, we can specify; 1SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; \(C_s\) (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule;",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:14573,Energy Efficiency,adapt,adapted,14573,"molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragm",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:14957,Energy Efficiency,energy,energy,14957,"1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:15453,Energy Efficiency,charge,charge,15453,"ating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:15539,Energy Efficiency,charge,charge,15539,"tion theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is no",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:15703,Energy Efficiency,charge,charge,15703,"imply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; ac",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:15745,Energy Efficiency,charge,charges,15745,"imply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; ac",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:16471,Energy Efficiency,energy,energy,16471,"iplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:16531,Energy Efficiency,energy,energy,16531,"ied. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:16870,Energy Efficiency,power,powerful,16870,"M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coord",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:17528,Energy Efficiency,energy,energy,17528,"ct_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_e",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:19849,Energy Efficiency,energy,energy,19849,"1348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.08339310458383; # N 0.00000000000000 0.00000000000000 -5.33865984413460. sapt = {'mol1': -0.0105313323529,; 'mol2': -0.00839486625709}. nre = {'mol1': 38.8138764635,; 'mol2': 72.3451968428}. set basis jun-cc-pvdz. for mol in ['mol1', 'mol2']:; filen = mol + '.xyz'; p4mol = Molecule.init_with_xyz(filen) # create molecule from file above; fragmentedmol = auto_fragments(molecule=p4mol) # fragment with BFS algorithm; activate(fragmentedmol) # activate returned molecule (for sapt). e = energy('sapt0') # run SAPT that requires 2 fragments; compare_values(sapt[mol], e, 5, '%s sapt ok' % mol); compare_values(nre[mol], p4mol.nuclear_repulsion_energy(), 4, '%s ok' % mol); clean() # clean scratch between loop calcs. The essential element, mass and coordinate information of the molecule is accessible; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyn",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:20998,Energy Efficiency,charge,charge,20998," '%s ok' % mol); clean() # clean scratch between loop calcs. The essential element, mass and coordinate information of the molecule is accessible; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:21021,Energy Efficiency,charge,charge,21021," '%s ok' % mol); clean() # clean scratch between loop calcs. The essential element, mass and coordinate information of the molecule is accessible; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:2821,Integrability,depend,depends,2821," H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; c",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:13131,Integrability,depend,dependent,13131,"e Keywords). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice for symbol.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with \(D_{2h}\) symmetry in \(C_{2v}\), the; \(C_2\) axis can be chosen as either the \(x\), the \(y\), or the \(z\); these can; be specified by requesting the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For \(C_s\) symmetry the labels csx, csy, and; csz request the \(yz\), \(xz\), and \(xy\) planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the \(^2B_1\); state of water cation, we can specify; 1SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; \(C_s\) (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:214,Modifiability,flexible,flexible,214,"﻿. Molecule and Geometry Specification. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File. Molecule and Geometry Specification¶. Coordinates¶; PSI4 has a very flexible input parser that allows the user to provide; geometries as Cartesian coordinates, Z-matrix variables, or a combination of; both. The use of fixed values and variables are supported for both. For; example, the geometry for H2 can be specified a number of ways, using the; molecule optional_molecule_name {...} block.; 1; 2; 3; 4molecule {; H; H 1 0.9; }. or; 1; 2; 3; 4; 5molecule {; H; H 1 r; r = 0.9; }. or; 1; 2; 3; 4molecule {; H1; H2 H1 0.9; }. or; 1; 2; 3; 4molecule {; H 0.0 0.0 0.0; H 0.0 0.0 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 0.0; H 0.0 0.0 r; r = 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 -r; H 0.0 0.0 r; r = 0.45; }. Blank lines are ignored and, unlike regular Python syntax, indentation within; the molecule block does not matter, although the molecule keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.7176",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:315,Modifiability,variab,variables,315,"﻿. Molecule and Geometry Specification. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File. Molecule and Geometry Specification¶. Coordinates¶; PSI4 has a very flexible input parser that allows the user to provide; geometries as Cartesian coordinates, Z-matrix variables, or a combination of; both. The use of fixed values and variables are supported for both. For; example, the geometry for H2 can be specified a number of ways, using the; molecule optional_molecule_name {...} block.; 1; 2; 3; 4molecule {; H; H 1 0.9; }. or; 1; 2; 3; 4; 5molecule {; H; H 1 r; r = 0.9; }. or; 1; 2; 3; 4molecule {; H1; H2 H1 0.9; }. or; 1; 2; 3; 4molecule {; H 0.0 0.0 0.0; H 0.0 0.0 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 0.0; H 0.0 0.0 r; r = 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 -r; H 0.0 0.0 r; r = 0.45; }. Blank lines are ignored and, unlike regular Python syntax, indentation within; the molecule block does not matter, although the molecule keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.7176",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:381,Modifiability,variab,variables,381,"﻿. Molecule and Geometry Specification. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File. Molecule and Geometry Specification¶. Coordinates¶; PSI4 has a very flexible input parser that allows the user to provide; geometries as Cartesian coordinates, Z-matrix variables, or a combination of; both. The use of fixed values and variables are supported for both. For; example, the geometry for H2 can be specified a number of ways, using the; molecule optional_molecule_name {...} block.; 1; 2; 3; 4molecule {; H; H 1 0.9; }. or; 1; 2; 3; 4; 5molecule {; H; H 1 r; r = 0.9; }. or; 1; 2; 3; 4molecule {; H1; H2 H1 0.9; }. or; 1; 2; 3; 4molecule {; H 0.0 0.0 0.0; H 0.0 0.0 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 0.0; H 0.0 0.0 r; r = 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 -r; H 0.0 0.0 r; r = 0.45; }. Blank lines are ignored and, unlike regular Python syntax, indentation within; the molecule block does not matter, although the molecule keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.7176",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:14573,Modifiability,adapt,adapted,14573,"molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragm",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:5156,Performance,perform,performed,5156,"reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Gh",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:5208,Performance,perform,performed,5208,"reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Gh",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:8353,Performance,perform,performed,8353,"4/include/psi4/masses.h. See freq-isotope for about; the only use to which isotopologues can presently be put in PSI4. PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:; 1; 2; 3molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; PSI4 to search PubChem for a starting structure. The search is actually; performed for compounds whose name contains “benzene”, so multiple; entries will be returned. If the name provided (“benzene” in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are printed to the output file, prompting the user to provide a more; specific name. For example, if we know that we want to run a computation on a; compound whose name(s) contain “benzene”, but we’re not sure of the exact IUPAC; name, the following input can be used:; 1; 2; 3molecule benzene {; pubchem:benzene*; }. Appending the “*” prevents an exact match from being found and, at the time; of writing, the following results are displayed in the output file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21Chemical ID IUPAC Name; 241 benzene; 7371 benzenesulfonic acid; 91526 benzenesulfonate; 244 phenylmethanol; 727 1,2,3,4,5,6-hexachlorocyclohexane; 240 benzaldehyde; 65723 benzenesulfonohydrazide; 74",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:10306,Performance,optimiz,optimized,10306,"1,2,3,4,5,6-hexachlorocyclohexane; 240 benzaldehyde; 65723 benzenesulfonohydrazide; 74296 N-phenylbenzenesulfonamide; 289 benzene-1,2-diol; 243 benzoic acid; 7370 benzenesulfonamide; 636822 1,2,4-trimethoxy-5-[(E)-prop-1-enyl]benzene; 7369 benzenesulfonyl chloride; 12932 N-[2-di(propan-2-yloxy)phosphinothioylsulfanylethyl]benzenesulfonamide; 7505 benzonitrile; 78438 N-[anilino(phenyl)phosphoryl]aniline; 12581 3-phenylpropanenitrile; 517327 sodium benzenesulfonate; 637563 1-methoxy-4-[(E)-prop-1-enyl]benzene; 252325 [(E)-prop-1-enyl]benzene. Note that some of these results do not contain the string “benzene”; these; compounds have synonyms containing that text. We can now replace the; “benzene*” in the input file with one of the above compounds using either the; IUPAC name or the CID provided in the list, viz:; 1; 2; 3molecule benzene {; pubchem:637563; }. or; 1; 2; 3molecule benzene {; pubchem:1-methoxy-4-[(E)-prop-1-enyl]benzene; }. Some of the structures in the database are quite loosely optimized and do not; have the correct symmetry. Before starting the computation, PSI4 will; check to see if the molecule is close to having each of the possible; symmetries, and will adjust the structure accordingly so that the maximum; symmetry is utilized.; The standard keywords, described in Molecule Keywords, can be; used in conjunction to specify charge, multiplicity, symmetry to use, etc. . Symmetry¶; For efficiency, PSI4 can utilize the largest Abelian subgroup of the full; point group of the molecule. Concomitantly, a number of quantities, such as; SOCC and DOCC, are arrays whose entries pertain to irreducible; representations (irreps) of the molecular point group. Ordering of irreps; follows the convention used in Cotton’s Chemical Applications of Group; Theory, as detailed in Table Irreps. We refer to this; convention as “Cotton Ordering” hereafter. Ordering of irreducible representations (irreps) used in PSI4¶. Point Group; 1; 2; 3; 4; 5; 6; 7; 8. \(C_1\); \(A\);  ;  ;",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:15946,Performance,perform,perform,15946,"le, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:18086,Performance,load,load,18086,"cular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). Molecules can be initiated from XYZ files and fragmented for SAPT computations.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39# >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stu",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:18285,Performance,load,load,18285,"; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). Molecules can be initiated from XYZ files and fragmented for SAPT computations.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39# >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:4439,Safety,detect,detected,4439,"d as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; can be achieved by adding either no_reorient or noreorient.; To prevent even recentering of the molecule, add no_com or nocom.; PubChem; A line reading pubchem:mol fetches the geometry for molecule; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With i",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:11949,Safety,detect,detect,11949,"ps; follows the convention used in Cotton’s Chemical Applications of Group; Theory, as detailed in Table Irreps. We refer to this; convention as “Cotton Ordering” hereafter. Ordering of irreducible representations (irreps) used in PSI4¶. Point Group; 1; 2; 3; 4; 5; 6; 7; 8. \(C_1\); \(A\);  ;  ;  ;  ;  ;  ;  . \(C_i\); \(A_g\); \(A_u\);  ;  ;  ;  ;  ;  . \(C_2\); \(A\); \(B\);  ;  ;  ;  ;  ;  . \(C_s\); \(A'\); \(A''\);  ;  ;  ;  ;  ;  . \(D_2\); \(A\); \(B_1\); \(B_2\); \(B_3\);  ;  ;  ;  . \(C_{2v}\); \(A_1\); \(A_2\); \(B_1\); \(B_2\);  ;  ;  ;  . \(C_{2h}\); \(A_g\); \(B_g\); \(A_u\); \(B_u\);  ;  ;  ;  . \(D_{2h}\); \(A_g\); \(B_{1g}\); \(B_{2g}\); \(B_{3g}\); \(A_u\); \(B_{1u}\); \(B_{2u}\); \(B_{3u}\). For example, water (\(C_{2v}\) symmetry) has three doubly occupied \(A_1\); orbitals, as well as one each of \(B_1\) and \(B_2\) symmetry; the; corresponding DOCC array is therefore:; 1DOCC = [3, 0, 1, 1]. Although PSI4 will detect the symmetry automatically, and use the largest; possible Abelian subgroup, the user might want to run in a lower point group.; To do this the molecule keyword symmetry symbol can be used; (see Molecule Keywords). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice for symbol.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with \(D_{2h}\) symmetry in \(C_{2v}\), the; \(C_2\) axis can be chosen as either the \(x\), the \(y\), or the \(z\); these can; be specified by requesting the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For \(C_s\) symmetry the labels csx, csy, and; csz request the \(yz\), \(xz\), and \(xy\) planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference com",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:16990,Security,access,accessible,16990,"he; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:17182,Security,access,access,17182,"fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_o",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:20152,Security,access,accessible,20152,"0000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.08339310458383; # N 0.00000000000000 0.00000000000000 -5.33865984413460. sapt = {'mol1': -0.0105313323529,; 'mol2': -0.00839486625709}. nre = {'mol1': 38.8138764635,; 'mol2': 72.3451968428}. set basis jun-cc-pvdz. for mol in ['mol1', 'mol2']:; filen = mol + '.xyz'; p4mol = Molecule.init_with_xyz(filen) # create molecule from file above; fragmentedmol = auto_fragments(molecule=p4mol) # fragment with BFS algorithm; activate(fragmentedmol) # activate returned molecule (for sapt). e = energy('sapt0') # run SAPT that requires 2 fragments; compare_values(sapt[mol], e, 5, '%s sapt ok' % mol); compare_values(nre[mol], p4mol.nuclear_repulsion_energy(), 4, '%s ok' % mol); clean() # clean scratch between loop calcs. The essential element, mass and coordinate information of the molecule is accessible; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:6300,Usability,simpl,simplified,6300," by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this will change the; molecule’s point group symmetry.; 1; 2; 3; 4; 5; 6molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.9304",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:7659,Usability,intuit,intuitive,7659,"nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this will change the; molecule’s point group symmetry.; 1; 2; 3; 4; 5; 6molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by PSI4 can be found at; psi4/psi4/include/psi4/masses.h. See freq-isotope for about; the only use to which isotopologues can presently be put in PSI4. PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:; 1; 2; 3molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; PSI4 to search PubChem for a starting structure. The search is actually; performed for compounds whose name contains “benzene”, so multiple; entries will be returned. If the name provided (“benzene” in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are print",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:7763,Usability,intuit,intuitive,7763,"f isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this will change the; molecule’s point group symmetry.; 1; 2; 3; 4; 5; 6molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by PSI4 can be found at; psi4/psi4/include/psi4/masses.h. See freq-isotope for about; the only use to which isotopologues can presently be put in PSI4. PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:; 1; 2; 3molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; PSI4 to search PubChem for a starting structure. The search is actually; performed for compounds whose name contains “benzene”, so multiple; entries will be returned. If the name provided (“benzene” in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are printed to the output file, prompting the user to provide a more; specific name. For example, if we know that we want to run a computation on a; compou",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:14717,Usability,simpl,simple,14717,"on in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:14749,Usability,simpl,simply,14749,"on in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:15713,Usability,simpl,simply,15713,"imply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; ac",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol-1.html:15929,Usability,simpl,simple,15929,"le, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol-1.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:14200,Availability,reliab,reliable,14200,"on, we can specify; 1SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; \(C_s\) (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:2032,Deployability,patch,patch,2032,"hin the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which i",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:2079,Deployability,patch,patch,2079,"ible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information ca",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:2761,Deployability,patch,patch,2761," H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; c",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:17488,Deployability,update,update,17488,"ct_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_e",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:18360,Deployability,update,update,18360,".0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). Molecules can be initiated from XYZ files and fragmented for SAPT computations.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39# >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.083393104",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:22165,Deployability,update,updated,22165,"2; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:3319,Energy Efficiency,charge,charge,3319,"-1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; can be achieved by adding either no_reorient or noreorient.; To prevent even recentering of the molecule, add no_com or nocom.; PubChem; A line reading pubchem:mol fetches the geometry for molecule; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not b",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:3429,Energy Efficiency,charge,charge,3429,"-1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; can be achieved by adding either no_reorient or noreorient.; To prevent even recentering of the molecule, add no_com or nocom.; PubChem; A line reading pubchem:mol fetches the geometry for molecule; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not b",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:3541,Energy Efficiency,charge,charge,3541,"8; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; can be achieved by adding either no_reorient or noreorient.; To prevent even recentering of the molecule, add no_com or nocom.; PubChem; A line reading pubchem:mol fetches the geometry for molecule; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpret",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:5016,Energy Efficiency,energy,energy,5016,"e; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. c",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:5106,Energy Efficiency,energy,energy,5106,"number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provi",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:5818,Energy Efficiency,energy,energy,5818,"ld be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; U",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:5901,Energy Efficiency,energy,energy,5901,"; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subje",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:6035,Energy Efficiency,energy,energy,6035,"an(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:6669,Energy Efficiency,charge,charge,6669,"0; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this will change the; molecule’s point group symmetry.; 1; 2; 3; 4; 5; 6molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by PSI4 can be found at; psi4/psi4/include/psi4/masses.h. See freq-isotope for about; the only use to which isotopologues can presently be put in PSI4. PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide ch",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:10661,Energy Efficiency,charge,charge,10661,"lfonamide; 7505 benzonitrile; 78438 N-[anilino(phenyl)phosphoryl]aniline; 12581 3-phenylpropanenitrile; 517327 sodium benzenesulfonate; 637563 1-methoxy-4-[(E)-prop-1-enyl]benzene; 252325 [(E)-prop-1-enyl]benzene. Note that some of these results do not contain the string “benzene”; these; compounds have synonyms containing that text. We can now replace the; “benzene*” in the input file with one of the above compounds using either the; IUPAC name or the CID provided in the list, viz:; 1; 2; 3molecule benzene {; pubchem:637563; }. or; 1; 2; 3molecule benzene {; pubchem:1-methoxy-4-[(E)-prop-1-enyl]benzene; }. Some of the structures in the database are quite loosely optimized and do not; have the correct symmetry. Before starting the computation, PSI4 will; check to see if the molecule is close to having each of the possible; symmetries, and will adjust the structure accordingly so that the maximum; symmetry is utilized.; The standard keywords, described in Molecule Keywords, can be; used in conjunction to specify charge, multiplicity, symmetry to use, etc. . Symmetry¶; For efficiency, PSI4 can utilize the largest Abelian subgroup of the full; point group of the molecule. Concomitantly, a number of quantities, such as; SOCC and DOCC, are arrays whose entries pertain to irreducible; representations (irreps) of the molecular point group. Ordering of irreps; follows the convention used in Cotton’s Chemical Applications of Group; Theory, as detailed in Table Irreps. We refer to this; convention as “Cotton Ordering” hereafter. Ordering of irreducible representations (irreps) used in PSI4¶. Point Group; 1; 2; 3; 4; 5; 6; 7; 8. \(C_1\); \(A\);  ;  ;  ;  ;  ;  ;  . \(C_i\); \(A_g\); \(A_u\);  ;  ;  ;  ;  ;  . \(C_2\); \(A\); \(B\);  ;  ;  ;  ;  ;  . \(C_s\); \(A'\); \(A''\);  ;  ;  ;  ;  ;  . \(D_2\); \(A\); \(B_1\); \(B_2\); \(B_3\);  ;  ;  ;  . \(C_{2v}\); \(A_1\); \(A_2\); \(B_1\); \(B_2\);  ;  ;  ;  . \(C_{2h}\); \(A_g\); \(B_g\); \(A_u\); \(B_u\);  ;  ;  ;  . \(D_{2h}\); \",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:14038,Energy Efficiency,energy,energy,14038,"rical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the \(^2B_1\); state of water cation, we can specify; 1SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; \(C_s\) (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule;",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:14573,Energy Efficiency,adapt,adapted,14573,"molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragm",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:14957,Energy Efficiency,energy,energy,14957,"1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:15453,Energy Efficiency,charge,charge,15453,"ating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:15539,Energy Efficiency,charge,charge,15539,"tion theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is no",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:15703,Energy Efficiency,charge,charge,15703,"imply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; ac",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:15745,Energy Efficiency,charge,charges,15745,"imply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; ac",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:16471,Energy Efficiency,energy,energy,16471,"iplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:16531,Energy Efficiency,energy,energy,16531,"ied. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:16870,Energy Efficiency,power,powerful,16870,"M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coord",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:17528,Energy Efficiency,energy,energy,17528,"ct_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_e",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:19849,Energy Efficiency,energy,energy,19849,"1348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.08339310458383; # N 0.00000000000000 0.00000000000000 -5.33865984413460. sapt = {'mol1': -0.0105313323529,; 'mol2': -0.00839486625709}. nre = {'mol1': 38.8138764635,; 'mol2': 72.3451968428}. set basis jun-cc-pvdz. for mol in ['mol1', 'mol2']:; filen = mol + '.xyz'; p4mol = Molecule.init_with_xyz(filen) # create molecule from file above; fragmentedmol = auto_fragments(molecule=p4mol) # fragment with BFS algorithm; activate(fragmentedmol) # activate returned molecule (for sapt). e = energy('sapt0') # run SAPT that requires 2 fragments; compare_values(sapt[mol], e, 5, '%s sapt ok' % mol); compare_values(nre[mol], p4mol.nuclear_repulsion_energy(), 4, '%s ok' % mol); clean() # clean scratch between loop calcs. The essential element, mass and coordinate information of the molecule is accessible; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyn",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:20998,Energy Efficiency,charge,charge,20998," '%s ok' % mol); clean() # clean scratch between loop calcs. The essential element, mass and coordinate information of the molecule is accessible; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:21021,Energy Efficiency,charge,charge,21021," '%s ok' % mol); clean() # clean scratch between loop calcs. The essential element, mass and coordinate information of the molecule is accessible; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.0 C C_ENE 6.0000 -0.031900 1.304098 -3.948079 12.000000; # 1.0 H H_ENE 1.0000 1.713491 -2.286062 -3.950962 2.014000; # 1.0 H H_ENE 1.0000 -1.777290 -2.286062 -3.950962 1.007825; # 1.0 H H_ENE 1.0000 -1.777290 2.371180 -3.950962 1.007825; # 0.0 H H_ENE 0.0000 1.713491 2.371180 -3.950962 1.007825; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 5.548101 12.000000; # 6.0 C C_YNE 6.0000 -0.031900 0.042559 3.266705 12.000000; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 1.252468 1.007825; # 1.0 H H_YNE 1.0000 -0.031900 0.042559 7.557685 1.007825. table of contents. Molecule and Geometry Specification; Coordinates; Molecule Keywords; Multiple Molecules; Ghost Atoms; Isotopic Substitution; PubChem Database; Symmetry; Non-Covalently Bonded Molecule Fragments; Advanced Python. «; hide menu. menu; sidebar; »; . ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:2821,Integrability,depend,depends,2821," H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.717651915252 1.673774709694; # Now patch it, using a Z Matrix specification. This patch can be applied; # anywhere in the coord specification, as long as it appears lower than; # the atoms referenced, as is usual for Z-Matrices; C 2 rCC 3 aCCC 1 dCCCN; H 7 rCH1 2 aHCC1 3 dHCCC1; H 7 rCH2 2 aHCC2 3 dHCCC2; H 7 rCH3 2 aHCC3 3 dHCCC3; H 0.221781602033 1.772570540211 0.286988509018; H -1.833601608592 0.108401996052 1.481873213172; H -1.925572581453 1.640882152784 0.986471814808. aCCC = 108.0; rCC = 1.4; dCCCN = 120; rCH1 = 1.08; rCH2 = 1.08; rCH3 = 1.08; aHCC1 = 109.0; aHCC2 = 109.0; aHCC3 = 109.0; dHCCC1 = 0.0; dHCCC2 = 120.0; dHCCC3 = 240.0; }. Here, we remove the hydrogen from the alpha carbon of glycine and replace it; with a methyl group. Applying this patch using Cartesian coordinates is; difficult, because it depends on the orientation of the existing glycine unit.; In this example, we use Z-Matrix coordinates to define the methyl group, and; define the orientation in terms of the existing glycine Cartesian coordinates; which is much easier to visualize than the corresponding Cartesian-only; approach. Molecule Keywords¶; In addition to specifying the geometry, additional information can be; provided in the molecule block molecule optional_molecule_name {...}. Charge & Multiplicity; If two integers charge multiplicity are encountered on any; line of the molecule block, they are interpreted as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; c",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:13131,Integrability,depend,dependent,13131,"e Keywords). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice for symbol.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with \(D_{2h}\) symmetry in \(C_{2v}\), the; \(C_2\) axis can be chosen as either the \(x\), the \(y\), or the \(z\); these can; be specified by requesting the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For \(C_s\) symmetry the labels csx, csy, and; csz request the \(yz\), \(xz\), and \(xy\) planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference computations, such as numerical vibrational; frequencies, might lower the symmetry of the molecule. When this happens; symmetry-dependent arrays, such as SOCC, are automatically remapped; to the lower symmetry. For example, if we were to investigate the \(^2B_1\); state of water cation, we can specify; 1SOCC = [0, 0, 1, 0]. in the input file. If any ensuing computations lower the symmetry, the above; array will be appropriately remapped. For example, reducing the symmetry to; \(C_s\) (with the molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:214,Modifiability,flexible,flexible,214,"﻿. Molecule and Geometry Specification. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File. Molecule and Geometry Specification¶. Coordinates¶; PSI4 has a very flexible input parser that allows the user to provide; geometries as Cartesian coordinates, Z-matrix variables, or a combination of; both. The use of fixed values and variables are supported for both. For; example, the geometry for H2 can be specified a number of ways, using the; molecule optional_molecule_name {...} block.; 1; 2; 3; 4molecule {; H; H 1 0.9; }. or; 1; 2; 3; 4; 5molecule {; H; H 1 r; r = 0.9; }. or; 1; 2; 3; 4molecule {; H1; H2 H1 0.9; }. or; 1; 2; 3; 4molecule {; H 0.0 0.0 0.0; H 0.0 0.0 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 0.0; H 0.0 0.0 r; r = 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 -r; H 0.0 0.0 r; r = 0.45; }. Blank lines are ignored and, unlike regular Python syntax, indentation within; the molecule block does not matter, although the molecule keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.7176",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:315,Modifiability,variab,variables,315,"﻿. Molecule and Geometry Specification. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File. Molecule and Geometry Specification¶. Coordinates¶; PSI4 has a very flexible input parser that allows the user to provide; geometries as Cartesian coordinates, Z-matrix variables, or a combination of; both. The use of fixed values and variables are supported for both. For; example, the geometry for H2 can be specified a number of ways, using the; molecule optional_molecule_name {...} block.; 1; 2; 3; 4molecule {; H; H 1 0.9; }. or; 1; 2; 3; 4; 5molecule {; H; H 1 r; r = 0.9; }. or; 1; 2; 3; 4molecule {; H1; H2 H1 0.9; }. or; 1; 2; 3; 4molecule {; H 0.0 0.0 0.0; H 0.0 0.0 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 0.0; H 0.0 0.0 r; r = 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 -r; H 0.0 0.0 r; r = 0.45; }. Blank lines are ignored and, unlike regular Python syntax, indentation within; the molecule block does not matter, although the molecule keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.7176",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:381,Modifiability,variab,variables,381,"﻿. Molecule and Geometry Specification. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon: Structuring an Input File. Molecule and Geometry Specification¶. Coordinates¶; PSI4 has a very flexible input parser that allows the user to provide; geometries as Cartesian coordinates, Z-matrix variables, or a combination of; both. The use of fixed values and variables are supported for both. For; example, the geometry for H2 can be specified a number of ways, using the; molecule optional_molecule_name {...} block.; 1; 2; 3; 4molecule {; H; H 1 0.9; }. or; 1; 2; 3; 4; 5molecule {; H; H 1 r; r = 0.9; }. or; 1; 2; 3; 4molecule {; H1; H2 H1 0.9; }. or; 1; 2; 3; 4molecule {; H 0.0 0.0 0.0; H 0.0 0.0 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 0.0; H 0.0 0.0 r; r = 0.9; }. or; 1; 2; 3; 4; 5molecule {; H 0.0 0.0 -r; H 0.0 0.0 r; r = 0.45; }. Blank lines are ignored and, unlike regular Python syntax, indentation within; the molecule block does not matter, although the molecule keyword itself must; be aligned within the input according to standard Python syntax. For more; examples of geometry specification, see the mints1 input file in the samples; folder. It is also possible to mix Cartesian and Z-matrix geometry; specifications, as demonstrated in the mints4 and; mints6 sample input files. For example, consider the following; geometry specification, taken from the mints6 input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34molecule alanine {; N -1.527107413251 0.745960643462 0.766603000356; C -0.075844098953 0.811790225041 0.711418672248; C 0.503195220163 -0.247849447550 -0.215671574613; O -0.351261319421 -0.748978309671 -1.089590304723; O 1.639498336738 -0.571249748886 -0.174705953194; H -1.207655674855 -0.365913941094 -0.918035522052; # First, remove the H from the alpha carbon. This line could be deleted; # and is only included for completeness; #H 0.429560656538 0.7176",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:14573,Modifiability,adapt,adapted,14573,"molecular plane defining the mirror plane), the above; array will be automatically interpreted as:; 1SOCC = [0, 1]. Some caution is required, however. The \(^2A_1\) state can be obtained with; the; 1SOCC = [1, 0, 0, 0]. specification, which would become; 1SOCC = [1, 0]. under the above-mentioned reduction in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragm",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:5156,Performance,perform,performed,5156,"reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Gh",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:5208,Performance,perform,performed,5208,"reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Gh",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:8353,Performance,perform,performed,8353,"4/include/psi4/masses.h. See freq-isotope for about; the only use to which isotopologues can presently be put in PSI4. PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:; 1; 2; 3molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; PSI4 to search PubChem for a starting structure. The search is actually; performed for compounds whose name contains “benzene”, so multiple; entries will be returned. If the name provided (“benzene” in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are printed to the output file, prompting the user to provide a more; specific name. For example, if we know that we want to run a computation on a; compound whose name(s) contain “benzene”, but we’re not sure of the exact IUPAC; name, the following input can be used:; 1; 2; 3molecule benzene {; pubchem:benzene*; }. Appending the “*” prevents an exact match from being found and, at the time; of writing, the following results are displayed in the output file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21Chemical ID IUPAC Name; 241 benzene; 7371 benzenesulfonic acid; 91526 benzenesulfonate; 244 phenylmethanol; 727 1,2,3,4,5,6-hexachlorocyclohexane; 240 benzaldehyde; 65723 benzenesulfonohydrazide; 74",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:10306,Performance,optimiz,optimized,10306,"1,2,3,4,5,6-hexachlorocyclohexane; 240 benzaldehyde; 65723 benzenesulfonohydrazide; 74296 N-phenylbenzenesulfonamide; 289 benzene-1,2-diol; 243 benzoic acid; 7370 benzenesulfonamide; 636822 1,2,4-trimethoxy-5-[(E)-prop-1-enyl]benzene; 7369 benzenesulfonyl chloride; 12932 N-[2-di(propan-2-yloxy)phosphinothioylsulfanylethyl]benzenesulfonamide; 7505 benzonitrile; 78438 N-[anilino(phenyl)phosphoryl]aniline; 12581 3-phenylpropanenitrile; 517327 sodium benzenesulfonate; 637563 1-methoxy-4-[(E)-prop-1-enyl]benzene; 252325 [(E)-prop-1-enyl]benzene. Note that some of these results do not contain the string “benzene”; these; compounds have synonyms containing that text. We can now replace the; “benzene*” in the input file with one of the above compounds using either the; IUPAC name or the CID provided in the list, viz:; 1; 2; 3molecule benzene {; pubchem:637563; }. or; 1; 2; 3molecule benzene {; pubchem:1-methoxy-4-[(E)-prop-1-enyl]benzene; }. Some of the structures in the database are quite loosely optimized and do not; have the correct symmetry. Before starting the computation, PSI4 will; check to see if the molecule is close to having each of the possible; symmetries, and will adjust the structure accordingly so that the maximum; symmetry is utilized.; The standard keywords, described in Molecule Keywords, can be; used in conjunction to specify charge, multiplicity, symmetry to use, etc. . Symmetry¶; For efficiency, PSI4 can utilize the largest Abelian subgroup of the full; point group of the molecule. Concomitantly, a number of quantities, such as; SOCC and DOCC, are arrays whose entries pertain to irreducible; representations (irreps) of the molecular point group. Ordering of irreps; follows the convention used in Cotton’s Chemical Applications of Group; Theory, as detailed in Table Irreps. We refer to this; convention as “Cotton Ordering” hereafter. Ordering of irreducible representations (irreps) used in PSI4¶. Point Group; 1; 2; 3; 4; 5; 6; 7; 8. \(C_1\); \(A\);  ;  ;",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:15946,Performance,perform,perform,15946,"le, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:18086,Performance,load,load,18086,"cular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). Molecules can be initiated from XYZ files and fragmented for SAPT computations.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39# >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stu",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:18285,Performance,load,load,18285,"; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_out() # print alternate coord array to output file. formaldehyde.set_geometry(geom2psi) # load alternate coordinates into molecule; formaldehyde.update_geometry() # update the molecule internals; formaldehyde.print_out() # print new molecule to output file; compare_values(28.9950517332, formaldehyde.nuclear_repulsion_energy(), 4, ""geom2 took""). Molecules can be initiated from XYZ files and fragmented for SAPT computations.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39# >>> cat mol1.xyz; #7; #; #O 0.00000000 -0.05786571 -1.47979303; #N 0.00000000 0.01436394 1.46454628; #H 0.00000000 0.82293384 -1.85541474; #H 0.81348351 0.39876776 1.92934049; #H 0.00000000 0.07949567 -0.51934253; #H 0.00000000 -0.98104857 1.65344779; #H -0.81348351 0.39876776 1.92934049. # >>> cat mol2.xyz; # 6 au; # stuff; # C 0.00000000000000 0.00000000000000 5.26601138679877; # C 0.00000000000000 0.00000000000000 -3.15195886530135; # H 0.00000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:4439,Safety,detect,detected,4439,"d as the molecular charge; and multiplicity (\(2 M_s + 1\)), respectively. For multi-fragment; complexes, each fragment can have a charge multiplicity line.; Units; By default, Ångström units are used; this is changed by adding; a line that reads units spec, where spec is one; of ang, angstrom, a.u., au, or bohr.; Orientation; Certain computations require that the molecule is not reoriented. This; can be achieved by adding either no_reorient or noreorient.; To prevent even recentering of the molecule, add no_com or nocom.; PubChem; A line reading pubchem:mol fetches the geometry for molecule; mol from the PubChem database, where mol is either; the IUPAC molecule name or the CID number. See PubChem Database for; details.; Symmetry; The symmetry can be specified by a line reading symmetry; symbol, where symbol is the Schönflies symbol; of the (Abelian) point group to use for the computation, one of one of; c1, c2, ci, cs, d2, c2h, c2v, or d2h.; This need not be specified, as the molecular symmetry is automatically; detected by PSI4. See Symmetry for details.; Fragments; A line reading -- is interpreted as the separator between two non-covalently; bound molecular fragments. See Non-Covalently Bonded Molecule Fragments for details. Multiple Molecules¶; To facilitate more elaborate computations, it is possible to provide a name for; each molecule and tell PSI4 which one should be used in a given; calculation. For example, consider the following input file:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18molecule h2 {; H; H 1 0.9; }. set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). molecule h {; H; }. set basis cc-pvdz; set reference uhf; energy('scf') # on H. Here, two separate jobs are performed on two different molecules; the first is; performed on H2, while the second is for H atom. The last molecule to be; specified is the “active” molecule by default. To explicitly activate a named; molecule, the activate command is provided. With i",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:11949,Safety,detect,detect,11949,"ps; follows the convention used in Cotton’s Chemical Applications of Group; Theory, as detailed in Table Irreps. We refer to this; convention as “Cotton Ordering” hereafter. Ordering of irreducible representations (irreps) used in PSI4¶. Point Group; 1; 2; 3; 4; 5; 6; 7; 8. \(C_1\); \(A\);  ;  ;  ;  ;  ;  ;  . \(C_i\); \(A_g\); \(A_u\);  ;  ;  ;  ;  ;  . \(C_2\); \(A\); \(B\);  ;  ;  ;  ;  ;  . \(C_s\); \(A'\); \(A''\);  ;  ;  ;  ;  ;  . \(D_2\); \(A\); \(B_1\); \(B_2\); \(B_3\);  ;  ;  ;  . \(C_{2v}\); \(A_1\); \(A_2\); \(B_1\); \(B_2\);  ;  ;  ;  . \(C_{2h}\); \(A_g\); \(B_g\); \(A_u\); \(B_u\);  ;  ;  ;  . \(D_{2h}\); \(A_g\); \(B_{1g}\); \(B_{2g}\); \(B_{3g}\); \(A_u\); \(B_{1u}\); \(B_{2u}\); \(B_{3u}\). For example, water (\(C_{2v}\) symmetry) has three doubly occupied \(A_1\); orbitals, as well as one each of \(B_1\) and \(B_2\) symmetry; the; corresponding DOCC array is therefore:; 1DOCC = [3, 0, 1, 1]. Although PSI4 will detect the symmetry automatically, and use the largest; possible Abelian subgroup, the user might want to run in a lower point group.; To do this the molecule keyword symmetry symbol can be used; (see Molecule Keywords). In most cases the standard; Schönflies symbol (one of c1, c2, ci, cs, d2,; c2h, c2v, d2h will suffice for symbol.; For certain computations, the user might want to specify which particular; subgroup is to be used by appending a unique axis specifier. For example when; running a computation on a molecule with \(D_{2h}\) symmetry in \(C_{2v}\), the; \(C_2\) axis can be chosen as either the \(x\), the \(y\), or the \(z\); these can; be specified by requesting the symmetry as c2vx, c2vy, or c2vz, respectively.; Likewise the c2x, c2y, c2z, c2hx, c2hy, and c2hz; labels are valid. For \(C_s\) symmetry the labels csx, csy, and; csz request the \(yz\), \(xz\), and \(xy\) planes be used as the mirror plane,; respectively. If no unique axis is specified, PSI4 will choose an appropriate; subgroup.; Certain types of finite difference com",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:16990,Security,access,accessible,16990,"he; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:17182,Security,access,access,17182,"fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions (that have been exported via pybind11) documented thereat; are accessible through the handle option_molecule_name in; molecule optional_molecule_name {...}. The molecular geometry can be got and set and manipulated as a; Matrix object. Below shows how to access; coordinates in an input file in Python.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29molecule formaldehyde {; C 0.0 0.0 0.0; O 0.0 1.2 0.0; H -0.8 -0.3 0.0; H 0.8 -0.3 0.0 # set geometry in angstroms; }. formaldehyde.update_geometry() # update the molecule internals since pre-energy()-like call; formaldehyde.print_out() # print molecule to output file; geom1psi = formaldehyde.geometry() # get coordinates in bohr as a psi4.Matrix. geom1psi.print_out() # print coordinates array to output file; geom1py = mat2arr(geom1psi) # get coordinates as a Python array; print geom1py # print coordinates to screen. geom2py = [[ 0.0, 0.0, 0.0],; [ 0.0, 1.5, 0.0],; [-0.8, -0.3, 0.0],; [ 0.8, -0.3, 0.0]] # define alternate coordinates in angstroms as Python array. geom2psi = psi4.Matrix(4, 3) # initialize psi4.Matrix; geom2psi.set(geom2py) # load Python array into psi4.Matrix; geom2psi.scale(1.0/psi_bohr2angstroms) # scale into bohr; geom2psi.print_o",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:20152,Security,access,accessible,20152,"0000000000000 0.00000000000000 7.28558683837122; # H 0.00000000000000 0.00000000000000 -1.12178201232889; # N 0.00000000000000 0.00000000000000 3.08339310458383; # N 0.00000000000000 0.00000000000000 -5.33865984413460. sapt = {'mol1': -0.0105313323529,; 'mol2': -0.00839486625709}. nre = {'mol1': 38.8138764635,; 'mol2': 72.3451968428}. set basis jun-cc-pvdz. for mol in ['mol1', 'mol2']:; filen = mol + '.xyz'; p4mol = Molecule.init_with_xyz(filen) # create molecule from file above; fragmentedmol = auto_fragments(molecule=p4mol) # fragment with BFS algorithm; activate(fragmentedmol) # activate returned molecule (for sapt). e = energy('sapt0') # run SAPT that requires 2 fragments; compare_values(sapt[mol], e, 5, '%s sapt ok' % mol); compare_values(nre[mol], p4mol.nuclear_repulsion_energy(), 4, '%s ok' % mol); clean() # clean scratch between loop calcs. The essential element, mass and coordinate information of the molecule is accessible; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43molecule eneyne {; 0 1; C_ene 0.000000 -0.667578 -2.124659; C_ene 0.000000 0.667578 -2.124659; H_ene@2.014 0.923621 -1.232253 -2.126185; H_ene -0.923621 -1.232253 -2.126185; H_ene -0.923621 1.232253 -2.126185; Gh(H_ene) 0.923621 1.232253 -2.126185; --; 0 1; X 9.0 9.0 9.0; C_yne 0.000000 0.000000 2.900503; C_yne 0.000000 0.000000 1.693240; H_yne 0.000000 0.000000 0.627352; H_yne 0.000000 0.000000 3.963929; }. eneyne.update_geometry(). for iat in range(eneyne.natom()):; print """"""{:4} {:4} {:12} {:8.4f} {:12.6f} {:12.6f} {:12.6f} {:12.6f}"""""".format(; eneyne.Z(iat), # atomic number; eneyne.symbol(iat), # element symbol; eneyne.label(iat), # input element label; eneyne.charge(iat), # element charge; eneyne.x(iat), # x-coordinate; eneyne.y(iat), # y-coordinate; eneyne.z(iat), # z-coordinate; eneyne.mass(iat), # mass; ). # 6.0 C C_ENE 6.0000 -0.031900 -1.218981 -3.948079 12.000000; # 6.",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:6300,Usability,simpl,simplified,6300," by default. To explicitly activate a named; molecule, the activate command is provided. With it, the above input file can be; equivalently written as follows. Alternatively, the molecule can be specified; directly to the computing function. Below, the third calculation is the same as; the first.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28molecule h2 {; H; H 1 0.9; }. molecule h {; H; }. activate(h2); set basis cc-pvdz; set reference rhf; energy('scf') # on H2. clean(). activate(h); set basis cc-pvdz; set reference uhf; energy('scf') # on H. # --------------------------------------; # equivalent to previous input ends here. clean(). set reference rhf; energy('scf', molecule=h2) # on H2. Job Control Keywords provides more details about the job control; and calculation keywords used in the above examples. Ghost Atoms¶; While many common computations, particularly SAPT and counterpoise corrections, can; be greatly simplified using the notation described in Non-Covalently Bonded Molecule Fragments,; manual specification of ghost atoms is sometimes required. Either; 1; 2; 3; 4molecule he2 {; He; Gh(He) 1 2.0; }. or; 1; 2; 3; 4molecule he2 {; He; @He 1 2.0; }. will generate a helium dimer with the second atom ghosted, i.e., possessing; basis functions but no electrons or nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this will change the; molecule’s point group symmetry.; 1; 2; 3; 4; 5; 6molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.9304",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:7659,Usability,intuit,intuitive,7659,"nuclear charge. See dfmp2_1; and ghosts for a demonstration of both mechanisms for specifying; ghost atoms. Isotopic Substitution¶. Caution; Use of isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this will change the; molecule’s point group symmetry.; 1; 2; 3; 4; 5; 6molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by PSI4 can be found at; psi4/psi4/include/psi4/masses.h. See freq-isotope for about; the only use to which isotopologues can presently be put in PSI4. PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:; 1; 2; 3molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; PSI4 to search PubChem for a starting structure. The search is actually; performed for compounds whose name contains “benzene”, so multiple; entries will be returned. If the name provided (“benzene” in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are print",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:7763,Usability,intuit,intuitive,7763,"f isotopic substitution in PSI4 is not well; developed, and the syntax is subject to change. At present, isotopes can only be specified at creation-time of the molecule; The syntax for a deuterium- and tritium-substituted water is below. Note; that asymmetric isotopic substitution such as this will change the; molecule’s point group symmetry.; 1; 2; 3; 4; 5; 6molecule dto {; units au; O 0.00000000 0.00000000 0.00000000; H@2.014101779 0.00000000 1.93042809 -1.10715266; H_label@3.01604927 0.00000000 -1.93042809 -1.10715266; }. The masses used by PSI4 can be found at; psi4/psi4/include/psi4/masses.h. See freq-isotope for about; the only use to which isotopologues can presently be put in PSI4. PubChem Database¶; Obtaining rough starting guess geometries can be burdensome. The Z-matrix; coordinate system was designed to provide chemists with an intuitive method for; guessing structures in terms of bond lengths and angles. While Z-matrix input is; intuitive for small molecules with few degrees of freedom, it quickly becomes; laborious as the system size grows. To obtain a reasonable starting guess; geometry, PSI4 can take a chemical name as input; this is then used; to attempt to retrieve Cartesian coordinates from the [PubChem] database.; For example, to run a computation on benzene, we can use the following molecule specification:; 1; 2; 3molecule benzene {; pubchem:benzene; }. If the computer is connected to the internet, the above code will instruct; PSI4 to search PubChem for a starting structure. The search is actually; performed for compounds whose name contains “benzene”, so multiple; entries will be returned. If the name provided (“benzene” in the above; example) exactly matches one of the results, that entry will be used. If no; exact match is found the results, along with a unique chemical identifier; (CID), are printed to the output file, prompting the user to provide a more; specific name. For example, if we know that we want to run a computation on a; compou",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:14717,Usability,simpl,simple,14717,"on in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:14749,Usability,simpl,simply,14749,"on in symmetry. The \(^2B_2\) state,; whose singly-occupied orbitals are; 1SOCC = [0, 0, 0, 1]. would be mapped to; 1SOCC = [1, 0]. which is the same occupation as the \(^2A_1\) state. In this case, the; \(^2A_1\) state is lower in energy, and is not problematic. The distorted; geometries for the \(^2B_2\) state are excited states that are subject to; variational collapse. One way to obtain reliable energies for these states is; to use a multi-state method; in this case it’s easier to run the entire; computation in the lowest symmetry needed during the finite difference; procedure. Non-Covalently Bonded Molecule Fragments¶; PSI4 has an extensive range of tools for treating non-covalent; intermolecular forces, including counterpoise corrections and symmetry adapted; perturbation theory methods. These require the definition of which fragments; are interacting within the complex. PSI4 provides a very simple mechanism; for doing so: simply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:15713,Usability,simpl,simply,15713,"imply define the complex’s geometry using the standard; Cartesian, Z-matrix, or mixture thereof, specifications and then place two; dashes between nonbonded fragments. For example, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; ac",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/psithonmol.html:15929,Usability,simpl,simple,15929,"le, to study the interaction; energy of ethane and ethyne molecules, we can use the following molecule; block:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15molecule eneyne {; 0 1; C 0.000000 -0.667578 -2.124659; C 0.000000 0.667578 -2.124659; H 0.923621 -1.232253 -2.126185; H -0.923621 -1.232253 -2.126185; H -0.923621 1.232253 -2.126185; H 0.923621 1.232253 -2.126185; --; 0 1; C 0.000000 0.000000 2.900503; C 0.000000 0.000000 1.693240; H 0.000000 0.000000 0.627352; H 0.000000 0.000000 3.963929; }. In this case, the charge and multiplicity of each interacting fragment is; explicitly specified. If the charge and multiplicity are specified for the; first fragment, it is assumed to be the same for all fragments. When; considering interacting fragments, the overall charge is simply the sum of all; fragment charges, and any unpaired electrons are assumed to be coupled to; yield the highest possible \(M_s\) value.; Having defined a molecule containing fragments like eneyne above, it; is a simple matter to perform calculations on only a subset of the; fragments. For instance, the commands below run a scf first on the ethene; fragment alone (extract_subsets(1) pulls out fragment 1 as Real atoms; and discards remaining fragments) and next on the ethene fragment with the; ethyne fragment ghosted (extract_subsets(1,2) pulls out fragment 1 as; Real atoms and sets fragment 2 as Ghost atoms). For beyond bimolecular; complexes, arrays can be used, e.g. extract_subsets(2,[1,3]):; 1; 2; 3; 4; 5; 6; 7mA = eneyne.extract_subsets(1); energy('scf'). clean(). mAcp = eneyne.extract_subsets(1,2); energy('scf'). If the molecule contains fragments but is not conveniently ordered for the; -- marker, the auto_fragments() function can be applied, as shown in; pywrap-basis, to return as active molecule the previous; active molecule, only fragmented. Advanced Python¶; A named molecule in an input file is a full-fledged instance of the; powerful C++ Molecule class. Thus, all member; functions ",MatchSource.WIKI,psi4manual/1.3.2/psithonmol.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/psithonmol.html
https://psicode.org/psi4manual/1.3.2/py-modindex.html:547,Deployability,update,updated,547,"﻿. Python Module Index. Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Python Module Index. a | ; b | ; c | ; h | ; j | ; n | ; p | ; r | ; s.  . a. A24. A24alt. ACENES.  . b. BAKERJCC93. BAKERJCC96. BASIC. BBI. BENCH12.  . c. CORE.  . h. HBC6. HSG. HTBH. HTR40.  . j. JSCH.  . n. NBC10. NHTBH.  . p. psi4.    ; psi4.core.    ; psi4.driver.  . r. RGC10. RSE42.  . s. S22. S22by5. S66. S66by8. SSI. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/py-modindex.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/py-modindex.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:537,Availability,avail,available,537,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:885,Availability,avail,available,885,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3980,Deployability,update,updated,3980,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:1064,Energy Efficiency,energy,energy,1064,"  .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kw",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:1150,Energy Efficiency,energy,energy,1150,"e; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENER",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:1413,Energy Efficiency,energy,energy,1413," follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_s",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:1473,Energy Efficiency,energy,energy,1473,"sed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:2049,Energy Efficiency,energy,energy,2049,"pute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total ene",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3034,Energy Efficiency,energy,energy,3034,"ct conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3089,Energy Efficiency,energy,energy,3089,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3146,Energy Efficiency,energy,energy,3146,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3202,Energy Efficiency,energy,energy,3202,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3265,Energy Efficiency,energy,energy,3265,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3329,Energy Efficiency,energy,energy,3329,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3392,Energy Efficiency,energy,energy,3392,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:3639,Energy Efficiency,energy,energy,3639,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:554,Modifiability,variab,variables,554,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:985,Modifiability,variab,variables,985,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:1872,Modifiability,variab,variable,1872,"r MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:2579,Modifiability,variab,variable,2579,"si4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:2735,Modifiability,variab,variable,2735,"; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 metho",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:2713,Performance,optimiz,optimizer,2713,"; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 metho",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:2780,Performance,optimiz,optimizations,2780,"5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sideba",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html:467,Security,access,accessed,467,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias-1.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:537,Availability,avail,available,537,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:885,Availability,avail,available,885,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3980,Deployability,update,updated,3980,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:1064,Energy Efficiency,energy,energy,1064,"  .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kw",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:1150,Energy Efficiency,energy,energy,1150,"e; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENER",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:1413,Energy Efficiency,energy,energy,1413," follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_s",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:1473,Energy Efficiency,energy,energy,1473,"sed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:2049,Energy Efficiency,energy,energy,2049,"pute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total ene",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3034,Energy Efficiency,energy,energy,3034,"ct conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3089,Energy Efficiency,energy,energy,3089,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3146,Energy Efficiency,energy,energy,3146,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3202,Energy Efficiency,energy,energy,3202,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3265,Energy Efficiency,energy,energy,3265,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3329,Energy Efficiency,energy,energy,3329,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3392,Energy Efficiency,energy,energy,3392,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:3639,Energy Efficiency,energy,energy,3639,"('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:554,Modifiability,variab,variables,554,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:985,Modifiability,variab,variables,985,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:1872,Modifiability,variab,variable,1872,"r MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:2579,Modifiability,variab,variable,2579,"si4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:2735,Modifiability,variab,variable,2735,"; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 metho",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:2713,Performance,optimiz,optimizer,2713,"; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 metho",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:2780,Performance,optimiz,optimizations,2780,"5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci calculation and collect conventional quantities; energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'); e_mp2 = e_scf + ce_mp2 # reform mp2 and mp3 total energies for printing; e_mp3 = e_scf + ce_mp3. # Compute quantities particular to MP2.5; ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25; psi4.set_variable('MP2.5 CORRELATION ENERGY', ce_mp25) # add new method's important results; psi4.set_variable('MP2.5 TOTAL ENERGY', e_mp25) # to PSI variable repository; psi4.set_variable('CURRENT CORRELATION ENERGY', ce_mp25); psi4.set_variable('CURRENT ENERGY', e_mp25) # geometry optimizer tracks this variable, permits; # MP2.5 finite difference optimizations; # build string of title banner and print results; banners = ''; banners += """"""psi4.print_out('\\n')\n""""""; banners += """"""banner(' MP2.5 ')\n""""""; banners += """"""psi4.print_out('\\n')\n\n""""""; exec banners. tables = ''; tables += """""" SCF total energy: %16.8f\n"""""" % (e_scf); tables += """""" MP2 total energy: %16.8f\n"""""" % (e_mp2); tables += """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); tables += """""" MP3 total energy: %16.8f\n\n"""""" % (e_mp3); tables += """""" MP2 correlation energy: %16.8f\n"""""" % (ce_mp2); tables += """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25); tables += """""" MP3 correlation energy: %16.8f\n"""""" % (ce_mp3); psi4.print_out(tables) # prints nice header and table of all involved quantities to output file. return e_mp25. One final step is necessary. At the end of the aliases.py file, add; the following line.; 1procedures['energy']['mp2.5'] = run_mp2_5. This permits the newly defined MP2.5 method to be called in the input file; with the following command.; 1energy('mp2.5'). «; hide menu. menu; sideba",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickaddalias.html:467,Security,access,accessed,467,"﻿. Defining a Method Alias. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Defining a Method Alias¶. Note; No recompile of the PSI4 program is necessary for changes made to; files in $PSIDATADIR aka psi4/psi4/share/psi4, including those described below. Caution; As of 1.0, the below, while essentially still correct, is so aged; as to be difficult to follow. Since quantum chemical methods in PSI4 are accessed through Python functions, and; most important quantities are available as PSI variables, it is straightforward; to create aliases to commonly run calculations or to define hybrid methods. The; psi4/psi4/driver/aliases.py file is intended for editing by the user for; this purpose.; As an example, the MP2.5 method; (which admittedly is already built in to PSI4); is the average of MP2 and MP3. The latter is; available through the arbitrary order MPn code and returns all lower energies; along with it in PSI variables. The following is basic code that will compute; and return the MP2.5 energy.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14def run_mp2_5(name, **kwargs):. energy('mp3', **kwargs); e_scf = psi4.get_variable('SCF TOTAL ENERGY'); ce_mp2 = psi4.get_variable('MP2 CORRELATION ENERGY'); ce_mp3 = psi4.get_variable('MP3 CORRELATION ENERGY'). ce_mp25 = 0.5 * (ce_mp2 + ce_mp3); e_mp25 = e_scf + ce_mp25. print """""" MP2.5 total energy: %16.8f\n"""""" % (e_mp25); print """""" MP2.5 correlation energy: %16.8f\n"""""" % (ce_mp25). return e_mp25. Compare the above to the method that resides in psi4/psi4/driver/aliases.py.; The rationale for the changes is indicated in the comments below.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38def run_mp2_5(name, **kwargs):; lowername = name.lower() # handy variable with name keyword in lowercase; kwargs = kwargs_lower(kwargs) # removes case sensitivity in keyword names. # Run detci c",MatchSource.WIKI,psi4manual/1.3.2/quickaddalias.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickaddalias.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:1428,Availability,avail,available,1428,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (int",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:4086,Deployability,update,updated,4086,"10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:505,Energy Efficiency,energy,energy,505,"﻿. Creating a Database. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Creating a Database¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:1082,Energy Efficiency,energy,energy,1082,"ing a Database. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Creating a Database¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re dete",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:2420,Energy Efficiency,charge,charge,2420,"agents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:2923,Energy Efficiency,charge,charge,2923," you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:3007,Energy Efficiency,charge,charge,3007," you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:3550,Integrability,rout,route,3550,"10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:3557,Modifiability,variab,variable,3557,"10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html:1154,Usability,simpl,simply,1154,"the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an examp",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase-1.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:1428,Availability,avail,available,1428,"le molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (int",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:4086,Deployability,update,updated,4086,"10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:505,Energy Efficiency,energy,energy,505,"﻿. Creating a Database. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Creating a Database¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:1082,Energy Efficiency,energy,energy,1082,"ing a Database. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. Creating a Database¶. Note; No recompile of the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re dete",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:2420,Energy Efficiency,charge,charge,2420,"agents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:2923,Energy Efficiency,charge,charge,2923," you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:3007,Energy Efficiency,charge,charge,3007," you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · .",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:3550,Integrability,rout,route,3550,"10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:3557,Modifiability,variab,variable,3557,"10.py for an example. The first line for each xyz file should be the number of atoms in the system.; The second line for each xyz file can be blank (interpreted as no comment), anything (interpreted as a comment), or two integers and anything (interpreted as charge, multiplicity, and remainder as comment).; The third and subsequent lines have four fields: the element symbol and the three cartesian coordinates in angstroms. The atom lines should not contain any dummy atoms (what’s the use in cartesian form). For dimer systems, an algorithm is used to apportion the atoms into two fragments; thus the atoms need not be arranged with all fragmentA atoms before all fragmentB atoms. The algorithm will fail for very closely arranged fragments. For dimers, any charge and multiplicity from the second line will be applied to fragmentA (python); charge and multiplicity may need to be redistributed later in the editing step. Run script psi4/share/scripts/ixyz2database.py. Move into the directory where all your xyz files are located. Run the; script, probably as $PSIDATADIR/scripts/ixyz2database.py. (If you; run it in place, there won’t be any path problems. It will ask a number of; questions about your intended database and generate a python file; named for your database. Uppercase is preferable for database names; (according to Sherrill lab convention). Note your choice for the route; variable for the next step. Edit file database.py. According to your responses in to questions in the ixyz2database.py script,; several bullets will be printed of edits you necessarily or optionally; should make. Copy your new database into psi4/share/databases.; Alternately, append the directory containing your new database into; PSIPATH. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Customization: Adding Simple Extensions. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/quickadddatabase.html:1154,Usability,simpl,simply,1154,"the PSI program is necessary for changes made to; files in $PSIDATADIR, including those described below. A necessary consideration in constructing a database is the distinction; between reagents and reactions. A reagent is a single molecular system; (may be a dimer) whose geometry you are possession of and whose electronic; energy may be of interest. A reaction is a combination of one or more; reagent energies whose value you are interested in and a reference value; for which you may or may not be in possession of. A few examples follow.; In a database of interaction energies, the reagents are dimers and their; component monomers (usually derived from the dimer geometry), and the; reactions are the dimer less monomers energies. In a database of barrier; heights, the reagents are reactants, products, and transition-state; structures, and the reactions are the transition-states less; minimum-energy structures. Possibly you may have a collection of; structures to simply be acted upon in parallel, in which case the; structures are both the reagents and the reactions. The role of the; database.py file is to collect arrays and dictionaries that define the; geometries of reagents (GEOS), their combination into reactions (RXNM &; ACTV), available reference values for reactions (BIND), and brief comments; for reagents and reactions (TAGL). The journey from reagent geometries to; functional database.py file is largely automated, in a process described; below. Prepare geometry files; Assemble xyz files for all intended reagent systems in a directory.; Follow the rules below for best results. The filename for each xyz; file should be the name of the system. lowercase or MixedCase is; preferable (according to Sherrill lab convention). Avoid dashes and; dots in the name as python won’t allow them. If you’re determined to; have dashes and dots, they must be replaced by other characters in the; process_input line, then translated back in the GEOS section; see; NBC10.py for an examp",MatchSource.WIKI,psi4manual/1.3.2/quickadddatabase.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/quickadddatabase.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:5815,Deployability,update,updated,5815,"nd nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. table of contents. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory; Keywords; RELATIVISTIC; BASIS_RELATIVISTIC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:659,Energy Efficiency,energy,energy,659,"﻿. Scalar relativistic Hamiltonians. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. Scalar relativistic Hamiltonians¶; Code author: Prakash Verma and Francesco A. Evangelista; Section author: Prakash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:698,Energy Efficiency,energy,energy,698,"﻿. Scalar relativistic Hamiltonians. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. Scalar relativistic Hamiltonians¶; Code author: Prakash Verma and Francesco A. Evangelista; Section author: Prakash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:1436,Energy Efficiency,energy,energy,1436,"based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basi",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:1808,Energy Efficiency,energy,energy,1808," [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basis set to solve the modified Dirac equation.; 1; 2; 3; 4; 5set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for t",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:3014,Energy Efficiency,energy,energy,3014," -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basis set to solve the modified Dirac equation.; 1; 2; 3; 4; 5set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dag",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:3059,Energy Efficiency,energy,energy,3059," -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basis set to solve the modified Dirac equation.; 1; 2; 3; 4; 5set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dag",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:3528,Energy Efficiency,energy,energy,3528,"at when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot ",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:3663,Energy Efficiency,energy,energy,3663,"at when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot ",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:3726,Energy Efficiency,energy,energy,3726,"sis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:3882,Energy Efficiency,energy,energy,3882,"sis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:4311,Energy Efficiency,energy,energy,4311,"_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. K",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:4942,Energy Efficiency,energy,energy,4942,"ergy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. table of contents. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory; Keywords; RELATIVISTIC; BASIS_RELATIVISTIC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:4440,Integrability,depend,depends,4440,"inetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decont",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:3941,Modifiability,coupling,coupling,3941,"sis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:4160,Modifiability,coupling,coupling,4160,"_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. K",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:4814,Modifiability,extend,extended,4814,"ergy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. table of contents. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory; Keywords; RELATIVISTIC; BASIS_RELATIVISTIC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:1251,Performance,perform,perform,1251,"kash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the mod",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:1228,Usability,simpl,simple,1228,"kash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the mod",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic-1.html:2712,Usability,simpl,simply,2712,"lculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basis set to solve the modified Dirac equation.; 1; 2; 3; 4; 5set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron inte",MatchSource.WIKI,psi4manual/1.3.2/relativistic-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic-1.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:5815,Deployability,update,updated,5815,"nd nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. table of contents. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory; Keywords; RELATIVISTIC; BASIS_RELATIVISTIC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:659,Energy Efficiency,energy,energy,659,"﻿. Scalar relativistic Hamiltonians. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. Scalar relativistic Hamiltonians¶; Code author: Prakash Verma and Francesco A. Evangelista; Section author: Prakash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:698,Energy Efficiency,energy,energy,698,"﻿. Scalar relativistic Hamiltonians. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. Scalar relativistic Hamiltonians¶; Code author: Prakash Verma and Francesco A. Evangelista; Section author: Prakash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:1436,Energy Efficiency,energy,energy,1436,"based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basi",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:1808,Energy Efficiency,energy,energy,1808," [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basis set to solve the modified Dirac equation.; 1; 2; 3; 4; 5set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for t",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:3014,Energy Efficiency,energy,energy,3014," -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basis set to solve the modified Dirac equation.; 1; 2; 3; 4; 5set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dag",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:3059,Energy Efficiency,energy,energy,3059," -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basis set to solve the modified Dirac equation.; 1; 2; 3; 4; 5set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dag",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:3528,Energy Efficiency,energy,energy,3528,"at when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot ",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:3663,Energy Efficiency,energy,energy,3663,"at when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot ",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:3726,Energy Efficiency,energy,energy,3726,"sis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:3882,Energy Efficiency,energy,energy,3882,"sis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:4311,Energy Efficiency,energy,energy,4311,"_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. K",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:4942,Energy Efficiency,energy,energy,4942,"ergy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. table of contents. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory; Keywords; RELATIVISTIC; BASIS_RELATIVISTIC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:4440,Integrability,depend,depends,4440,"inetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decont",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:3941,Modifiability,coupling,coupling,3941,"sis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:4160,Modifiability,coupling,coupling,4160,"_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron interaction potential ( \(V_{\rm X2C}\) ) is given in terms of non-relativisitc kinetic (\(T=\hat{p}^2/2\)) energy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. K",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:4814,Modifiability,extend,extended,4814,"ergy and nuclear-electron interaction potential (\(V\)), coupling matrix ( \(X\)) and renormalization matrix ( \(R\)). \[T_{\rm X2C} = R^{\dagger} (TX + {X}^{\dagger}T - {X}^{\dagger}TX ) R\]. \[V_{\rm X2C} = R^{\dagger}(V + \frac{1}{4c^2} X^{\dagger}W^{\text{SF}}X) R\]; The coupling matrix ( \({X} = C^{S} (C^{L})^{-1}\) ) is obtained from the large (\(C^{\rm L}\)) and small (\(C^{\rm S}\)) components of the \(N\) positive energy solutions of the Dirac equation.; The renormalization matrix; \({R}=S^{-1/2}(S^{-1/2}\tilde{S}S^{-1/2})^{-1/2}S^{1/2}\),; depends on the modified overlap matrix; \(\tilde{S}=S+\frac{1}{2c^2}X^{\dagger}TX\). The integrals \(W^{\rm SF}_{\mu\nu} = \langle {\chi_\mu} | \hat{p}\cdot (\hat{V}\hat{p}) |{\chi_\nu}\rangle\) can be easily computed as derivatives of the nuclear-electron attraction integrals with respect to nuclear coordinates.; Existing nonrelativistic electronic structure code can be extended to include scalar relativistic effects; treated with the X2C method by replacing nonrelativistic kinetic and potential energy with the corresponding; X2C operators \(T_{X2C}\) and \(V_{X2C}\). It is important to note that fully uncontracted basis in needed for the construction of X2C Hamiltonian as Foldy-Wouthuysen (FW [FW:1950]) transformation is obtained in kinetically balance basis. Keywords¶. RELATIVISTIC¶. Relativistic Hamiltonian type. Type: string; Possible Values: NO, X2C; Default: NO. BASIS_RELATIVISTIC¶. Auxiliary basis set for solving Dirac equation in X2C and DKH calculations. Defaults to decontracted orbital basis. Type: string; Default: No Default. table of contents. Scalar relativistic Hamiltonians; A First Example; Basis sets options; Theory; Keywords; RELATIVISTIC; BASIS_RELATIVISTIC. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:1251,Performance,perform,perform,1251,"kash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the mod",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:1228,Usability,simpl,simple,1228,"kash Verma, Wallace D. Derricotte, and Francesco A. Evangelista; The exact-two-component (X2C) approach is a convenient way to introduce scalar; relativistic effects in DFT and wave function-based methods.; PSI4 implements the spin-free one-electron version of X2C, which produces; a modified one-electron Hamiltonian \(H_{\rm X2C}\):. \[H_{\rm X2C} = T_{\rm X2C} + V_{\rm X2C}\]; that is a sum of a kinetic energy (\(T_{\rm X2C}\)) and potential energy; (\(V_{\rm X2C}\)) operator.; Our implementation is equivalent to the one reported by Cheng and Gauss [Cheng:084114].; X2C calculations require the use of special (alternatively fully uncontracted) basis sets designed for relativistic; calculations. Common choices include the Dunning Douglass–Kroll basis sets; (cc-pVXZ-DK, cc-pCVXZ-DK, cc-pwCVXZ-DK) and Roos’ ANO basis sets. Note; See also Interface to DKH by A. Wolf, M. Reiher, and B. A. Hess for another relativistic Hamiltonian. A First Example¶; The following is a simple input that will perform a Hartree–Fock calculation; using the X2C Hamiltonian.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12molecule {; H; F 1 0.92; }. set {; scf_type pk; basis cc-pvdz; relativistic x2c; }. energy('hf'). This computation yields the following result:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.10007984692388. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.7611816259664579; Two-Electron Energy = 45.4843682167491039; Total Energy = -100.1000798469238902. while a non-relativistic calculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the mod",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/relativistic.html:2712,Usability,simpl,simply,2712,"lculation yields the following energy:; 1; 2; 3; 4; 5; 6; 7; 8@RHF Final Energy: -100.01928891411315. => Energetics <=. Nuclear Repulsion Energy = 5.1767335622934780; One-Electron Energy = -150.6645256529074572; Two-Electron Energy = 45.4685031765008461; Total Energy = -100.0192889141131474. Basis sets options¶; The X2C module in PSI4 supports different combinations of basis set.; By default, if the input file specifies only BASIS, then the X2C; module will solve the modified Dirac equation in an uncontracted basis and then; recontract the X2C Hamiltonian in the original basis.; Alternatively, the user can use BASIS_RELATIVISTIC to specify a different; basis set to solve the modified Dirac equation.; 1; 2; 3; 4; 5set {; basis cc-pvdz-dk; basis_relativistic cc-pvtz-dk; relativistic x2c; }. It is recommended that when employing the X2C relativistic Hamiltonian, that you use a fully; decontracted basis set. This can be done simply in the input by adding “-decon” to the; name of the primary basis you want to use for the calculation as detailed in; Decontracted Basis Sets. Publications resulting from the use; of X2C should cite the following publication: [Verma:2015]. Theory¶; X2C is based on exact decoupling of; positive-energy ( \(h^{FW}_{\rm ++}\); ) and negative-energy (\(h^{FW}_{\rm --}\) ); blocks of the Dirac Hamiltonian (\(h^{D}\)). \[\begin{split}U^\dagger h^{\rm D} U =; U^\dagger; \begin{pmatrix}; h_{LL} & h_{LS} \\; h_{SL} & h_{SS}; \end{pmatrix}; U; =; \begin{pmatrix}; h^{\rm FW}_{++} & 0 \\; 0 & h^{\rm FW}_{--}; \end{pmatrix}\end{split}\]; The transformation ( \(U\) ) is obtained from the solutions of the Dirac equation in kinetically balanced basis [Kutzelnigg:1984] treatment.; In the X2C treatment, the positive-energy block of the Hamiltonian ( \(h^{FW}_{\rm ++}\) ); is given by the sum; of a transformed kinetic (\(T_{\rm X2C}\)) and potential energy ( \(V_{\rm X2C}\) ) contribution.; Relativistic kinetic energy ( \(T_{\rm X2C}\) ) and nuclear-electron inte",MatchSource.WIKI,psi4manual/1.3.2/relativistic.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/relativistic.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:2569,Availability,avail,available,2569,"s a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1)¶\[E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms tak",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:3761,Availability,avail,available,3761,"esp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically do",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:5694,Availability,error,errors,5694,"elta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields t",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:5926,Availability,avail,available,5926,"f closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the \(S^{2}\); approximation, that can be interpreted as the exchange of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in hig",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:6936,Availability,down,down,6936,"r both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the \(S^{2}\); approximation, that can be interpreted as the exchange of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in high-order; terms. To compensate these deviations, Parker et al. [Parker:2014:094106]; recommend to scale all \(S^{2}\) approximated exchange terms by the ratio:. \[p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}\]; where the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8380,Availability,avail,available,8380,"e_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interacti",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:9446,Availability,avail,available,9446,"; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:10303,Availability,error,errors,10303," as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type df; basis cc-pVDZ; }. energy('sapt0'). REFERENCE needs to be UHF or ROHF for the open-shell computation to proceed. Advanced example¶; Open-shell computations can be difficult to converge in certain cases, thus you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2;",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:13761,Availability,error,error,13761,"bal_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be add",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:16935,Availability,avail,available,16935,"SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. MAXITER¶. Maximum number of CPHF iterations. Type: integer; Default: 50. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:17829,Availability,error,error,17829,"induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT;",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:17848,Availability,error,error,17848,"induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT;",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:18515,Availability,avail,available,18515,"e below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers;",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:19667,Availability,error,errors,19667," in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; mem",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25557,Availability,avail,available,25557,"atural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:27716,Availability,error,error,27716,"s also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ computation on the; water dimer. This computation can be performed with the following; input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; }. set globals {; basis aug-cc-pvdz; guess sad; scf_type df; }. set sapt {; print 1; nat_orbs_t2 true; freeze_core true; }. energy('sapt2+3'). To reiterate some of the options mentioned above: the; NAT_ORBS_T2 option will compute MP2 natural orbitals and use; them in the evaluation of the triples correction to dispersion, and the; FREEZE_CORE option will freeze the core throughout the SAPT; computation",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:32684,Availability,avail,available,32684,"-7.18054663 [mEh] -4.50586123 [kcal/mol] -18.85252518 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -13.37542977 [mEh] -8.39320925 [kcal/mol] -35.11719087 [kJ/mol]; Exchange sSAPT0 11.21822294 [mEh] 7.03954147 [kcal/mol] 29.45344432 [kJ/mol]; Induction sSAPT0 -3.47550008 [mEh] -2.18090932 [kcal/mol] -9.12492546 [kJ/mol]; Dispersion sSAPT0 -2.88342055 [mEh] -1.80937379 [kcal/mol] -7.57042064 [kJ/mol]; Total sSAPT0 -8.51612746 [mEh] -5.34395089 [kcal/mol] -22.35909265 [kJ/mol]; --------------------------------------------------------------------------------------------------------. At the bottom of this output are the total SAPT energies (defined above),; they are composed of subsets of the individual terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; sch",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:33401,Availability,recover,recover,33401,"al terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:33921,Availability,avail,available,33921,"t’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000; --------------------------------------------------------------------------------------------------------; Electrostatics -13.06509118 [mEh] -8.19846883 [kcal/mol] -34.30239689 [kJ/mol]; Elst10,r -13.37542977 [mEh] -8.39320925 [kcal/mol] -35.11719087 [kJ/mol]; Elst12,r 0.04490350 [mEh] 0.02817737 [kcal/mol] 0.11789413 [kJ/mol]; Elst13,r 0.26543510 [mEh] 0.16656305 [kcal/mol] 0.69689985 [kJ/mol]. Exchange sc. 13.43351854 [mEh] 8.42966050 [kcal/mol] 35.26970292 [kJ/mol]; Exch10 11.21822294",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:40540,Deployability,update,updated,40540,"estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hamiltonian; picture with a single coupling strength parameter determining all the; splittings. This method can be invoked with energy(“SF-SAPT”) and; publications resulting from the use of the SF-SAPT code should cite the; following publications: [Patkowski:2018:164110]. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; DO_CCD_DISP; DO_MBPT_DISP; DO_THIRD_ORDER; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE. Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:1148,Energy Efficiency,energy,energy,1148," SCF to FCI. SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein, Rob M. Parrish, Jérôme F. Gonthier, and Daniel. G. A. Smith; Section author: Edward G. Hohenstein and Jérôme F. Gonthier; Module: Keywords, PSI Variables, LIBSAPT_SOLVER. Warning; In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; e",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:1259,Energy Efficiency,energy,energy,1259,". Gonthier, and Daniel. G. A. Smith; Section author: Edward G. Hohenstein and Jérôme F. Gonthier; Module: Keywords, PSI Variables, LIBSAPT_SOLVER. Warning; In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostat",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:1297,Energy Efficiency,adapt,adapted,1297," In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:1449,Energy Efficiency,energy,energy,1449," In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:1498,Energy Efficiency,energy,energy,1498," In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:1595,Energy Efficiency,energy,energy,1595,"a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the closed-shell SAPT expansion are available in the S",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:2126,Energy Efficiency,energy,energy,2126,"on to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1)¶\[E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:3723,Energy Efficiency,energy,energy,3723,"esp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically do",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:4261,Energy Efficiency,energy,energy,4261," (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:4661,Energy Efficiency,energy,energy,4661,"ount higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module ca",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:5424,Energy Efficiency,energy,energy,5424,"lta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SA",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:5715,Energy Efficiency,energy,energy,5715,"elta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields t",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:7825,Energy Efficiency,energy,energy,7825,"of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in high-order; terms. To compensate these deviations, Parker et al. [Parker:2014:094106]; recommend to scale all \(S^{2}\) approximated exchange terms by the ratio:. \[p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}\]; where the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8276,Energy Efficiency,energy,energy,8276,"re the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the n",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8832,Energy Efficiency,energy,energy,8832," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8849,Energy Efficiency,energy,energy,8849," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8866,Energy Efficiency,energy,energy,8866," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8884,Energy Efficiency,energy,energy,8884," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8905,Energy Efficiency,energy,energy,8905," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:10839,Energy Efficiency,energy,energy,10839,"_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type df; basis cc-pVDZ; }. energy('sapt0'). REFERENCE needs to be UHF or ROHF for the open-shell computation to proceed. Advanced example¶; Open-shell computations can be difficult to converge in certain cases, thus you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:12017,Energy Efficiency,energy,energy,12017,"us you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be t",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:12277,Energy Efficiency,energy,energy,12277,"sis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:12520,Energy Efficiency,energy,energy,12520,"55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so t",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:14305,Energy Efficiency,energy,energy,14305,"cts the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:15940,Energy Efficiency,energy,energy,15940,". BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. D_CONVERGENCE¶. Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. E_CONVERGENCE¶. Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. MAXITER¶. Maximum number of CPHF iterations. Type: integer; Default: 50. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is a",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:17104,Energy Efficiency,energy,energy,17104,"F iterations. Type: integer; Default: 50. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:17895,Energy Efficiency,energy,energy,17895,"induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT;",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:18136,Energy Efficiency,efficient,efficient,18136,"oing to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order S",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:18684,Energy Efficiency,energy,energy,18684,"here isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20060,Energy Efficiency,energy,energy,20060,"APT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAP",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20086,Energy Efficiency,energy,energy,20086,"APT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAP",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20294,Energy Efficiency,energy,energy,20294,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20319,Energy Efficiency,energy,energy,20319,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20342,Energy Efficiency,energy,energy,20342,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20369,Energy Efficiency,energy,energy,20369,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20399,Energy Efficiency,energy,energy,20399,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:21487,Energy Efficiency,charge,charges,21487,"ore. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced Ke",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:22085,Energy Efficiency,energy,energy,22085,"monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced Keywords for Higher-order SAPT¶. DO_CCD_DISP¶. Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_MBPT_DISP¶. Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_THIRD_ORDER¶. Do compute third-order corrections?. Type: boolean; Default: false. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:23775,Energy Efficiency,energy,energy,23775,"ction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_THIRD_ORDER¶. Do compute third-order corrections?. Type: boolean; Default: false. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. SAPT_MEM_CHECK¶. Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. MP2 Natural Orbitals¶; One of the unique features of the SAPT module is its ability to use; MP2 natural orbitals (NOs) to speed up the evaluation of the triples; contribution to dispersion. By transforming to the MP2 NO basis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of \(50 \times\) are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Ty",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25006,Energy Efficiency,energy,energy,25006,"enstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge T",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25034,Energy Efficiency,charge,charge-transfer,25034,"enstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge T",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25087,Energy Efficiency,charge,charge-transfer,25087,"e \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dim",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25103,Energy Efficiency,energy,energy,25103,"e \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dim",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25282,Energy Efficiency,energy,energy,25282,"for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25342,Energy Efficiency,energy,energy,25342,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25362,Energy Efficiency,energy,energy,25362,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25383,Energy Efficiency,energy,energy,25383,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25407,Energy Efficiency,energy,energy,25407,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25429,Energy Efficiency,energy,energy,25429,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25455,Energy Efficiency,energy,energy,25455,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25484,Energy Efficiency,energy,energy,25484,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25520,Energy Efficiency,charge,charge,25520,"atural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25598,Energy Efficiency,charge,charge-transfer,25598,"tions. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25956,Energy Efficiency,charge,charge-transfer,25956,"harge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to f",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:26494,Energy Efficiency,charge,charge-transfer,26494,"tions are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:26946,Energy Efficiency,energy,energy,26946,"the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:28506,Energy Efficiency,energy,energy,28506,"; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ computation on the; water dimer. This computation can be performed with the following; input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; }. set globals {; basis aug-cc-pvdz; guess sad; scf_type df; }. set sapt {; print 1; nat_orbs_t2 true; freeze_core true; }. energy('sapt2+3'). To reiterate some of the options mentioned above: the; NAT_ORBS_T2 option will compute MP2 natural orbitals and use; them in the evaluation of the triples correction to dispersion, and the; FREEZE_CORE option will freeze the core throughout the SAPT; computation. This SAPT2+3/aug-cc-pVDZ computation produces the following; results:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49 SAPT Results; --------------------------------------------------------------------------------------------------------; Electrostatics -13.06509118 [mEh] -8.19846883 [kcal/mol] -34.30239689 [kJ/mol]; Elst10,r -13.37542977 [mEh] -8.39320925 [kcal/mol] -35.11719087 [kJ/mol]; Elst12,r 0.04490350 [mEh] 0.02817737 [kcal/mol] 0.11789413 [kJ/mol]; Elst13,r 0.26543510 [mEh] 0.16656305 [kcal/mol] 0.69689985 [kJ/mol]. Exchange 13.41768202 [mEh] 8.41972294 [kcal/mol] 35.22812",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:33523,Energy Efficiency,energy,energy,33523,"ute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000; --------------------------------------------------------------------------------------------------------; Electrostatics -13.",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:33694,Energy Efficiency,energy,energy,33694,"ailable at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000; --------------------------------------------------------------------------------------------------------; Electrostatics -13.06509118 [mEh] -8.19846883 [kcal/mol] -34.30239689 [kJ/mol]; Elst10,r -13.37542977 [mEh] -8.39320925 [kcal/mol] -35.11719087 [kJ/mol]; Elst12,r ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:37892,Energy Efficiency,efficient,efficient,37892,"c. -6.69968912 [mEh] -4.20411857 [kcal/mol] -17.59003378 [kJ/mol]; Total SAPT2+ sc. -7.31030140 [mEh] -4.58728357 [kcal/mol] -19.19319632 [kJ/mol]; Total SAPT2+(3) sc. -6.98526650 [mEh] -4.38332109 [kcal/mol] -18.33981720 [kJ/mol]; Total SAPT2+3 sc. -7.15142168 [mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-ave",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:39243,Energy Efficiency,energy,energy,39243," For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hamiltonian; picture with a single coupling strength parameter determining all the; splittings. This method can be invoked with energy(“SF-SAPT”) and; publications resulting from the use of the SF-SAPT code should cite the; following publications: [Patkowski:2018:164110]. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; DO_CCD_DISP; DO_MBPT_DISP; DO_THIRD_ORDER; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE. Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computatio",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:19588,Integrability,depend,depend,19588," in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; mem",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:1297,Modifiability,adapt,adapted,1297," In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:4161,Modifiability,coupling,coupling,4161," (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:6350,Modifiability,coupling,coupling,6350,"pproximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the \(S^{2}\); approximation, that can be interpreted as the exchange of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in high-order; terms. To compensate these deviations, Parker et al. [Parker:2014:094106]; recommend to scale all \(S^{2}\) approximated exchange terms by the ratio:. \[p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}\]; where the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:38160,Modifiability,flexible,flexible,38160,"[mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hami",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:39150,Modifiability,coupling,coupling,39150,"-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hamiltonian; picture with a single coupling strength parameter determining all the; splittings. This method can be invoked with energy(“SF-SAPT”) and; publications resulting from the use of the SF-SAPT code should cite the; following publications: [Patkowski:2018:164110]. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; DO_CCD_DISP; DO_MBPT_DISP; DO_THIRD_ORDER; INTS_TOLERANCE;",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:4961,Performance,perform,performance,4961,"0)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENC",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8252,Performance,perform,performed,8252,"re the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the n",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8367,Performance,perform,perform,8367,"e_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interacti",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:9697,Performance,perform,performed,9697,"--; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.0000",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:9944,Performance,perform,perform,9944,"f the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type df; basis cc-pVDZ; }. energy('sapt0'). REFERENCE needs to be UHF or ROHF for the open-shell computation to proceed. Advanced example¶; Open-shell computations ca",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:11154,Performance,perform,performing,11154,"ll cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type df; basis cc-pVDZ; }. energy('sapt0'). REFERENCE needs to be UHF or ROHF for the open-shell computation to proceed. Advanced example¶; Open-shell computations can be difficult to converge in certain cases, thus you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_names",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:12078,Performance,load,load,12078,"us you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be t",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:13215,Performance,load,load,13215," }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been inclu",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:13708,Performance,perform,performance,13708,"bal_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be add",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:14225,Performance,perform,performance,14225,"cts the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:14460,Performance,perform,perform,14460,"tegrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Def",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:14554,Performance,scalab,scalable,14554,"tegrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Def",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:17203,Performance,perform,perform,17203,"odule. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:17309,Performance,perform,performs,17309," some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:17387,Performance,perform,performs,17387,"dvanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:18945,Performance,perform,perform,18945,"uation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the m",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20697,Performance,perform,performed,20697,"l orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an EC",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:20820,Performance,optimiz,optimized,20820,"mploying CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this cas",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25628,Performance,perform,perform,25628,"tions. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:25829,Performance,perform,performs,25829,"ch of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only t",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:28010,Performance,perform,performed,28010,"wly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ computation on the; water dimer. This computation can be performed with the following; input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; }. set globals {; basis aug-cc-pvdz; guess sad; scf_type df; }. set sapt {; print 1; nat_orbs_t2 true; freeze_core true; }. energy('sapt2+3'). To reiterate some of the options mentioned above: the; NAT_ORBS_T2 option will compute MP2 natural orbitals and use; them in the evaluation of the triples correction to dispersion, and the; FREEZE_CORE option will freeze the core throughout the SAPT; computation. This SAPT2+3/aug-cc-pVDZ computation produces the following; results:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49 SAPT Results; --------------------",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:37657,Performance,perform,performs,37657,"903 [mEh] 0.48342016 [kcal/mol] 2.02263015 [kJ/mol]. Total HF -5.68662563 [mEh] -3.56841161 [kcal/mol] -14.93023559 [kJ/mol]; Total SAPT0 sc. -8.57944161 [mEh] -5.38368112 [kcal/mol] -22.52532395 [kJ/mol]; Total SAPT2 sc. -6.69968912 [mEh] -4.20411857 [kcal/mol] -17.59003378 [kJ/mol]; Total SAPT2+ sc. -7.31030140 [mEh] -4.58728357 [kcal/mol] -19.19319632 [kJ/mol]; Total SAPT2+(3) sc. -6.98526650 [mEh] -4.38332109 [kcal/mol] -18.33981720 [kJ/mol]; Total SAPT2+3 sc. -7.15142168 [mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splitti",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:37942,Performance,perform,performs,37942,"c. -6.69968912 [mEh] -4.20411857 [kcal/mol] -17.59003378 [kJ/mol]; Total SAPT2+ sc. -7.31030140 [mEh] -4.58728357 [kcal/mol] -19.19319632 [kJ/mol]; Total SAPT2+(3) sc. -6.98526650 [mEh] -4.38332109 [kcal/mol] -18.33981720 [kJ/mol]; Total SAPT2+3 sc. -7.15142168 [mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-ave",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:618,Safety,avoid,avoid,618,"﻿. SAPT: Symmetry-Adapted Perturbation Theory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein, Rob M. Parrish, Jérôme F. Gonthier, and Daniel. G. A. Smith; Section author: Edward G. Hohenstein and Jérôme F. Gonthier; Module: Keywords, PSI Variables, LIBSAPT_SOLVER. Warning; In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:18367,Safety,safe,safety,18367," a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good i",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:33401,Safety,recover,recover,33401,"al terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:2612,Usability,simpl,simplest,2612,"i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1)¶\[E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; o",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:7342,Usability,simpl,simply,7342,", their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the \(S^{2}\); approximation, that can be interpreted as the exchange of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in high-order; terms. To compensate these deviations, Parker et al. [Parker:2014:094106]; recommend to scale all \(S^{2}\) approximated exchange terms by the ratio:. \[p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}\]; where the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:8333,Usability,simpl,simplest,8333,"e_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interacti",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:19952,Usability,simpl,simply,19952,"APT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAP",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt-1.html:26906,Usability,simpl,simply,26906,"the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ",MatchSource.WIKI,psi4manual/1.3.2/sapt-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt-1.html
https://psicode.org/psi4manual/1.3.2/sapt.html:2569,Availability,avail,available,2569,"s a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1)¶\[E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms tak",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:3761,Availability,avail,available,3761,"esp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically do",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:5694,Availability,error,errors,5694,"elta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields t",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:5926,Availability,avail,available,5926,"f closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the \(S^{2}\); approximation, that can be interpreted as the exchange of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in hig",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:6936,Availability,down,down,6936,"r both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the \(S^{2}\); approximation, that can be interpreted as the exchange of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in high-order; terms. To compensate these deviations, Parker et al. [Parker:2014:094106]; recommend to scale all \(S^{2}\) approximated exchange terms by the ratio:. \[p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}\]; where the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8380,Availability,avail,available,8380,"e_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interacti",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:9446,Availability,avail,available,9446,"; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:10303,Availability,error,errors,10303," as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type df; basis cc-pVDZ; }. energy('sapt0'). REFERENCE needs to be UHF or ROHF for the open-shell computation to proceed. Advanced example¶; Open-shell computations can be difficult to converge in certain cases, thus you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2;",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:13761,Availability,error,error,13761,"bal_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be add",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:16935,Availability,avail,available,16935,"SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. MAXITER¶. Maximum number of CPHF iterations. Type: integer; Default: 50. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:17829,Availability,error,error,17829,"induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT;",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:17848,Availability,error,error,17848,"induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT;",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:18515,Availability,avail,available,18515,"e below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers;",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:19667,Availability,error,errors,19667," in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; mem",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25557,Availability,avail,available,25557,"atural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:27716,Availability,error,error,27716,"s also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ computation on the; water dimer. This computation can be performed with the following; input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; }. set globals {; basis aug-cc-pvdz; guess sad; scf_type df; }. set sapt {; print 1; nat_orbs_t2 true; freeze_core true; }. energy('sapt2+3'). To reiterate some of the options mentioned above: the; NAT_ORBS_T2 option will compute MP2 natural orbitals and use; them in the evaluation of the triples correction to dispersion, and the; FREEZE_CORE option will freeze the core throughout the SAPT; computation",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:32684,Availability,avail,available,32684,"-7.18054663 [mEh] -4.50586123 [kcal/mol] -18.85252518 [kJ/mol]. Special recipe for scaled SAPT0 (see Manual):; Electrostatics sSAPT0 -13.37542977 [mEh] -8.39320925 [kcal/mol] -35.11719087 [kJ/mol]; Exchange sSAPT0 11.21822294 [mEh] 7.03954147 [kcal/mol] 29.45344432 [kJ/mol]; Induction sSAPT0 -3.47550008 [mEh] -2.18090932 [kcal/mol] -9.12492546 [kJ/mol]; Dispersion sSAPT0 -2.88342055 [mEh] -1.80937379 [kcal/mol] -7.57042064 [kJ/mol]; Total sSAPT0 -8.51612746 [mEh] -5.34395089 [kcal/mol] -22.35909265 [kJ/mol]; --------------------------------------------------------------------------------------------------------. At the bottom of this output are the total SAPT energies (defined above),; they are composed of subsets of the individual terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; sch",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:33401,Availability,recover,recover,33401,"al terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:33921,Availability,avail,available,33921,"t’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000; --------------------------------------------------------------------------------------------------------; Electrostatics -13.06509118 [mEh] -8.19846883 [kcal/mol] -34.30239689 [kJ/mol]; Elst10,r -13.37542977 [mEh] -8.39320925 [kcal/mol] -35.11719087 [kJ/mol]; Elst12,r 0.04490350 [mEh] 0.02817737 [kcal/mol] 0.11789413 [kJ/mol]; Elst13,r 0.26543510 [mEh] 0.16656305 [kcal/mol] 0.69689985 [kJ/mol]. Exchange sc. 13.43351854 [mEh] 8.42966050 [kcal/mol] 35.26970292 [kJ/mol]; Exch10 11.21822294",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:40540,Deployability,update,updated,40540,"estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hamiltonian; picture with a single coupling strength parameter determining all the; splittings. This method can be invoked with energy(“SF-SAPT”) and; publications resulting from the use of the SF-SAPT code should cite the; following publications: [Patkowski:2018:164110]. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; DO_CCD_DISP; DO_MBPT_DISP; DO_THIRD_ORDER; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE. Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computations with Mid-bonds; Interpreting SAPT Results; Spin-Flip SAPT. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:1148,Energy Efficiency,energy,energy,1148," SCF to FCI. SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein, Rob M. Parrish, Jérôme F. Gonthier, and Daniel. G. A. Smith; Section author: Edward G. Hohenstein and Jérôme F. Gonthier; Module: Keywords, PSI Variables, LIBSAPT_SOLVER. Warning; In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; e",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:1259,Energy Efficiency,energy,energy,1259,". Gonthier, and Daniel. G. A. Smith; Section author: Edward G. Hohenstein and Jérôme F. Gonthier; Module: Keywords, PSI Variables, LIBSAPT_SOLVER. Warning; In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostat",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:1297,Energy Efficiency,adapt,adapted,1297," In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:1449,Energy Efficiency,energy,energy,1449," In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:1498,Energy Efficiency,energy,energy,1498," In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:1595,Energy Efficiency,energy,energy,1595,"a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the closed-shell SAPT expansion are available in the S",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:2126,Energy Efficiency,energy,energy,2126,"on to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1)¶\[E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:3723,Energy Efficiency,energy,energy,3723,"esp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically do",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:4261,Energy Efficiency,energy,energy,4261," (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:4661,Energy Efficiency,energy,energy,4661,"ount higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module ca",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:5424,Energy Efficiency,energy,energy,5424,"lta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SA",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:5715,Energy Efficiency,energy,energy,5715,"elta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields t",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:7825,Energy Efficiency,energy,energy,7825,"of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in high-order; terms. To compensate these deviations, Parker et al. [Parker:2014:094106]; recommend to scale all \(S^{2}\) approximated exchange terms by the ratio:. \[p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}\]; where the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8276,Energy Efficiency,energy,energy,8276,"re the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the n",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8832,Energy Efficiency,energy,energy,8832," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8849,Energy Efficiency,energy,energy,8849," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8866,Energy Efficiency,energy,energy,8866," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8884,Energy Efficiency,energy,energy,8884," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8905,Energy Efficiency,energy,energy,8905," (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; gue",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:10839,Energy Efficiency,energy,energy,10839,"_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type df; basis cc-pVDZ; }. energy('sapt0'). REFERENCE needs to be UHF or ROHF for the open-shell computation to proceed. Advanced example¶; Open-shell computations can be difficult to converge in certain cases, thus you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:12017,Energy Efficiency,energy,energy,12017,"us you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be t",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:12277,Energy Efficiency,energy,energy,12277,"sis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:12520,Energy Efficiency,energy,energy,12520,"55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so t",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:14305,Energy Efficiency,energy,energy,14305,"cts the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:15940,Energy Efficiency,energy,energy,15940,". BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. The scope of core orbitals to freeze in evaluation of SAPT \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) terms. Recommended true for all SAPT computations. Type: string; Possible Values: FALSE, TRUE; Default: FALSE. D_CONVERGENCE¶. Convergence criterion for residual of the CPHF coefficients in the SAPT \(E_{ind,resp}^{(20)}\) term. Type: conv double; Default: 1e-8. E_CONVERGENCE¶. Convergence criterion for energy (change) in the SAPT \(E_{ind,resp}^{(20)}\) term during solution of the CPHF equations. Type: conv double; Default: 1e-10. MAXITER¶. Maximum number of CPHF iterations. Type: integer; Default: 50. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is a",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:17104,Energy Efficiency,energy,energy,17104,"F iterations. Type: integer; Default: 50. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:17895,Energy Efficiency,energy,energy,17895,"induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT;",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:18136,Energy Efficiency,efficient,efficient,18136,"oing to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order S",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:18684,Energy Efficiency,energy,energy,18684,"here isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20060,Energy Efficiency,energy,energy,20060,"APT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAP",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20086,Energy Efficiency,energy,energy,20086,"APT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAP",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20294,Energy Efficiency,energy,energy,20294,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20319,Energy Efficiency,energy,energy,20319,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20342,Energy Efficiency,energy,energy,20342,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20369,Energy Efficiency,energy,energy,20369,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20399,Energy Efficiency,energy,energy,20399,"on by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values:",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:21487,Energy Efficiency,charge,charges,21487,"ore. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced Ke",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:22085,Energy Efficiency,energy,energy,22085,"monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this case, when there are no valence electrons, the code raises an exception. More precise control over the number of frozen orbitals can be attained by using the keywords NUM_FROZEN_DOCC (gives the total number of orbitals to freeze, program picks the lowest-energy orbitals) or FROZEN_DOCC (gives the number of orbitals to freeze per irreducible representation). Type: string; Possible Values: FALSE, TRUE, 1, 0, -1, -2, -3; Default: FALSE. PRINT¶. The amount of information to print to the output file for the sapt module. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced Keywords for Higher-order SAPT¶. DO_CCD_DISP¶. Do CCD dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3?. Type: boolean; Default: false. DO_MBPT_DISP¶. Do MBPT dispersion correction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_THIRD_ORDER¶. Do compute third-order corrections?. Type: boolean; Default: false. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:23775,Energy Efficiency,energy,energy,23775,"ction in SAPT2+, SAPT2+(3) or SAPT2+3, if also doing CCD?. Type: boolean; Default: true. DO_THIRD_ORDER¶. Do compute third-order corrections?. Type: boolean; Default: false. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. SAPT_MEM_CHECK¶. Do force SAPT2 and higher to die if it thinks there isn’t enough memory? Turning this off is ill-advised. Type: boolean; Default: true. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. MP2 Natural Orbitals¶; One of the unique features of the SAPT module is its ability to use; MP2 natural orbitals (NOs) to speed up the evaluation of the triples; contribution to dispersion. By transforming to the MP2 NO basis, we can; throw away virtual orbitals that are expected to contribute little to the; dispersion energy. Speedups in excess of \(50 \times\) are possible. In; practice, this approximation is very good and should always be applied.; Publications resulting from the use of MP2 NO-based approximations should; cite the following: [Hohenstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Ty",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25006,Energy Efficiency,energy,energy,25006,"enstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge T",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25034,Energy Efficiency,charge,charge-transfer,25034,"enstein:2010:104107]. Basic Keywords Controlling MP2 NO Approximations¶. NAT_ORBS_T2¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge T",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25087,Energy Efficiency,charge,charge-transfer,25087,"e \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dim",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25103,Energy Efficiency,energy,energy,25103,"e \(v^4\) block of two-electron integrals in the evaluation of second-order T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dim",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25282,Energy Efficiency,energy,energy,25282,"for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_T3¶. Do natural orbitals to speed up evaluation of the triples contribution to dispersion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25342,Energy Efficiency,energy,energy,25342,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25362,Energy Efficiency,energy,energy,25362,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25383,Energy Efficiency,energy,energy,25383,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25407,Energy Efficiency,energy,energy,25407,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25429,Energy Efficiency,energy,energy,25429,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25455,Energy Efficiency,energy,energy,25455,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25484,Energy Efficiency,energy,energy,25484,"ion by truncating the virtual orbital space? Recommended true for all SAPT computations. Type: boolean; Default: true. NAT_ORBS_V4¶. Do use MP2 natural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometr",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25520,Energy Efficiency,charge,charge,25520,"atural orbital approximations for the \(v^4\) block of two-electron integrals in the evaluation of CCD T2 amplitudes? Recommended true for all SAPT computations. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25598,Energy Efficiency,charge,charge-transfer,25598,"tions. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25956,Energy Efficiency,charge,charge-transfer,25956,"harge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to f",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:26494,Energy Efficiency,charge,charge-transfer,26494,"tions are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:26946,Energy Efficiency,energy,energy,26946,"the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:28506,Energy Efficiency,energy,energy,28506,"; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ computation on the; water dimer. This computation can be performed with the following; input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; }. set globals {; basis aug-cc-pvdz; guess sad; scf_type df; }. set sapt {; print 1; nat_orbs_t2 true; freeze_core true; }. energy('sapt2+3'). To reiterate some of the options mentioned above: the; NAT_ORBS_T2 option will compute MP2 natural orbitals and use; them in the evaluation of the triples correction to dispersion, and the; FREEZE_CORE option will freeze the core throughout the SAPT; computation. This SAPT2+3/aug-cc-pVDZ computation produces the following; results:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49 SAPT Results; --------------------------------------------------------------------------------------------------------; Electrostatics -13.06509118 [mEh] -8.19846883 [kcal/mol] -34.30239689 [kJ/mol]; Elst10,r -13.37542977 [mEh] -8.39320925 [kcal/mol] -35.11719087 [kJ/mol]; Elst12,r 0.04490350 [mEh] 0.02817737 [kcal/mol] 0.11789413 [kJ/mol]; Elst13,r 0.26543510 [mEh] 0.16656305 [kcal/mol] 0.69689985 [kJ/mol]. Exchange 13.41768202 [mEh] 8.41972294 [kcal/mol] 35.22812",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:33523,Energy Efficiency,energy,energy,33523,"ute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000; --------------------------------------------------------------------------------------------------------; Electrostatics -13.",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:33694,Energy Efficiency,energy,energy,33694,"ailable at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000; --------------------------------------------------------------------------------------------------------; Electrostatics -13.06509118 [mEh] -8.19846883 [kcal/mol] -34.30239689 [kJ/mol]; Elst10,r -13.37542977 [mEh] -8.39320925 [kcal/mol] -35.11719087 [kJ/mol]; Elst12,r ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:37892,Energy Efficiency,efficient,efficient,37892,"c. -6.69968912 [mEh] -4.20411857 [kcal/mol] -17.59003378 [kJ/mol]; Total SAPT2+ sc. -7.31030140 [mEh] -4.58728357 [kcal/mol] -19.19319632 [kJ/mol]; Total SAPT2+(3) sc. -6.98526650 [mEh] -4.38332109 [kcal/mol] -18.33981720 [kJ/mol]; Total SAPT2+3 sc. -7.15142168 [mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-ave",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:39243,Energy Efficiency,energy,energy,39243," For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hamiltonian; picture with a single coupling strength parameter determining all the; splittings. This method can be invoked with energy(“SF-SAPT”) and; publications resulting from the use of the SF-SAPT code should cite the; following publications: [Patkowski:2018:164110]. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; DO_CCD_DISP; DO_MBPT_DISP; DO_THIRD_ORDER; INTS_TOLERANCE; SAPT_MEM_CHECK; DEBUG. MP2 Natural Orbitals; Basic Keywords Controlling MP2 NO Approximations; NAT_ORBS_T2; NAT_ORBS_T3; NAT_ORBS_V4; OCC_TOLERANCE. Charge-Transfer in SAPT; Monomer-Centered Basis Computations; Computatio",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:19588,Integrability,depend,depend,19588," in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; mem",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:1297,Modifiability,adapt,adapted,1297," In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:4161,Modifiability,coupling,coupling,4161," (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; of SAPT terms. They are computed from the Hartree–Fock supermolecular interaction energy; \(E_{int}^{HF}\) and are only available in dimer-centered basis SAPT; computations, which is the default (see below for monomer-centered basis; computations). They are defined by:. (6)¶\[\delta_{HF}^{(2)} = E_{int}^{HF} - (E_{elst}^{(10)} + E_{exch}^{(10)}; + E_{ind,resp}^{(20)} + E_{exch-ind,resp}^{(20)})\]. (7)¶\[\delta_{HF}^{(3)} = \delta_{HF}^{(2)} - (E_{exch-ind}^{(30)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:6350,Modifiability,coupling,coupling,6350,"pproximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENCE can be used, but coupled; induction computations are currently not supported with ROHF. This means that orbital; relaxation is not included for ROHF and the uncoupled induction term is computed instead.; If both monomers are open-shell, their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the \(S^{2}\); approximation, that can be interpreted as the exchange of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in high-order; terms. To compensate these deviations, Parker et al. [Parker:2014:094106]; recommend to scale all \(S^{2}\) approximated exchange terms by the ratio:. \[p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}\]; where the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:38160,Modifiability,flexible,flexible,38160,"[mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hami",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:39150,Modifiability,coupling,coupling,39150,"-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-averaged effect and a spin-flip term responsible; for the splittings between the states. The numerical factors in this linear; combination are determined solely by the Clebsch-Gordan coefficients:; accordingly, the \(S^{2}\) approximation implies a Heisenberg Hamiltonian; picture with a single coupling strength parameter determining all the; splittings. This method can be invoked with energy(“SF-SAPT”) and; publications resulting from the use of the SF-SAPT code should cite the; following publications: [Patkowski:2018:164110]. table of contents. SAPT: Symmetry-Adapted Perturbation Theory; The S2 approximation and scaling; A First Example; Advanced example; SAPT0; Basic SAPT0 Keywords; SAPT_LEVEL; BASIS; DF_BASIS_SAPT; DF_BASIS_ELST; FREEZE_CORE; D_CONVERGENCE; E_CONVERGENCE; MAXITER; PRINT. Advanced SAPT0 Keywords; AIO_CPHF; AIO_DF_INTS; COUPLED_INDUCTION; EXCH_SCALE_ALPHA; INTS_TOLERANCE; DENOMINATOR_DELTA; DENOMINATOR_ALGORITHM; DEBUG. Specific open-shell SAPT0 keywords; SAPT_MEM_SAFETY; COUPLED_INDUCTION. Higher-Order SAPT; Basic Keywords for Higher-order SAPT; BASIS; DF_BASIS_SAPT; FREEZE_CORE; PRINT. Advanced Keywords for Higher-order SAPT; DO_CCD_DISP; DO_MBPT_DISP; DO_THIRD_ORDER; INTS_TOLERANCE;",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:4961,Performance,perform,performance,4961,"0)}; + E_{ind,resp}^{(30)})\]; Additionally, high-order coupling between induction and dispersion can be; extracted from the supermolecular MP2 interaction energy:. \[\delta_{MP2}^{(2)} = E_{int}^{MP2, corr} - (E_{elst}^{(12)} +; E_{exch}^{(11)} + E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)}; + \; ^{t}\!E_{exch-ind}^{(22)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)})\]. \[\delta_{MP2}^{(3)} = \delta_{MP2}^{(2)} - (E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)})\]; where \(E_{int}^{MP2, corr}\) is the correlation part of the supermolecular MP2; interaction energy. \(\delta_{MP2}^{(2)}\) and \(\delta_{MP2}^{(3)}\) also improve the; description of electrostatically dominated complexes. \(\delta_{MP2}^{(2)}\); can be applied to SAPT2+ or SAPT2+(3) energies whereas \(\delta_{MP2}^{(3)}\); should be applied to SAPT2+3 energies.; A thorough analysis of the performance of these truncations of closed-shell SAPT can be; found in a review by Hohenstein and Sherrill [Hohenstein:2012:WIREs],; and a systematic study of the accuracy of these truncations (with and; without an improved CCD treatment of dispersion) using different basis sets; is reported in [Parker:2014:094106].; The closed-shell SAPT module relies entirely on the density-fitting approximation; of the two-electron integrals. The factorization of the SAPT energy; expressions, as implemented in PSI4, assumes the use of density-fitted; two-electron integrals, therefore, the closed-shell SAPT module cannot be run with; exact integrals. In practice, we have found that the density-fitting; approximation introduces negligible errors into the SAPT energy; (often less than 0.01 kcal/mol for small dimers) and greatly; improves efficiency.; The latest addition to the SAPT code is the SAPT0 method for open-shell; monomers [Gonthier:2016:134106]. This code is available for both exact and density fitted integrals,; except for the dispersion terms which implementation relies on a density fitting; factorization. Both UHF and ROHF REFERENC",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8252,Performance,perform,performed,8252,"re the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the n",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8367,Performance,perform,perform,8367,"e_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interacti",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:9697,Performance,perform,performed,9697,"--; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.0000",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:9944,Performance,perform,perform,9944,"f the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interaction of both closed- and open-shell monomers.; Higher-order SAPT is only available for computation of interactions between; closed-shell singlets.; The example input shown above would not be used in practice.; To exploit the efficiency of the density-fitted SAPT implementation in; PSI4, the SCF computations should also be performed with density-fitted; (DF) integrals.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11set globals {; basis aug-cc-pvdz; df_basis_scf aug-cc-pvdz-jkfit; df_basis_sapt aug-cc-pvdz-ri; guess sad; scf_type df; }. set sapt {; print 1; }. These options will perform the SAPT computation with DF-HF and a; superposition-of-atomic-densities guess. This is the preferred method of; running the SAPT module.; As already mentioned above, the SAPT0 module for open-shell cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type df; basis cc-pVDZ; }. energy('sapt0'). REFERENCE needs to be UHF or ROHF for the open-shell computation to proceed. Advanced example¶; Open-shell computations ca",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:11154,Performance,perform,performing,11154,"ll cases can also; use exact integrals for all terms except for dispersion. In practice,; density fitting is considerably faster and introduces negligible errors, thus; it is the preferred method for open-shell cases as well.; Below, you can find a minimum example of open-shell SAPT0 computation.; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule {; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; --; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; units bohr; symmetry c1; no_reorient; no_com; }. set {; reference uhf; scf_type df; basis cc-pVDZ; }. energy('sapt0'). REFERENCE needs to be UHF or ROHF for the open-shell computation to proceed. Advanced example¶; Open-shell computations can be difficult to converge in certain cases, thus you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_names",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:12078,Performance,load,load,12078,"us you may; want to have more control over the SCF procedure. You have the option of; doing the driver job in the input file, by performing the dimer and monomer computations; yourself. In the example below, we do a stability analysis for the open-shell monomer only; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49; 50; 51; 52; 53; 54; 55; 56; 57; 58; 59molecule {; 0 2; O 0.000000 0.000000 0.000000; O 0.000000 2.503900 0.000000; H 0.000000 -0.424700 -1.839500; --; 0 1; O 0.000000 0.000000 6.000000; H 0.000000 1.431500 4.890600; H 0.000000 -1.431500 4.890600; units bohr; symmetry c1; no_reorient; no_com; }. dimer = psi4.get_active_molecule(). set {; reference uhf; scf_type df; basis cc-pVDZ; df_basis_sapt cc-pVDZ-ri; guess sad; }. dimer = psi4.get_active_molecule(). set df_ints_io save; psi4.IO.set_default_namespace('dimer'); Edim, wfn_dimer = energy('scf',molecule=dimer,return_wfn=True); set df_ints_io load. monomerA = dimer.extract_subsets(1,2); psi4.IO.change_file_namespace(97, 'dimer', 'monomerA'); psi4.IO.set_default_namespace('monomerA'); set {; stability_analysis follow; }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be t",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:13215,Performance,load,load,13215," }; EmonA, wfn_monA = energy('scf',molecule=monomerA,return_wfn=True). monomerB = dimer.extract_subsets(2,1); psi4.IO.change_file_namespace(97, 'monomerA', 'monomerB'); psi4.IO.set_default_namespace('monomerB'); set {; stability_analysis none; }; EmonB, wfn_monB = energy('scf',molecule=monomerB,return_wfn=True). psi4.IO.change_file_namespace(97, 'monomerB', 'dimer'); psi4.IO.set_default_namespace('dimer'). aux_basis = psi4.core.BasisSet.build(wfn_dimer.molecule(), ""DF_BASIS_SAPT"",; psi4.core.get_global_option(""DF_BASIS_SAPT""),; ""RIFIT"", psi4.core.get_global_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been inclu",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:13708,Performance,perform,performance,13708,"bal_option(""BASIS"")); wfn_dimer.set_basisset(""DF_BASIS_SAPT"", aux_basis); wfn_dimer.set_basisset(""DF_BASIS_ELST"", aux_basis). psi4.sapt(wfn_dimer,wfn_monA,wfn_monB). In this way, any of the SCF options can be tweaked for individual fragments.; For optimal efficiency, the example uses set df_ints_io save to keep file 97,; which contains the three-index integrals for density fitting. set df_ints_io load; then instructs the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be add",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:14225,Performance,perform,performance,14225,"cts the program to read these integrals from disk instead of recomputing; them. For each SCF computation, we use psi4.IO.set_default_namespace to uniquely; name scratch files. In the following SCF step, only file 97 is renamed using; psi4.IO.change_file_namespace so that integrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:14460,Performance,perform,perform,14460,"tegrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Def",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:14554,Performance,scalab,scalable,14554,"tegrals can be read from it.; For more information on stability analysis, see the stability; documentation. SAPT0¶; Generally speaking, SAPT0 should be applied to large systems or large data; sets. The performance of closed-shell SAPT0 relies entirely on error cancellation, which; seems to be optimal with a truncated aug-cc-pVDZ basis, namely,; jun-cc-pVDZ (which we have referred to in previous work as; aug-cc-pVDZ’). We do not recommend using SAPT0 with large basis sets; like aug-cc-pVTZ. A systematic study of the accuracy of closed-shell SAPT0 and other SAPT; truncations, using different basis sets, is reported in; [Parker:2014:094106]. In particular, an empirical recipe for scaled SAPT0; can yield improved performance and has been included in the output file as; the sSAPT0 interaction energy. sSAPT0 is a free by-product and is automatically; computed when SAPT0 is requested (see above for more details).; The SAPT module has been used to perform SAPT0 computations with over; 200 atoms and 2800 basis functions; this code should be scalable to 4000; basis functions. Publications resulting from the use of the SAPT0 code; should cite the following publications: [Hohenstein:2010:184111] and; [Hohenstein:2011:174107]. If the open-shell SAPT0 code is used,; [Gonthier:2016:134106] should be additionally cited. Basic SAPT0 Keywords¶. SAPT_LEVEL¶. The level of theory for SAPT. Type: string; Possible Values: SAPT0, SAPT2, SAPT2+, SAPT2+3; Default: SAPT0. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_ELST¶. Auxiliary basis set for SAPT Elst10 and Exch10 density fitting computations, may be important if heavier elements are involved. Defaults to DF_BASIS_SAPT. Type: string; Possible Values: basis string; Default: No Def",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:17203,Performance,perform,perform,17203,"odule. For 0, only the header and final results are printed. For 1, (recommended for large calculations) some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:17309,Performance,perform,performs,17309," some intermediate quantities are also printed. Type: integer; Default: 1. Advanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:17387,Performance,perform,performs,17387,"dvanced SAPT0 Keywords¶. AIO_CPHF¶. Do use asynchronous disk I/O in the solution of the CPHF equations? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. AIO_DF_INTS¶. Do use asynchronous disk I/O in the formation of the DF integrals? Use may speed up the computation slightly at the cost of spawning an additional thread. Type: boolean; Default: false. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. EXCH_SCALE_ALPHA¶. Whether or not to perform exchange scaling for SAPT exchange components. Default is false, i.e. no scaling. If set to true, performs scaling with \(Exch10 / Exch10(S^2)\). If set to a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:18945,Performance,perform,perform,18945,"uation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the m",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20697,Performance,perform,performed,20697,"l orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an EC",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:20820,Performance,optimiz,optimized,20820,"mploying CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAPT¶. BASIS¶. Primary basis set, describes the monomer molecular orbitals. Type: string; Possible Values: basis string; Default: No Default. DF_BASIS_SAPT¶. Auxiliary basis set for SAPT density fitting computations. Defaults to a RI basis. Type: string; Possible Values: basis string; Default: No Default. FREEZE_CORE¶. Specifies how many core orbitals to freeze in correlated computations. TRUE or 1 will default to freezing the previous noble gas shell on each atom. In case of positive charges on fragments, an additional shell may be unfrozen, to ensure there are valence electrons in each fragment. With FALSE or 0, no electrons are frozen (with the exception of electrons treated by an ECP). With -1, -2, and -3, the user might request strict freezing of the previous first/second/third noble gas shell on every atom. In this cas",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25628,Performance,perform,perform,25628,"tions. Type: boolean; Default: true. OCC_TOLERANCE¶. Minimum occupation (eigenvalues of the MP2 OPDM) below which virtual natural orbitals are discarded for in each of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:25829,Performance,perform,performs,25829,"ch of the above three truncations. Type: conv double; Default: 1.0e-6. Charge-Transfer in SAPT¶; It is possible to obtain the stabilization energy of a complex due to; charge-transfer effects from a SAPT computation. The charge-transfer energy; can be computed with the SAPT module as described by Stone; and Misquitta [Misquitta:2009:201].; Charge-transfer energies can be obtained from the following calls to the; energy function.; 1; 2; 3; 4; 5; 6; 7; 8energy('sapt0-ct'); energy('sapt2-ct'); energy('sapt2+-ct'); energy('sapt2+(3)-ct'); energy('sapt2+3-ct'); energy('sapt2+(ccd)-ct'); energy('sapt2+(3)(ccd)-ct'); energy('sapt2+3(ccd)-ct'). For now, charge transfer computations are not available with open-shell SAPT0.; A SAPT charge-transfer analysis will perform 5 HF computations: the dimer; in the dimer basis, monomer A in the dimer basis, monomer B in the dimer; basis, monomer A in the monomer A basis, and monomer B in the monomer B; basis. Next, it performs two SAPT computations, one in the dimer basis and; one in the monomer basis. Finally, it will print a summary of the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only t",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:28010,Performance,perform,performed,28010,"wly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ computation on the; water dimer. This computation can be performed with the following; input:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561; units angstrom; }. set globals {; basis aug-cc-pvdz; guess sad; scf_type df; }. set sapt {; print 1; nat_orbs_t2 true; freeze_core true; }. energy('sapt2+3'). To reiterate some of the options mentioned above: the; NAT_ORBS_T2 option will compute MP2 natural orbitals and use; them in the evaluation of the triples correction to dispersion, and the; FREEZE_CORE option will freeze the core throughout the SAPT; computation. This SAPT2+3/aug-cc-pVDZ computation produces the following; results:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45; 46; 47; 48; 49 SAPT Results; --------------------",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:37657,Performance,perform,performs,37657,"903 [mEh] 0.48342016 [kcal/mol] 2.02263015 [kJ/mol]. Total HF -5.68662563 [mEh] -3.56841161 [kcal/mol] -14.93023559 [kJ/mol]; Total SAPT0 sc. -8.57944161 [mEh] -5.38368112 [kcal/mol] -22.52532395 [kJ/mol]; Total SAPT2 sc. -6.69968912 [mEh] -4.20411857 [kcal/mol] -17.59003378 [kJ/mol]; Total SAPT2+ sc. -7.31030140 [mEh] -4.58728357 [kcal/mol] -19.19319632 [kJ/mol]; Total SAPT2+(3) sc. -6.98526650 [mEh] -4.38332109 [kcal/mol] -18.33981720 [kJ/mol]; Total SAPT2+3 sc. -7.15142168 [mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splitti",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:37942,Performance,perform,performs,37942,"c. -6.69968912 [mEh] -4.20411857 [kcal/mol] -17.59003378 [kJ/mol]; Total SAPT2+ sc. -7.31030140 [mEh] -4.58728357 [kcal/mol] -19.19319632 [kJ/mol]; Total SAPT2+(3) sc. -6.98526650 [mEh] -4.38332109 [kcal/mol] -18.33981720 [kJ/mol]; Total SAPT2+3 sc. -7.15142168 [mEh] -4.48758504 [kcal/mol] -18.77605762 [kJ/mol]; --------------------------------------------------------------------------------------------------------. The scaling factor is reported at the top (here 1.0072) together with the; \(\alpha\) parameter. All terms that are scaled are indicated by the sc.; label. Note that if Exch10 is less than \(10^{-5}\), the scaling factor is; set to \(1.0\). Caution; To density fit the dispersion terms in SAPT, the RI auxiliary; basis set (e.g., aug-cc-pVDZ-RI) controlled through; DF_BASIS_SAPT performs well. For Fock-type terms (i.e.,; electrostatics, exchange, induction, and core Fock matrix elements in; exchange-dispersion), the density-fitting auxiliary basis in the; SAPT module (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while; the FISAPT module uses the more appropriate JKFIT; (e.g., aug-cc-pVDZ-JKFIT). For heavier elements (i.e., second-row; and beyond), the RI auxiliary basis is unsound for this role; (insufficiently flexible). For SAPT0 in the SAPT; module, a workaround is to set DF_BASIS_ELST (which; controls Elst10 and Exch10 terms) to a JKFIT basis. For higher-order; methods in SAPT module, there is no workaround;; on-the-fly construction of an auxiliary basis through Cholesky; decomposition (not implemented) is the long-term solution. Spin-Flip SAPT¶; SAPT0 with two open-shell references will always yield a high-spin complex. In; order to obtain a SAPT-based estimate of the splittings between different spin; states of a complex the first-order exchange energies for all multiplets can be; shown to be a linear combination of two matrix elements: a diagonal exchange; term that determines the spin-ave",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:618,Safety,avoid,avoid,618,"﻿. SAPT: Symmetry-Adapted Perturbation Theory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. SAPT: Symmetry-Adapted Perturbation Theory¶; Code author: Edward G. Hohenstein, Rob M. Parrish, Jérôme F. Gonthier, and Daniel. G. A. Smith; Section author: Edward G. Hohenstein and Jérôme F. Gonthier; Module: Keywords, PSI Variables, LIBSAPT_SOLVER. Warning; In rare cases with systems having a high degree of symmetry,; PSI4 gives (very obviously) wrong answers for SAPT computations; when the specification is in Z-matrix format. Use a Cartesian representation; to avoid this problem. Caution; In early versions (notably PSI4 alpha circa 2011; and before), frozen core was implemented incompletely and for; only selected terms. Comparisons with papers published using early; PSI4 SAPT code may show discrepancies of 0.01-0.10 kcal/mol in; individual terms, particularly \(E_{exch}^{(11)}\) and \(E_{exch}^{(12)}\). Caution; January 28th 2016, the default for all NAT_ORBS options; was changed to true. Hence the code now by default uses natural; orbital truncation to speed up the evaluation of energy terms; wherever possible, according to literature recommendations.; In early July 2016, some total SAPT energy psivars were renamed. Symmetry-adapted perturbation theory (SAPT) provides a means of directly; computing the noncovalent interaction between two molecules, that is, the; interaction energy is determined without computing the total energy of the; monomers or dimer. In addition, SAPT provides a decomposition of the; interaction energy into physically meaningful components: i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:18367,Safety,safe,safety,18367," a value \(\alpha\), performs scaling with \((Exch10 / Exch10(S^2))^{\alpha}\). Type: string; Default: FALSE. INTS_TOLERANCE¶. Schwarz screening threshold. Minimum absolute value below which all three-index DF integrals and those contributing to four-index integrals are neglected. The default is conservative, but there isn’t much to be gained from loosening it, especially for higher-order SAPT. Type: conv double; Default: 1.0e-12. DENOMINATOR_DELTA¶. Maximum error allowed (Max error norm in Delta tensor) in the approximate energy denominators employed for most of the \(E_{disp}^{(20)}\) and \(E_{exch-disp}^{(20)}\) evaluation. Type: double; Default: 1.0e-6. DENOMINATOR_ALGORITHM¶. Denominator algorithm for PT methods. Laplace transformations are slightly more efficient. Type: string; Possible Values: LAPLACE, CHOLESKY; Default: LAPLACE. DEBUG¶. The amount of information to print to the output file. Type: integer; Default: 0. Specific open-shell SAPT0 keywords¶. SAPT_MEM_SAFETY¶. Memory safety. Type: double; Default: 0.9. COUPLED_INDUCTION¶. Solve the CPHF equations to compute coupled induction and exchange-induction. These are not available for ROHF, and the option is automatically false in this case. In all other cases, coupled induction is strongly recommended. Only turn it off if the induction energy is not going to be used. Type: boolean; Default: true. Higher-Order SAPT¶; For smaller systems (up to the size of a nucleic acid base pair), more; accurate interaction energies can be obtained through higher-order SAPT; computations. The SAPT module can perform density-fitted evaluations; of SAPT2, SAPT2+, SAPT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good i",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:33401,Safety,recover,recover,33401,"al terms printed above. The; individual terms are grouped according to the component of the interaction; to which they contribute. The total component energies (i.e.,; electrostatics, exchange, induction, and dispersion) represent what we; regard as the best estimate available at a given level of SAPT computed; from a subset of the terms of that grouping. The groupings shown above are; not unique and are certainly not rigorously defined. We regard the groupings; used in PSI4 as a “chemist’s grouping” as opposed to a more; mathematically based grouping, which would group all exchange terms; (i.e. \(E_{exch-ind,resp}^{(20)}\), \(E_{exch-disp}^{(20)}\), etc.) in; the exchange component. A final note is that both Disp22(T); and Est.Disp22(T) results appear if MP2 natural orbitals are; used to evaluate the triples correction to dispersion. The Disp22(T); result is the triples correction as computed in the truncated NO basis;; Est.Disp22(T) is a scaled result that attempts to recover; the effect of the truncated virtual space and is our best estimate. The Est.Disp22(T); value is used in the SAPT energy and dispersion component (see [Hohenstein:2010:104107]; for details). Finally, this part of the output file contains sSAPT0, a special scaling; scheme of the SAPT0 energy that can yield improved results and was described in more details; above. The corresponding scaled total component energies are printed as well.; As mentioned above, SAPT results with scaled exchange are also optionally available; by setting the EXCH_SCALE_ALPHA keyword. When activated, the unscaled results are; printed first as reported above, and then repeated with exchange scaling for all; relevant terms:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23; 24; 25; 26; 27; 28; 29; 30; 31; 32; 33; 34; 35; 36; 37; 38; 39; 40; 41; 42; 43; 44; 45 SAPT Results ==> ALL S2 TERMS SCALED (see Manual) <==. Scaling factor (Exch10/Exch10(S^2))^{Alpha} = 1.007200; with Alpha = 1.000000",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:2612,Usability,simpl,simplest,2612,"i.e.,; electrostatic, exchange, induction, and dispersion terms. In SAPT, the; Hamiltonian of the dimer is partitioned into contributions from each; monomer and the interaction. \[H=F_A+W_A+F_B+W_B+V\]; Here, the Hamiltonian is written as a sum of the usual monomer Fock; operators, \(F\), the fluctuation potential of each monomer, \(W\), and the; interaction potential, \(V\). The monomer Fock operators, \(F_A+F_B\), are; treated as the zeroth-order Hamiltonian and the interaction energy is; evaluated through a perturbative expansion of \(V\), \(W_A\), and \(W_B\).; Through first-order in \(V\), electrostatic and exchange interactions are; included; induction and dispersion first appear at second-order in \(V\). For; a complete description of SAPT, the reader is referred to the excellent; review by Jeziorski, Moszynski, and Szalewicz [Jeziorski:1994:1887].; Several truncations of the closed-shell SAPT expansion are available in the SAPT; module of PSI4. The simplest truncation of SAPT is denoted SAPT0; and defined in Eq. (1). (1)¶\[E_{SAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + E_{exch-disp}^{(20)} + \delta_{HF}^{(2)}\]; In this notation, \(E^{(vw)}\) defines the order in \(V\) and in \(W_A+W_B\); the; subscript, \(resp\), indicates that orbital relaxation effects are included. (2)¶\[E_{SAPT2} = E_{SAPT0} + E_{elst,resp}^{(12)} + E_{exch}^{(11)} +; E_{exch}^{(12)} + \; ^{t}\!E_{ind}^{(22)} + \; ^{t}\!E_{exch-ind}^{(22)}\]. (3)¶\[E_{SAPT2+} = E_{SAPT2} + E_{disp}^{(21)} + E_{disp}^{(22)}\]. (4)¶\[E_{SAPT2+(3)} = E_{SAPT2+} + E_{elst,resp}^{(13)} + E_{disp}^{(30)}\]. (5)¶\[E_{SAPT2+3} = E_{SAPT2+(3)}; + E_{exch-ind}^{(30)} + E_{ind,resp}^{(30)}; + E_{exch-disp}^{(30)} + E_{ind-disp}^{(30)} + E_{exch-ind-disp}^{(30)}; - \delta_{HF}^{(2)} + \delta_{HF}^{(3)}\]; The \(\delta_{HF}^{(2)}\) and \(\delta_{HF}^{(3)}\) terms take into; account higher-order induction effects and are included in the definition; o",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:7342,Usability,simpl,simply,7342,", their coupling is assumed to be high spin, i.e.; two doublets would interact to form a triplet. The S2 approximation and scaling¶; All exchange terms in SAPT arise from the antisymmetrization; of the wavefunctions of monomers A and B. Taking into account exchange of all possible; electron pairs between the two monomers yields to complicated formulae.; For this reason, exchange terms are often evaluated in the \(S^{2}\); approximation, that can be interpreted as the exchange of a single electron; pair between monomers.; The \(S^{2}\) approximation is usually pretty good, but may; break down for short intermolecular distance, particularly in high-order; terms. To compensate these deviations, Parker et al. [Parker:2014:094106]; recommend to scale all \(S^{2}\) approximated exchange terms by the ratio:. \[p_{EX}(\alpha) = \left( \frac{E_{exch}^{(10)}}{E_{exch}^{(10)}(S^{2})} \right)^{\alpha}\]; where the recommended exponent is \(\alpha = 1\). To obtain SAPT energies with this scaling,; simply set the keyword exch_scale_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:8333,Usability,simpl,simplest,8333,"e_alpha true. Alternatively, another value for \(\alpha\); can be specified by setting EXCH_SCALE_ALPHA to a value. For example,; 1set exch_scale_alpha 1.0. will set \(\alpha = 1.0\) and scale exchange energies with \(p_{EX}(1.0)\).; Instead of this straightforward scaling, SAPT0 energies benefit from a slightly modified; recipe that involves an empirically adjusted exponent \(\alpha = 3.0\).; To distinguish it from its unscaled counterpart, this energy is denoted sSAPT0 (see [Parker:2014:094106]). (8)¶\[E_{sSAPT0} = E_{elst}^{(10)} + E_{exch}^{(10)} + E_{ind,resp}^{(20)} +; p_{EX}(3.0) E_{exch-ind,resp}^{(20)} + E_{disp}^{(20)} + p_{EX}(3.0) E_{exch-disp}^{(20)}; + \delta_{HF}^{(2)}\]; where \(\delta_{HF}^{(2)}\) is computed without any scaling. Please note that; sSAPT0 is thus not the same as requesting exch_scale_alpha 3.0, and that the; scaling is automatically performed by requesting energy('ssapt0'). A First Example¶; The following is the simplest possible input that will perform all; available SAPT computations (normally, you would pick one of these methods).; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19; 20; 21; 22; 23molecule water_dimer {; 0 1; O -1.551007 -0.114520 0.000000; H -1.934259 0.762503 0.000000; H -0.599677 0.040712 0.000000; --; 0 1; O 1.350625 0.111469 0.000000; H 1.680398 -0.373741 -0.758561; H 1.680398 -0.373741 0.758561. units angstrom; no_reorient; symmetry c1; }. set basis aug-cc-pvdz. energy('sapt0'); energy('sapt2'); energy('sapt2+'); energy('sapt2+(3)'); energy('sapt2+3'). The SAPT module uses the standard PSI4 partitioning of the dimer; into monomers. SAPT does not use spatial symmetry and needs the geometry; of the system to remain fixed throughout monomer and dimer calculations.; These requirements are imposed whenever a SAPT calculation is requested; but can also be set explicitly with the no_reorient and symmetry; c1 molecule keywords, as in the example above. As a reminder, only; SAPT0 can handle the interacti",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:19952,Usability,simpl,simply,19952,"APT2+(3), and SAPT2+3 energies for closed-shell systems; only. Publications resulting from the use of the higher-order SAPT code; should cite the following:; [Hohenstein:2010:014101].; For methods SAPT2+ and above, one can replace the many-body treatment of; dispersion by an improved method based on coupled-cluster doubles (CCD).; This approach tends to give good improvements when dispersion effects; are very large, as in the PCCP dimer (see [Hohenstein:2011:2842]).; As shown in [Parker:2014:094106], whether or not CCD dispersion offers; more accurate interaction energies tends to depend on the SAPT truncation; and basis set employed, due to cancellations of errors. Thanks to; natural orbital methods [Parrish:2013:174102], the SAPT code; is able to include CCD dispersion with only a modest additional cost.; Computations employing CCD dispersion should cite [Parrish:2013:174102].; To request CCD dispersion treatment in a SAPT computation, simply append; (ccd) to the name of the method, as in the following examples; 1; 2; 3energy('sapt2+(ccd)'); energy('sapt2+(3)(ccd)'); energy('sapt2+3(ccd)'). The \(\delta_{MP2}\) corrections can also be computed automatically; by appending dmp2 to the name of the method, with or without CCD dispersion; 1; 2; 3; 4; 5; 6energy('sapt2+dmp2'); energy('sapt2+(3)dmp2'); energy('sapt2+3dmp2'); energy('sapt2+(ccd)dmp2'); energy('sapt2+(3)(ccd)dmp2'); energy('sapt2+3(ccd)dmp2'). A brief note on memory usage: the higher-order SAPT code assumes that; certain quantities can be held in core. This code requires sufficient; memory to hold \(3o^2v^2+v^2N_{aux}\) arrays in core. With this; requirement computations on the adenine-thymine complex can be performed; with an aug-cc-pVTZ basis in less than 64GB of memory.; Higher-order SAPT is treated separately from the highly optimized SAPT0; code, therefore, higher-order SAPT uses a separate set of keywords.; The following keywords are relevant for higher-order SAPT. Basic Keywords for Higher-order SAP",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/sapt.html:26906,Usability,simpl,simply,26906,"the; charge-transfer results:; 1; 2; 3; 4; 5 SAPT Charge Transfer Analysis; ------------------------------------------------------------------------------------------------; SAPT Induction (Dimer Basis) -2.0970 [mEh] -1.3159 [kcal/mol] -5.5057 [kJ/mol]; SAPT Induction (Monomer Basis) -1.1396 [mEh] -0.7151 [kcal/mol] -2.9920 [kJ/mol]; SAPT Charge Transfer -0.9574 [mEh] -0.6008 [kcal/mol] -2.5137 [kJ/mol]. These results are for the water dimer geometry shown above computed with; SAPT0/aug-cc-pVDZ. Monomer-Centered Basis Computations¶; The charge-transfer analysis above is carried out by taking the; difference between SAPT induction as calculated in the dimer-centered; basis (i.e., each monomer sees the basis functions on both monomers); vs. the monomer-centered basis (i.e., each monomer utilizes only its; own basis set). It is also possible to run a closed-shell SAPT computation at any; level using only the monomer-centered basis. To do this, simply add; sapt_basis='monomer' to the energy function, such as; 1energy('sapt2',sapt_basis='monomer'). This procedure leads to faster compuations, but it converges more slowly; towards the complete basis set limit than the default procedure, which uses; the dimer-centered basis set. Hence, monomer-centered basis SAPT; computations are not recommended. The open-shell SAPT0 code is not; compatible yet with monomer-centered computations. Computations with Mid-bonds¶; SAPT computations with midbonds can be accomplished by adding a third ghost; monomer to the computation. For example; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10molecule dimer {; 0 1; He 0 0 5; --; 0 1; He 0 0 -5; --; 0 1; @He 0 0 0; }. Here the functions of the third monomer will be added to the virtual space of; the entire computation. Note that an error will be thrown if each atom in the; third monomer is not a ghost to prevent confusion with three-body SAPT which is; not currently supported by Psi4. Interpreting SAPT Results¶; We will examine the results of a SAPT2+3/aug-cc-pVDZ",MatchSource.WIKI,psi4manual/1.3.2/sapt.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sapt.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:3263,Availability,avail,available,3263,"converged.; ... @UHF iter 9: -149.62730705472407 -3.63645e-04 8.63697e-05 DIIS; @UHF iter 10: -149.62730737348096 -3.18757e-07 1.50223e-05 DIIS; @UHF iter 11: -149.62730738537113 -1.18902e-08 3.80466e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69193e-10 7.06634e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set uses the exact (but much slower) Direct algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functio",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:3807,Availability,avail,available,3807,"D guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:10937,Availability,down,down,10937,"some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the symmetry flag, as in:; 1; 2; 3; 4; 5molecule h {; 0 2; H; symmetry c1; }. or by the reset_point_group Python molecule attribute:; 1h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the GUESS_MIX; keyword to true:; 1; 2; 3set reference uhf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmet",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:13859,Availability,toler,tolerance,13859,"ied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs per irrep may be slightly smaller than the number of USOs per irrep.; A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum eigenvalue in the overlap matrix is 1.6888063568E-05.; Using Canonical Orthogonalization with cutoff of 1.0000000000E-04.; Irrep 0, 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned t",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:16118,Availability,avail,available,16118,"s/USOs. Initial Guess¶; In each step of the SCF procedure, a new Fock or Kohn–Sham potential is built; according to the previous density, following which the potential is diagonalized; to produce new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:17045,Availability,checkpoint,checkpoint,17045,"asis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilizatio",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:18372,Availability,error,error,18372,"e all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:18788,Availability,failure,failure,18788,"HF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterati",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:19389,Availability,down,down,19389,"terion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:20532,Availability,avail,available,20532,"ape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of;",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:20746,Availability,error,error,20746,"ations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:20782,Availability,avail,available,20782,"ations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:21396,Availability,error,error,21396,"cent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:25304,Availability,down,down,25304," last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. For cases where; normal acceleration methods either fail or take many iterations to converge,; second-order can reduce the total time to solution.; Solving second-order (SO) methods exactly would require an inversion of the; orbital Hessian (an expensive \(\mathbb{N}^6\) operation); however, these; equations are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elements of the gradient to be less than one before the; method is valid. To this end, pre-SOSCF SCF iterations use normal; gradient-based extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiterations typically results in the overall cost being greater for; SOSCF than for gradient-based methods. Therefore, SOSCF should only be used if; it is difficult to locate a stable minimum.; SOSCF is available for all HF and DFT references with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current de",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:26105,Availability,avail,available,26105,"tions are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elements of the gradient to be less than one before the; method is valid. To this end, pre-SOSCF SCF iterations use normal; gradient-based extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiterations typically results in the overall cost being greater for; SOSCF than for gradient-based methods. Therefore, SOSCF should only be used if; it is difficult to locate a stable minimum.; SOSCF is available for all HF and DFT references with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:26512,Availability,toler,tolerance,26512,"matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elements of the gradient to be less than one before the; method is valid. To this end, pre-SOSCF SCF iterations use normal; gradient-based extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiterations typically results in the overall cost being greater for; SOSCF than for gradient-based methods. Therefore, SOSCF should only be used if; it is difficult to locate a stable minimum.; SOSCF is available for all HF and DFT references with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:29548,Availability,avail,available,29548,"minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:29885,Availability,avail,available,29885,"good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:30207,Availability,avail,available,30207,"ation; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FO",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:30352,Availability,avail,available,30352,"ng; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the mo",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:30756,Availability,avail,available,30756,"ossible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the most pertinent for stability analysis, see documentation for the CPHF; module for a complete list.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger tha",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:31866,Availability,reliab,reliably,31866,"therwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the most pertinent for stability analysis, see documentation for the CPHF; module for a complete list.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger than the number of roots so that the lowest ones can be captured reliably. Default within this context: 3; SOLVER_MIN_SUBSPACE: Minimum size of the subspace when collapsing.; SOLVER_MAX_SUBSPACE: Maximum size of the subspace. Default within this context: 12. In case convergence problems are encountered during the Davidson procedure,; it is recommended to first increase SOLVER_MAX_SUBSPACE, especially if you solve; for a large number of roots. This will result in a higher computational cost of each iteration, but should; make the solver better behaved. However, note that SOLVER_MAX_SUBSPACE should never be larger than; the full subspace minus the number of desired roots to avoid adding artificial zero eigenvalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenva",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:33535,Availability,avail,available,33535,"envalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenvalue, try increasing SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:33727,Availability,avail,available,33727,"SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:37219,Availability,error,error,37219,"ion type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, w",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:38556,Availability,avail,available,38556,"vergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; Effective core potentials (ECPs); Exte",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:22662,Deployability,configurat,configurations,22662,"and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:39776,Deployability,update,updated,39776,"ber of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; Effective core potentials (ECPs); External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:732,Energy Efficiency,efficient,efficient,732,"﻿. HF: Hartree–Fock Theory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. HF: Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish and Jerome F. Gonthier; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type direct; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a Direct algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. DF integrals are; automatically used to converge the DF-SCF solution before the Direct algorithm is; activated. After printing all manner of titles, geometries, sizings, and; algorithm choices, the SCF finally reaches the iterations:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19 Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -149.80032977420572 -1.49800e+02 1.48808e-01; @DF-UHF iter 1: -149.59496320631871 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-UHF iter 3: -149.62639942687878 -2.90041e-03 2.19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UH",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:1104,Energy Efficiency,energy,energy,1104,"Methods: SCF to FCI. HF: Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish and Jerome F. Gonthier; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type direct; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a Direct algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. DF integrals are; automatically used to converge the DF-SCF solution before the Direct algorithm is; activated. After printing all manner of titles, geometries, sizings, and; algorithm choices, the SCF finally reaches the iterations:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19 Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -149.80032977420572 -1.49800e+02 1.48808e-01; @DF-UHF iter 1: -149.59496320631871 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-UHF iter 3: -149.62639942687878 -2.90041e-03 2.19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UHF iter 5: -149.62694151275420 -4.58991e-05 1.27338e-04 DIIS; @DF-UHF iter 6: -149.62694337910040 -1.86635e-06 ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:2824,Energy Efficiency,energy,energy,2824," 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-UHF iter 3: -149.62639942687878 -2.90041e-03 2.19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UHF iter 5: -149.62694151275420 -4.58991e-05 1.27338e-04 DIIS; @DF-UHF iter 6: -149.62694337910040 -1.86635e-06 1.65616e-05 DIIS; @DF-UHF iter 7: -149.62694340915198 -3.00516e-08 2.68990e-06 DIIS; @DF-UHF iter 8: -149.62694340999315 -8.41169e-10 2.61249e-07 DIIS. DF guess converged.; ... @UHF iter 9: -149.62730705472407 -3.63645e-04 8.63697e-05 DIIS; @UHF iter 10: -149.62730737348096 -3.18757e-07 1.50223e-05 DIIS; @UHF iter 11: -149.62730738537113 -1.18902e-08 3.80466e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69193e-10 7.06634e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set uses the exact (but much slower) Direct algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:2918,Energy Efficiency,energy,energy,2918,".19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UHF iter 5: -149.62694151275420 -4.58991e-05 1.27338e-04 DIIS; @DF-UHF iter 6: -149.62694337910040 -1.86635e-06 1.65616e-05 DIIS; @DF-UHF iter 7: -149.62694340915198 -3.00516e-08 2.68990e-06 DIIS; @DF-UHF iter 8: -149.62694340999315 -8.41169e-10 2.61249e-07 DIIS. DF guess converged.; ... @UHF iter 9: -149.62730705472407 -3.63645e-04 8.63697e-05 DIIS; @UHF iter 10: -149.62730737348096 -3.18757e-07 1.50223e-05 DIIS; @UHF iter 11: -149.62730738537113 -1.18902e-08 3.80466e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69193e-10 7.06634e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set uses the exact (but much slower) Direct algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; w",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:5331,Energy Efficiency,energy,energy,5331,"ften referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},\]; the Hartree–Fock energy is, by Slater’s rules,. \[E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] - [ij|ji]\]. \[=; D_{\mu\nu}^\alpha \left(H_{\mu\nu} + F_{\mu\nu}^{\alpha} \right); + D_{\mu\nu}^\beta \left(H_{\mu\nu} + F_{\mu\nu}^{\beta} \right)\]; Here \(H\) is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. \[H_{\mu\nu} =; \left(\mu \left| -\frac{1}{2} \nabla^2 + \sum_{A} -\frac{Z_A}{r_{1A}} \right; | \nu \right),\]; \(D\) is the AO-basis density matrix, build from the occupied orbital; coefficients,. \[D_{\mu\nu}^{\alpha} =; C_{\mu i}^{\alpha} C_{\nu i}^{\alpha},\]; and \(F\) is the Fock matrix, which is the effective one-body potential at; the current value of the density,. \[F_{\mu\nu}^{\alpha} = H_{\mu\nu}; + \underbrace{\left(D_{\lambda\sigma}^{\alpha} + D_{\lambda\sigma}^{\beta}\right); (\mu\nu|\la",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:5762,Energy Efficiency,energy,energy,5762,"y}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},\]; the Hartree–Fock energy is, by Slater’s rules,. \[E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] - [ij|ji]\]. \[=; D_{\mu\nu}^\alpha \left(H_{\mu\nu} + F_{\mu\nu}^{\alpha} \right); + D_{\mu\nu}^\beta \left(H_{\mu\nu} + F_{\mu\nu}^{\beta} \right)\]; Here \(H\) is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. \[H_{\mu\nu} =; \left(\mu \left| -\frac{1}{2} \nabla^2 + \sum_{A} -\frac{Z_A}{r_{1A}} \right; | \nu \right),\]; \(D\) is the AO-basis density matrix, build from the occupied orbital; coefficients,. \[D_{\mu\nu}^{\alpha} =; C_{\mu i}^{\alpha} C_{\nu i}^{\alpha},\]; and \(F\) is the Fock matrix, which is the effective one-body potential at; the current value of the density,. \[F_{\mu\nu}^{\alpha} = H_{\mu\nu}; + \underbrace{\left(D_{\lambda\sigma}^{\alpha} + D_{\lambda\sigma}^{\beta}\right); (\mu\nu|\lambda\sigma)}_{J}; + \underbrace{D_{\lambda\sigma}^{\alpha} (\mu\lambda|\sigma\nu)}_{K^{\alpha}}\]; Here the tensor \((\mu\nu|\lambda\sigma)\) is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. \[(\mu\nu|\lambda\sigma) = \iint_{\mathbb{R}^6}; \phi_{\mu} (\vec r_1); \phi_{\nu} (\vec r_1); \frac{1}{r_{12}}; \phi_{\lambda} (\vec r_2); \phi_{\sigma} ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:7584,Energy Efficiency,energy,energy,7584," r_1); \phi_{\nu} (\vec r_1); \frac{1}{r_{12}}; \phi_{\lambda} (\vec r_2); \phi_{\sigma} (\vec r_2); \ \mathrm{d}^3 r_1; \ \mathrm{d}^3 r_2.\]; The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. \[F^\alpha C^\alpha = S C^\alpha \epsilon^\alpha\]; The eigenvalues \(\epsilon\) are the orbital energies, and the metric matrix; \(S\) is the AO-basis overlap matrix. \[S_{\mu\nu} = (\mu | \nu )\]; Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbitals. Because of this, SCF is a nonlinear procedure, which; terminates when the generating orbitals are self-consistent with the Fock matrix; they generate.; The formation of the Coulomb matrix \(J\) and the exchange matrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fu",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:7656,Energy Efficiency,energy,energy,7656,"{d}^3 r_1; \ \mathrm{d}^3 r_2.\]; The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. \[F^\alpha C^\alpha = S C^\alpha \epsilon^\alpha\]; The eigenvalues \(\epsilon\) are the orbital energies, and the metric matrix; \(S\) is the AO-basis overlap matrix. \[S_{\mu\nu} = (\mu | \nu )\]; Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbitals. Because of this, SCF is a nonlinear procedure, which; terminates when the generating orbitals are self-consistent with the Fock matrix; they generate.; The formation of the Coulomb matrix \(J\) and the exchange matrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; Howeve",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:7812,Energy Efficiency,energy,energy,7812,"c matrix; \(S\) is the AO-basis overlap matrix. \[S_{\mu\nu} = (\mu | \nu )\]; Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbitals. Because of this, SCF is a nonlinear procedure, which; terminates when the generating orbitals are self-consistent with the Fock matrix; they generate.; The formation of the Coulomb matrix \(J\) and the exchange matrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the \(\hat S^2\) operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviati",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:8295,Energy Efficiency,efficient,efficient,8295,"atrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the \(\hat S^2\) operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree–Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constr",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:9498,Energy Efficiency,charge,charge,9498,"dependent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the \(\hat S^2\) operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree–Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree–Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; 1; 2; 3; 4molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; 1; 2h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4 and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the symmetry flag, as in:; 1; 2; 3; 4; 5molecule h {; 0 2; H; symmetry c1; }. or by the reset_point_group Python molecule attribute:; 1h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by usi",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:10835,Energy Efficiency,energy,energy,10835,"tain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the symmetry flag, as in:; 1; 2; 3; 4; 5molecule h {; 0 2; H; symmetry c1; }. or by the reset_point_group Python molecule attribute:; 1h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the GUESS_MIX; keyword to true:; 1; 2; 3set reference uhf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:11512,Energy Efficiency,energy,energy,11512,"etween iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the GUESS_MIX; keyword to true:; 1; 2; 3set reference uhf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems or for; systems where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetri",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:13339,Energy Efficiency,adapt,adapted,13339,"ms where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs per irrep may be slightly smaller than the number of USOs per irrep.; A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; ----------------------------------",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:13989,Energy Efficiency,energy,energy,13989,"w this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs per irrep may be slightly smaller than the number of USOs per irrep.; A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum eigenvalue in the overlap matrix is 1.6888063568E-05.; Using Canonical Orthogonalization with cutoff of 1.0000000000E-04.; Irrep 0, 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned to irrep B. Within irrep A,; 144 OSOs fall above the eigenvalue cutoff, and within irrep B ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:14822,Energy Efficiency,adapt,adapted,14822," tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum eigenvalue in the overlap matrix is 1.6888063568E-05.; Using Canonical Orthogonalization with cutoff of 1.0000000000E-04.; Irrep 0, 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned to irrep B. Within irrep A,; 144 OSOs fall above the eigenvalue cutoff, and within irrep B 140 OSOs fall; above the eigenvalue cutoff. In total, 284 molecular orbitals are chosen from; 287 AOs/USOs. Initial Guess¶; In each step of the SCF procedure, a new Fock or Kohn–Sham potential is built; according to the previous density, following which the potential is diagonalized; to produce new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial or",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:15519,Energy Efficiency,energy,energy,15519,", 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned to irrep B. Within irrep A,; 144 OSOs fall above the eigenvalue cutoff, and within irrep B 140 OSOs fall; above the eigenvalue cutoff. In total, 284 molecular orbitals are chosen from; 287 AOs/USOs. Initial Guess¶; In each step of the SCF procedure, a new Fock or Kohn–Sham potential is built; according to the previous density, following which the potential is diagonalized; to produce new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell s",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:17684,Energy Efficiency,efficient,efficient,17684,"in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be;",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:18016,Energy Efficiency,energy,energy,18016,"evious orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbita",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:19786,Energy Efficiency,energy,energy,19786,"s developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:19844,Energy Efficiency,energy,energy,19844,"ally; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:20857,Energy Efficiency,reduce,reduce,20857,"total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise t",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:21079,Energy Efficiency,reduce,reduce,21079,"atory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:24950,Energy Efficiency,reduce,reduce,24950,". To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. For cases where; normal acceleration methods either fail or take many iterations to converge,; second-order can reduce the total time to solution.; Solving second-order (SO) methods exactly would require an inversion of the; orbital Hessian (an expensive \(\mathbb{N}^6\) operation); however, these; equations are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elements of the gradient to be less than one before the; method is valid. To this end, pre-SOSCF SCF iterations use normal; gradient-based extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiteratio",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:26685,Energy Efficiency,energy,energy,26685,"extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiterations typically results in the overall cost being greater for; SOSCF than for gradient-based methods. Therefore, SOSCF should only be used if; it is difficult to locate a stable minimum.; SOSCF is available for all HF and DFT references with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:27123,Energy Efficiency,energy,energy,27123,"erences with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson a",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:27395,Energy Efficiency,energy,energy,27395,"start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson algorithms. We will first describe; options common to both algorithms. To request a stability analysis at the end of the SCF,; set the keyword STABILITY_ANALYSIS. Value CHECK only computes the electronic; Hessian ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:27847,Energy Efficiency,energy,energy,27847,"his is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson algorithms. We will first describe; options common to both algorithms. To request a stability analysis at the end of the SCF,; set the keyword STABILITY_ANALYSIS. Value CHECK only computes the electronic; Hessian eigenvalue and checks if an actual SCF minimum has been found, while value FOLLOW; rotates the converged orbitals along the lowest eigenvector, then invokes the SCF; procedure again to lower the energy. In case the minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usuall",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:28544,Energy Efficiency,energy,energy,28544,"rameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson algorithms. We will first describe; options common to both algorithms. To request a stability analysis at the end of the SCF,; set the keyword STABILITY_ANALYSIS. Value CHECK only computes the electronic; Hessian eigenvalue and checks if an actual SCF minimum has been found, while value FOLLOW; rotates the converged orbitals along the lowest eigenvector, then invokes the SCF; procedure again to lower the energy. In case the minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want t",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:29451,Energy Efficiency,energy,energy,29451,"the lowest eigenvector, then invokes the SCF; procedure again to lower the energy. In case the minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Inte",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:30143,Energy Efficiency,efficient,efficient,30143,"ation; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FO",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:30830,Energy Efficiency,adapt,adapt,30830,"ossible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the most pertinent for stability analysis, see documentation for the CPHF; module for a complete list.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger tha",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:34845,Energy Efficiency,charge,charge,34845,"Ps have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm an",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:34925,Energy Efficiency,charge,charge,34925,"ntact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TY",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:35646,Energy Efficiency,reduce,reduced,35646,"XTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, to",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:36011,Energy Efficiency,energy,energy,36011,"s the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONV",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:36086,Energy Efficiency,energy,energy,36086,"s may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:36337,Energy Efficiency,energy,energy,36337,"of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is define",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:37791,Energy Efficiency,power,powerful,37791,"the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless converge",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:39218,Energy Efficiency,energy,energy,39218,"ber of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; Effective core potentials (ECPs); External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:4236,Integrability,contract,contracted,4236,"gence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:7004,Integrability,depend,depends,7004," C_{\nu i}^{\alpha},\]; and \(F\) is the Fock matrix, which is the effective one-body potential at; the current value of the density,. \[F_{\mu\nu}^{\alpha} = H_{\mu\nu}; + \underbrace{\left(D_{\lambda\sigma}^{\alpha} + D_{\lambda\sigma}^{\beta}\right); (\mu\nu|\lambda\sigma)}_{J}; + \underbrace{D_{\lambda\sigma}^{\alpha} (\mu\lambda|\sigma\nu)}_{K^{\alpha}}\]; Here the tensor \((\mu\nu|\lambda\sigma)\) is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. \[(\mu\nu|\lambda\sigma) = \iint_{\mathbb{R}^6}; \phi_{\mu} (\vec r_1); \phi_{\nu} (\vec r_1); \frac{1}{r_{12}}; \phi_{\lambda} (\vec r_2); \phi_{\sigma} (\vec r_2); \ \mathrm{d}^3 r_1; \ \mathrm{d}^3 r_2.\]; The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. \[F^\alpha C^\alpha = S C^\alpha \epsilon^\alpha\]; The eigenvalues \(\epsilon\) are the orbital energies, and the metric matrix; \(S\) is the AO-basis overlap matrix. \[S_{\mu\nu} = (\mu | \nu )\]; Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbitals. Because of this, SCF is a nonlinear procedure, which; terminates when the generating orbitals are self-consistent with the Fock matrix; they generate.; The formation of the Coulomb matrix \(J\) and the exchange matrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; informat",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:23575,Integrability,rout,routines,23575,"s. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:12531,Modifiability,enhance,enhanced,12531,"hf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems or for; systems where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:13339,Modifiability,adapt,adapted,13339,"ms where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs per irrep may be slightly smaller than the number of USOs per irrep.; A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; ----------------------------------",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:14822,Modifiability,adapt,adapted,14822," tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum eigenvalue in the overlap matrix is 1.6888063568E-05.; Using Canonical Orthogonalization with cutoff of 1.0000000000E-04.; Irrep 0, 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned to irrep B. Within irrep A,; 144 OSOs fall above the eigenvalue cutoff, and within irrep B 140 OSOs fall; above the eigenvalue cutoff. In total, 284 molecular orbitals are chosen from; 287 AOs/USOs. Initial Guess¶; In each step of the SCF procedure, a new Fock or Kohn–Sham potential is built; according to the previous density, following which the potential is diagonalized; to produce new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial or",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:22662,Modifiability,config,configurations,22662,"and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:23894,Modifiability,extend,extended,23894,"lowing two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. Fo",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:30830,Modifiability,adapt,adapt,30830,"ossible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the most pertinent for stability analysis, see documentation for the CPHF; module for a complete list.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger tha",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:37778,Modifiability,flexible,flexible,37778,"the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless converge",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:3713,Performance,perform,performed,3713,". Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:4056,Performance,optimiz,optimized,4056,"he DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation a",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:9984,Performance,perform,performance,9984," If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree–Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree–Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; 1; 2; 3; 4molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; 1; 2h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4 and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the symmetry flag, as in:; 1; 2; 3; 4; 5molecule h {; 0 2; H; symmetry c1; }. or by the reset_point_group Python molecule attribute:; 1h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain probl",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:11296,Performance,perform,perform,11296,"n of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the GUESS_MIX; keyword to true:; 1; 2; 3set reference uhf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:16383,Performance,optimiz,optimizations,16383,". This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geomet",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:16635,Performance,perform,performed,16635,"ow; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BA",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:17356,Performance,optimiz,optimizations,17356," default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:17745,Performance,perform,performing,17745," [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:18936,Performance,optimiz,optimized,18936,".0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:20975,Performance,bottleneck,bottleneck,20975,"t with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is re",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:21579,Performance,optimiz,optimized,21579,"SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, bu",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:22891,Performance,optimiz,optimized,22891,"d unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the IN",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:23167,Performance,optimiz,optimized,23167,"acy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defa",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:23218,Performance,perform,performance,23218,"acy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defa",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:23325,Performance,perform,performance,23325," similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:28645,Performance,tune,tune,28645,"s; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson algorithms. We will first describe; options common to both algorithms. To request a stability analysis at the end of the SCF,; set the keyword STABILITY_ANALYSIS. Value CHECK only computes the electronic; Hessian eigenvalue and checks if an actual SCF minimum has been found, while value FOLLOW; rotates the converged orbitals along the lowest eigenvector, then invokes the SCF; procedure again to lower the energy. In case the minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:34154,Performance,perform,perform,34154,"alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:36029,Performance,optimiz,optimization,36029," in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CO",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:36108,Performance,optimiz,optimization,36108,"extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginnin",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:36351,Performance,optimiz,optimization,36351,"he y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is defined; according to the quantum",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:38331,Performance,perform,performing,38331,"nning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theor",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:38796,Performance,optimiz,optimized,38796,"ossible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; Effective core potentials (ECPs); External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created u",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:8977,Safety,avoid,avoid,8977,"zation, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the \(\hat S^2\) operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree–Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree–Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; 1; 2; 3; 4molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; 1; 2h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4 and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in som",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:12382,Safety,avoid,avoided,12382,"hf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems or for; systems where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:22702,Safety,detect,detect,22702,"MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:24415,Safety,avoid,avoid,24415,"ases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. For cases where; normal acceleration methods either fail or take many iterations to converge,; second-order can reduce the total time to solution.; Solving second-order (SO) methods exactly would require an inversion of the; orbital Hessian (an expensive \(\mathbb{N}^6\) operation); however, these; equations are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SO",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:29785,Safety,avoid,avoided,29785,"\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:32482,Safety,avoid,avoid,32482,"ist.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger than the number of roots so that the lowest ones can be captured reliably. Default within this context: 3; SOLVER_MIN_SUBSPACE: Minimum size of the subspace when collapsing.; SOLVER_MAX_SUBSPACE: Maximum size of the subspace. Default within this context: 12. In case convergence problems are encountered during the Davidson procedure,; it is recommended to first increase SOLVER_MAX_SUBSPACE, especially if you solve; for a large number of roots. This will result in a higher computational cost of each iteration, but should; make the solver better behaved. However, note that SOLVER_MAX_SUBSPACE should never be larger than; the full subspace minus the number of desired roots to avoid adding artificial zero eigenvalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenvalue, try increasing SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of c",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:33317,Safety,detect,detected,33317,"ation, but should; make the solver better behaved. However, note that SOLVER_MAX_SUBSPACE should never be larger than; the full subspace minus the number of desired roots to avoid adding artificial zero eigenvalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenvalue, try increasing SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:33875,Testability,test,tested,33875,"otentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordin",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:34272,Testability,test,test,34272,"automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:4489,Usability,simpl,simplest,4489,"brid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},\]; the Hartree–Fock energy is, by Slater’s rules,. \[E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] - [ij",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:16881,Usability,simpl,simple,16881,"convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; ",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:33114,Usability,simpl,simply,33114,"untered during the Davidson procedure,; it is recommended to first increase SOLVER_MAX_SUBSPACE, especially if you solve; for a large number of roots. This will result in a higher computational cost of each iteration, but should; make the solver better behaved. However, note that SOLVER_MAX_SUBSPACE should never be larger than; the full subspace minus the number of desired roots to avoid adding artificial zero eigenvalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenvalue, try increasing SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implement",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf-1.html:38250,Usability,simpl,simple,38250,"nning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theor",MatchSource.WIKI,psi4manual/1.3.2/scf-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf-1.html
https://psicode.org/psi4manual/1.3.2/scf.html:3263,Availability,avail,available,3263,"converged.; ... @UHF iter 9: -149.62730705472407 -3.63645e-04 8.63697e-05 DIIS; @UHF iter 10: -149.62730737348096 -3.18757e-07 1.50223e-05 DIIS; @UHF iter 11: -149.62730738537113 -1.18902e-08 3.80466e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69193e-10 7.06634e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set uses the exact (but much slower) Direct algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functio",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:3807,Availability,avail,available,3807,"D guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:10937,Availability,down,down,10937,"some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the symmetry flag, as in:; 1; 2; 3; 4; 5molecule h {; 0 2; H; symmetry c1; }. or by the reset_point_group Python molecule attribute:; 1h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the GUESS_MIX; keyword to true:; 1; 2; 3set reference uhf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmet",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:13859,Availability,toler,tolerance,13859,"ied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs per irrep may be slightly smaller than the number of USOs per irrep.; A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum eigenvalue in the overlap matrix is 1.6888063568E-05.; Using Canonical Orthogonalization with cutoff of 1.0000000000E-04.; Irrep 0, 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned t",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:16118,Availability,avail,available,16118,"s/USOs. Initial Guess¶; In each step of the SCF procedure, a new Fock or Kohn–Sham potential is built; according to the previous density, following which the potential is diagonalized; to produce new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:17045,Availability,checkpoint,checkpoint,17045,"asis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilizatio",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:18372,Availability,error,error,18372,"e all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:18788,Availability,failure,failure,18788,"HF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterati",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:19389,Availability,down,down,19389,"terion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:20532,Availability,avail,available,20532,"ape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of;",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:20746,Availability,error,error,20746,"ations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:20782,Availability,avail,available,20782,"ations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:21396,Availability,error,error,21396,"cent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:25304,Availability,down,down,25304," last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. For cases where; normal acceleration methods either fail or take many iterations to converge,; second-order can reduce the total time to solution.; Solving second-order (SO) methods exactly would require an inversion of the; orbital Hessian (an expensive \(\mathbb{N}^6\) operation); however, these; equations are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elements of the gradient to be less than one before the; method is valid. To this end, pre-SOSCF SCF iterations use normal; gradient-based extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiterations typically results in the overall cost being greater for; SOSCF than for gradient-based methods. Therefore, SOSCF should only be used if; it is difficult to locate a stable minimum.; SOSCF is available for all HF and DFT references with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current de",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:26105,Availability,avail,available,26105,"tions are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elements of the gradient to be less than one before the; method is valid. To this end, pre-SOSCF SCF iterations use normal; gradient-based extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiterations typically results in the overall cost being greater for; SOSCF than for gradient-based methods. Therefore, SOSCF should only be used if; it is difficult to locate a stable minimum.; SOSCF is available for all HF and DFT references with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:26512,Availability,toler,tolerance,26512,"matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elements of the gradient to be less than one before the; method is valid. To this end, pre-SOSCF SCF iterations use normal; gradient-based extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiterations typically results in the overall cost being greater for; SOSCF than for gradient-based methods. Therefore, SOSCF should only be used if; it is difficult to locate a stable minimum.; SOSCF is available for all HF and DFT references with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:29548,Availability,avail,available,29548,"minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:29885,Availability,avail,available,29885,"good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:30207,Availability,avail,available,30207,"ation; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FO",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:30352,Availability,avail,available,30352,"ng; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the mo",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:30756,Availability,avail,available,30756,"ossible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the most pertinent for stability analysis, see documentation for the CPHF; module for a complete list.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger tha",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:31866,Availability,reliab,reliably,31866,"therwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the most pertinent for stability analysis, see documentation for the CPHF; module for a complete list.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger than the number of roots so that the lowest ones can be captured reliably. Default within this context: 3; SOLVER_MIN_SUBSPACE: Minimum size of the subspace when collapsing.; SOLVER_MAX_SUBSPACE: Maximum size of the subspace. Default within this context: 12. In case convergence problems are encountered during the Davidson procedure,; it is recommended to first increase SOLVER_MAX_SUBSPACE, especially if you solve; for a large number of roots. This will result in a higher computational cost of each iteration, but should; make the solver better behaved. However, note that SOLVER_MAX_SUBSPACE should never be larger than; the full subspace minus the number of desired roots to avoid adding artificial zero eigenvalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenva",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:33535,Availability,avail,available,33535,"envalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenvalue, try increasing SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:33727,Availability,avail,available,33727,"SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:37219,Availability,error,error,37219,"ion type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, w",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:38556,Availability,avail,available,38556,"vergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; Effective core potentials (ECPs); Exte",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:22662,Deployability,configurat,configurations,22662,"and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:39776,Deployability,update,updated,39776,"ber of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; Effective core potentials (ECPs); External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:732,Energy Efficiency,efficient,efficient,732,"﻿. HF: Hartree–Fock Theory. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. HF: Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish and Jerome F. Gonthier; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type direct; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a Direct algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. DF integrals are; automatically used to converge the DF-SCF solution before the Direct algorithm is; activated. After printing all manner of titles, geometries, sizings, and; algorithm choices, the SCF finally reaches the iterations:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19 Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -149.80032977420572 -1.49800e+02 1.48808e-01; @DF-UHF iter 1: -149.59496320631871 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-UHF iter 3: -149.62639942687878 -2.90041e-03 2.19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UH",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:1104,Energy Efficiency,energy,energy,1104,"Methods: SCF to FCI. HF: Hartree–Fock Theory¶; Code author: Justin M. Turney, Robert M. Parrish, and Andrew C. Simmonett; Section author: Robert M. Parrish and Jerome F. Gonthier; Module: Keywords, PSI Variables, LIBSCF_SOLVER, LIBMINTS, LIBFOCK, LIBDIIS. Introduction¶; Self-Consistent-Field (SCF) theory forms the cornerstone of ab initio quantum; chemistry. Here SCF refers both to conventional Hartree–Fock (HF) molecular; orbital theory and also to generalized Kohn–Sham Density Functional Theory; (KS-DFT). PSI4 contains a wholly rewritten SCF code, including many of the; most popular spin specializations, several efficient numerical methods for; treating Fock Matrix construction, and a brand new KS-DFT code featuring many of; the most popular DFT functional technologies.; An illustrative example of using the SCF module is as follows:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule {; 0 3; O; O 1 1.21; }. set {; basis cc-pvdz; guess sad; reference uhf; scf_type direct; }. energy('scf'). This will run a UHF computation for triplet molecular oxygen (the ground state); using a Direct algorithm for the Electron Repulsion Integrals (ERI) and starting; from a Superposition of Atomic Densities (SAD) guess. DF integrals are; automatically used to converge the DF-SCF solution before the Direct algorithm is; activated. After printing all manner of titles, geometries, sizings, and; algorithm choices, the SCF finally reaches the iterations:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18; 19 Total Energy Delta E RMS |[F,P]|. @DF-UHF iter 0: -149.80032977420572 -1.49800e+02 1.48808e-01; @DF-UHF iter 1: -149.59496320631871 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-UHF iter 3: -149.62639942687878 -2.90041e-03 2.19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UHF iter 5: -149.62694151275420 -4.58991e-05 1.27338e-04 DIIS; @DF-UHF iter 6: -149.62694337910040 -1.86635e-06 ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:2824,Energy Efficiency,energy,energy,2824," 2.05367e-01 2.58009e-02; @DF-UHF iter 2: -149.62349901753706 -2.85358e-02 6.68980e-03 DIIS; @DF-UHF iter 3: -149.62639942687878 -2.90041e-03 2.19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UHF iter 5: -149.62694151275420 -4.58991e-05 1.27338e-04 DIIS; @DF-UHF iter 6: -149.62694337910040 -1.86635e-06 1.65616e-05 DIIS; @DF-UHF iter 7: -149.62694340915198 -3.00516e-08 2.68990e-06 DIIS; @DF-UHF iter 8: -149.62694340999315 -8.41169e-10 2.61249e-07 DIIS. DF guess converged.; ... @UHF iter 9: -149.62730705472407 -3.63645e-04 8.63697e-05 DIIS; @UHF iter 10: -149.62730737348096 -3.18757e-07 1.50223e-05 DIIS; @UHF iter 11: -149.62730738537113 -1.18902e-08 3.80466e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69193e-10 7.06634e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set uses the exact (but much slower) Direct algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:2918,Energy Efficiency,energy,energy,2918,".19285e-03 DIIS; @DF-UHF iter 4: -149.62689561367233 -4.96187e-04 5.99497e-04 DIIS; @DF-UHF iter 5: -149.62694151275420 -4.58991e-05 1.27338e-04 DIIS; @DF-UHF iter 6: -149.62694337910040 -1.86635e-06 1.65616e-05 DIIS; @DF-UHF iter 7: -149.62694340915198 -3.00516e-08 2.68990e-06 DIIS; @DF-UHF iter 8: -149.62694340999315 -8.41169e-10 2.61249e-07 DIIS. DF guess converged.; ... @UHF iter 9: -149.62730705472407 -3.63645e-04 8.63697e-05 DIIS; @UHF iter 10: -149.62730737348096 -3.18757e-07 1.50223e-05 DIIS; @UHF iter 11: -149.62730738537113 -1.18902e-08 3.80466e-06 DIIS; @UHF iter 12: -149.62730738624032 -8.69193e-10 7.06634e-07 DIIS. The first set of iterations are from the DF portion of the computation, the; second set uses the exact (but much slower) Direct algorithm. Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; w",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:5331,Energy Efficiency,energy,energy,5331,"ften referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},\]; the Hartree–Fock energy is, by Slater’s rules,. \[E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] - [ij|ji]\]. \[=; D_{\mu\nu}^\alpha \left(H_{\mu\nu} + F_{\mu\nu}^{\alpha} \right); + D_{\mu\nu}^\beta \left(H_{\mu\nu} + F_{\mu\nu}^{\beta} \right)\]; Here \(H\) is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. \[H_{\mu\nu} =; \left(\mu \left| -\frac{1}{2} \nabla^2 + \sum_{A} -\frac{Z_A}{r_{1A}} \right; | \nu \right),\]; \(D\) is the AO-basis density matrix, build from the occupied orbital; coefficients,. \[D_{\mu\nu}^{\alpha} =; C_{\mu i}^{\alpha} C_{\nu i}^{\alpha},\]; and \(F\) is the Fock matrix, which is the effective one-body potential at; the current value of the density,. \[F_{\mu\nu}^{\alpha} = H_{\mu\nu}; + \underbrace{\left(D_{\lambda\sigma}^{\alpha} + D_{\lambda\sigma}^{\beta}\right); (\mu\nu|\la",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:5762,Energy Efficiency,energy,energy,5762,"y}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},\]; the Hartree–Fock energy is, by Slater’s rules,. \[E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] - [ij|ji]\]. \[=; D_{\mu\nu}^\alpha \left(H_{\mu\nu} + F_{\mu\nu}^{\alpha} \right); + D_{\mu\nu}^\beta \left(H_{\mu\nu} + F_{\mu\nu}^{\beta} \right)\]; Here \(H\) is the AO-basis one-electron potential, encapsulating both; electron-nuclear attraction and kinetic energy,. \[H_{\mu\nu} =; \left(\mu \left| -\frac{1}{2} \nabla^2 + \sum_{A} -\frac{Z_A}{r_{1A}} \right; | \nu \right),\]; \(D\) is the AO-basis density matrix, build from the occupied orbital; coefficients,. \[D_{\mu\nu}^{\alpha} =; C_{\mu i}^{\alpha} C_{\nu i}^{\alpha},\]; and \(F\) is the Fock matrix, which is the effective one-body potential at; the current value of the density,. \[F_{\mu\nu}^{\alpha} = H_{\mu\nu}; + \underbrace{\left(D_{\lambda\sigma}^{\alpha} + D_{\lambda\sigma}^{\beta}\right); (\mu\nu|\lambda\sigma)}_{J}; + \underbrace{D_{\lambda\sigma}^{\alpha} (\mu\lambda|\sigma\nu)}_{K^{\alpha}}\]; Here the tensor \((\mu\nu|\lambda\sigma)\) is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. \[(\mu\nu|\lambda\sigma) = \iint_{\mathbb{R}^6}; \phi_{\mu} (\vec r_1); \phi_{\nu} (\vec r_1); \frac{1}{r_{12}}; \phi_{\lambda} (\vec r_2); \phi_{\sigma} ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:7584,Energy Efficiency,energy,energy,7584," r_1); \phi_{\nu} (\vec r_1); \frac{1}{r_{12}}; \phi_{\lambda} (\vec r_2); \phi_{\sigma} (\vec r_2); \ \mathrm{d}^3 r_1; \ \mathrm{d}^3 r_2.\]; The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. \[F^\alpha C^\alpha = S C^\alpha \epsilon^\alpha\]; The eigenvalues \(\epsilon\) are the orbital energies, and the metric matrix; \(S\) is the AO-basis overlap matrix. \[S_{\mu\nu} = (\mu | \nu )\]; Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbitals. Because of this, SCF is a nonlinear procedure, which; terminates when the generating orbitals are self-consistent with the Fock matrix; they generate.; The formation of the Coulomb matrix \(J\) and the exchange matrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fu",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:7656,Energy Efficiency,energy,energy,7656,"{d}^3 r_1; \ \mathrm{d}^3 r_2.\]; The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. \[F^\alpha C^\alpha = S C^\alpha \epsilon^\alpha\]; The eigenvalues \(\epsilon\) are the orbital energies, and the metric matrix; \(S\) is the AO-basis overlap matrix. \[S_{\mu\nu} = (\mu | \nu )\]; Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbitals. Because of this, SCF is a nonlinear procedure, which; terminates when the generating orbitals are self-consistent with the Fock matrix; they generate.; The formation of the Coulomb matrix \(J\) and the exchange matrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; Howeve",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:7812,Energy Efficiency,energy,energy,7812,"c matrix; \(S\) is the AO-basis overlap matrix. \[S_{\mu\nu} = (\mu | \nu )\]; Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbitals. Because of this, SCF is a nonlinear procedure, which; terminates when the generating orbitals are self-consistent with the Fock matrix; they generate.; The formation of the Coulomb matrix \(J\) and the exchange matrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the \(\hat S^2\) operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviati",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:8295,Energy Efficiency,efficient,efficient,8295,"atrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the \(\hat S^2\) operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree–Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constr",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:9498,Energy Efficiency,charge,charge,9498,"dependent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the \(\hat S^2\) operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree–Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree–Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; 1; 2; 3; 4molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; 1; 2h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4 and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the symmetry flag, as in:; 1; 2; 3; 4; 5molecule h {; 0 2; H; symmetry c1; }. or by the reset_point_group Python molecule attribute:; 1h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by usi",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:10835,Energy Efficiency,energy,energy,10835,"tain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the symmetry flag, as in:; 1; 2; 3; 4; 5molecule h {; 0 2; H; symmetry c1; }. or by the reset_point_group Python molecule attribute:; 1h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the GUESS_MIX; keyword to true:; 1; 2; 3set reference uhf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:11512,Energy Efficiency,energy,energy,11512,"etween iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the GUESS_MIX; keyword to true:; 1; 2; 3set reference uhf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems or for; systems where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetri",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:13339,Energy Efficiency,adapt,adapted,13339,"ms where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs per irrep may be slightly smaller than the number of USOs per irrep.; A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; ----------------------------------",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:13989,Energy Efficiency,energy,energy,13989,"w this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs per irrep may be slightly smaller than the number of USOs per irrep.; A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum eigenvalue in the overlap matrix is 1.6888063568E-05.; Using Canonical Orthogonalization with cutoff of 1.0000000000E-04.; Irrep 0, 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned to irrep B. Within irrep A,; 144 OSOs fall above the eigenvalue cutoff, and within irrep B ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:14822,Energy Efficiency,adapt,adapted,14822," tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum eigenvalue in the overlap matrix is 1.6888063568E-05.; Using Canonical Orthogonalization with cutoff of 1.0000000000E-04.; Irrep 0, 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned to irrep B. Within irrep A,; 144 OSOs fall above the eigenvalue cutoff, and within irrep B 140 OSOs fall; above the eigenvalue cutoff. In total, 284 molecular orbitals are chosen from; 287 AOs/USOs. Initial Guess¶; In each step of the SCF procedure, a new Fock or Kohn–Sham potential is built; according to the previous density, following which the potential is diagonalized; to produce new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial or",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:15519,Energy Efficiency,energy,energy,15519,", 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned to irrep B. Within irrep A,; 144 OSOs fall above the eigenvalue cutoff, and within irrep B 140 OSOs fall; above the eigenvalue cutoff. In total, 284 molecular orbitals are chosen from; 287 AOs/USOs. Initial Guess¶; In each step of the SCF procedure, a new Fock or Kohn–Sham potential is built; according to the previous density, following which the potential is diagonalized; to produce new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell s",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:17684,Energy Efficiency,efficient,efficient,17684,"in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be;",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:18016,Energy Efficiency,energy,energy,18016,"evious orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbita",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:19786,Energy Efficiency,energy,energy,19786,"s developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:19844,Energy Efficiency,energy,energy,19844,"ally; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:20857,Energy Efficiency,reduce,reduce,20857,"total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of the SCF. MOM can; be used in concert with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise t",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:21079,Energy Efficiency,reduce,reduce,21079,"atory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:24950,Energy Efficiency,reduce,reduce,24950,". To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. For cases where; normal acceleration methods either fail or take many iterations to converge,; second-order can reduce the total time to solution.; Solving second-order (SO) methods exactly would require an inversion of the; orbital Hessian (an expensive \(\mathbb{N}^6\) operation); however, these; equations are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SOSCF step.; SOSCF requires that all elements of the gradient to be less than one before the; method is valid. To this end, pre-SOSCF SCF iterations use normal; gradient-based extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiteratio",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:26685,Energy Efficiency,energy,energy,26685,"extrapolation procedures (e.g., DIIS) until the gradient; conditions are met. Note that while the total number of macroiterations will be; less for SOSCF than gradient-based convergence acceleration, the cost of solving; the microiterations typically results in the overall cost being greater for; SOSCF than for gradient-based methods. Therefore, SOSCF should only be used if; it is difficult to locate a stable minimum.; SOSCF is available for all HF and DFT references with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:27123,Energy Efficiency,energy,energy,27123,"erences with the exception of meta-; GGA functionals. To enable, set the option SOSCF to true.; Additional options to modify the number of microiterations taken are as; follows:. SOSCF_START_CONVERGENCE: when to start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson a",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:27395,Energy Efficiency,energy,energy,27395,"start SOSCF based on the current density RMS; SOSCF_MAX_ITER: the maximum number of SOSCF microiterations per macroiteration; SOSCF_CONV: the relative convergence tolerance of the SOSCF microiterations; SOSCF_PRINT: option to print the microiterations or not. Stability Analysis¶; SCF algorithms attempt to minimize the gradient of the energy with respect; to orbital variation parameters. At convergence, the gradient should be approximately zero; given a convergence criterion. Although this is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson algorithms. We will first describe; options common to both algorithms. To request a stability analysis at the end of the SCF,; set the keyword STABILITY_ANALYSIS. Value CHECK only computes the electronic; Hessian ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:27847,Energy Efficiency,energy,energy,27847,"his is enough to make sure the SCF converged to a; stationary point, this is not a sufficient condition for a minimal SCF solution. It may be; a saddle point or a maximum.; To ensure that a minimum has been found, the electronic Hessian, i.e. the matrix of second; derivatives of the energy with respect to orbital variation parameters, must be computed.; If one or more eigenvalues of the electronic Hessian are negative, the SCF solution is not a minimum.; In that case, orbital parameters can be varied along the lowest Hessian eigenvector to lower the energy.; Orbital variation parameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson algorithms. We will first describe; options common to both algorithms. To request a stability analysis at the end of the SCF,; set the keyword STABILITY_ANALYSIS. Value CHECK only computes the electronic; Hessian eigenvalue and checks if an actual SCF minimum has been found, while value FOLLOW; rotates the converged orbitals along the lowest eigenvector, then invokes the SCF; procedure again to lower the energy. In case the minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usuall",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:28544,Energy Efficiency,energy,energy,28544,"rameters are usually constrained. For example, in RHF the; spatial parts of the \(\alpha\) and \(\beta\) orbitals are the same. In; UHF, the orbital coefficients are usually constrained to be real. A stability analysis; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson algorithms. We will first describe; options common to both algorithms. To request a stability analysis at the end of the SCF,; set the keyword STABILITY_ANALYSIS. Value CHECK only computes the electronic; Hessian eigenvalue and checks if an actual SCF minimum has been found, while value FOLLOW; rotates the converged orbitals along the lowest eigenvector, then invokes the SCF; procedure again to lower the energy. In case the minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want t",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:29451,Energy Efficiency,energy,energy,29451,"the lowest eigenvector, then invokes the SCF; procedure again to lower the energy. In case the minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Inte",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:30143,Energy Efficiency,efficient,efficient,30143,"ation; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FO",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:30830,Energy Efficiency,adapt,adapt,30830,"ossible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the most pertinent for stability analysis, see documentation for the CPHF; module for a complete list.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger tha",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:34845,Energy Efficiency,charge,charge,34845,"Ps have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm an",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:34925,Energy Efficiency,charge,charge,34925,"ntact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TY",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:35646,Energy Efficiency,reduce,reduced,35646,"XTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, to",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:36011,Energy Efficiency,energy,energy,36011,"s the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONV",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:36086,Energy Efficiency,energy,energy,36086,"s may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:36337,Energy Efficiency,energy,energy,36337,"of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is define",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:37791,Energy Efficiency,power,powerful,37791,"the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless converge",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:39218,Energy Efficiency,energy,energy,39218,"ber of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; Effective core potentials (ECPs); External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:4236,Integrability,contract,contracted,4236,"gence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:7004,Integrability,depend,depends,7004," C_{\nu i}^{\alpha},\]; and \(F\) is the Fock matrix, which is the effective one-body potential at; the current value of the density,. \[F_{\mu\nu}^{\alpha} = H_{\mu\nu}; + \underbrace{\left(D_{\lambda\sigma}^{\alpha} + D_{\lambda\sigma}^{\beta}\right); (\mu\nu|\lambda\sigma)}_{J}; + \underbrace{D_{\lambda\sigma}^{\alpha} (\mu\lambda|\sigma\nu)}_{K^{\alpha}}\]; Here the tensor \((\mu\nu|\lambda\sigma)\) is an AO Electron-Repulsion; Integral (ERI) in chemists’ notation,. \[(\mu\nu|\lambda\sigma) = \iint_{\mathbb{R}^6}; \phi_{\mu} (\vec r_1); \phi_{\nu} (\vec r_1); \frac{1}{r_{12}}; \phi_{\lambda} (\vec r_2); \phi_{\sigma} (\vec r_2); \ \mathrm{d}^3 r_1; \ \mathrm{d}^3 r_2.\]; The MO coefficients are found as the generalized eigenvectors of the Fock Matrix,. \[F^\alpha C^\alpha = S C^\alpha \epsilon^\alpha\]; The eigenvalues \(\epsilon\) are the orbital energies, and the metric matrix; \(S\) is the AO-basis overlap matrix. \[S_{\mu\nu} = (\mu | \nu )\]; Note that the Fock Matrix depends on the density (both alpha and beta), and; therefore the orbitals. Because of this, SCF is a nonlinear procedure, which; terminates when the generating orbitals are self-consistent with the Fock matrix; they generate.; The formation of the Coulomb matrix \(J\) and the exchange matrix; \(K^{\alpha}\) dominate the computational effort of the SCF procedure. For; very large systems, diagonalization of the Fock matrix can also present a; significant hurdle. Minimal Input¶; Minimal input for a Hartree–Fock computation is a molecule block, basis set; option, and a call to energy('scf'):; 1; 2; 3; 4; 5; 6; 7molecule {; He; }. set basis sto-3g. energy('scf'). This will run a Restricted Hartree–Fock (RHF) on neutral singlet Helium in; \(D_{2h}\) spatial symmetry with a minimal STO-3G basis, 1.0E-6; energy and density convergence criteria (since single-point, see; SCF Convergence & Algorithm), a DF ERI algorithm, symmetric; orthogonalization, DIIS, and a core Hamiltonian guess. For more; informat",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:23575,Integrability,rout,routines,23575,"s. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:12531,Modifiability,enhance,enhanced,12531,"hf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems or for; systems where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:13339,Modifiability,adapt,adapted,13339,"ms where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs per irrep may be slightly smaller than the number of USOs per irrep.; A contrived example demonstrating OSOs/MOs vs. AOs with symmetry is shown; below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; symmetry c2 # Two irreps is easier to comprehend; }. set {; s_tolerance 0.0001 # Set an unreasonably tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; ----------------------------------",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:14822,Modifiability,adapt,adapted,14822," tight; # tolerance to force canonical; basis aug-cc-pv5z # This diffuse basis will have; # small-ish eigenvalues for even H2O; print 3; }. energy('scf'). Output:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16; 17; 18==> Pre-Iterations <==. -------------------------------------------------------; Irrep Nso Nmo Nalpha Nbeta Ndocc Nsocc; -------------------------------------------------------; A 145 145 0 0 0 0; B 142 142 0 0 0 0; -------------------------------------------------------; Total 287 287 5 5 5 0; -------------------------------------------------------. ... Minimum eigenvalue in the overlap matrix is 1.6888063568E-05.; Using Canonical Orthogonalization with cutoff of 1.0000000000E-04.; Irrep 0, 1 of 145 possible MOs eliminated.; Irrep 1, 2 of 142 possible MOs eliminated.; Overall, 3 of 287 possible MOs eliminated. In this example, there are 287 AO basis functions after spherical harmonics are; applied. These are used to produce 287 symmetry adapted USOs, 145 of which are; assigned to irrep A, and 142 of which are assigned to irrep B. Within irrep A,; 144 OSOs fall above the eigenvalue cutoff, and within irrep B 140 OSOs fall; above the eigenvalue cutoff. In total, 284 molecular orbitals are chosen from; 287 AOs/USOs. Initial Guess¶; In each step of the SCF procedure, a new Fock or Kohn–Sham potential is built; according to the previous density, following which the potential is diagonalized; to produce new molecular orbitals, from which a new density is computed. This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial or",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:22662,Modifiability,config,configurations,22662,"and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:23894,Modifiability,extend,extended,23894,"lowing two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. Fo",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:30830,Modifiability,adapt,adapt,30830,"ossible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for Direct Inversion, the Davidson algorithm can automatically; adapt FOLLOW_STEP_SCALE to find a new SCF minimum. If MAX_ATTEMPTS > 1, additional attempts; will automatically increment FOLLOW_STEP_SCALE by 0.2 every time the SCF falls back to the previously; found unstable minimum. The increment can be adjusted by setting FOLLOW_STEP_INCREMENT.; The default value is 0.2; adjust if needed to try different values of FOLLOW_STEP_SCALE in a single computation.; The Davidson solver for the eigenvalues is controlled through several keywords. In the following; we only report the most pertinent for stability analysis, see documentation for the CPHF; module for a complete list.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger tha",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:37778,Modifiability,flexible,flexible,37778,"the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless converge",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:3713,Performance,perform,performed,3713,". Within the DF portion; of the computation, the zeroth-iteration uses a non-idempotent density matrix; obtained from the SAD guess, so the energy is unphysically low. However, the; first true iteration is quite close to the final DF energy, highlighting the; efficiency of the SAD guess. Pulay’s DIIS procedure is then used to accelerate; SCF convergence, with the DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:4056,Performance,optimiz,optimized,4056,"he DF phase reaching convergence in eight true; iterations. When used together, SAD and DIIS are usually sufficient to converge; the SCF for all but the most difficult systems. Additional convergence; techniques are available for more difficult cases, and are detailed below. At; this point, the code switches on the requested Direct integrals technology, which; requires only four full iterations to reach convergence, starting from the DF; guess. This hybrid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation a",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:9984,Performance,perform,performance,9984," If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree–Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree–Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; 1; 2; 3; 4molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; 1; 2h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4 and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in some methods, to obtain significant performance; gains. The point group of the molecule is inferred when reading the molecule; section, and may be overridden by the symmetry flag, as in:; 1; 2; 3; 4; 5molecule h {; 0 2; H; symmetry c1; }. or by the reset_point_group Python molecule attribute:; 1h.reset_point_group('c2v'). During the SCF procedure, the occupation of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain probl",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:11296,Performance,perform,perform,11296,"n of orbitals is typically determined by; the Aufbau principal across all spatial symmetries. This may result in the; occupation shifting between iterations. If the occupations are known a priori,; they may be clamped throughout the procedure by using the DOCC and; SOCC options. For instance, all good quantum chemists know that; \(C_{2v}\) water is; actually,:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; docc [3, 0, 1, 1] # 1A1 2A1 1B1 3A1 1B2; basis cc-pvdz; }. energy('scf'). Broken Symmetry¶; For certain problems, such diradicals, allowing the spin-up and spin-down; orbitals to differ in closed-shell computations can be advantageous;; this is known as symmetry breaking. The resulting unrestricted wavefunction; will often provide superior energetics, due to the increased flexibility,; but it will suffer non-physical spin contamination from higher multiplicity states.; A convenient approach to break symmetry is to perform a UHF or UKS calculation; with the guess HOMO and LUMO orbitals mixed.; Mixing of the guess orbitals can be requested by setting the GUESS_MIX; keyword to true:; 1; 2; 3set reference uhf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:16383,Performance,optimiz,optimizations,16383,". This; procedure is continued until either convergence is reached or a preset maximum; number of iterations is exceeded. Convergence is determined by both change in; energy and root-mean-square change in density matrix values, which must be below; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geomet",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:16635,Performance,perform,performed,16635,"ow; the user-specified E_CONVERGENCE and D_CONVERGENCE, respectively.; The maximum number of iterations is specified by the MAXITER option. It; should be noted that SCF is a chaotic process, and, as such, often requires; careful selection of initial orbitals and damping during iterations to ensure; convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BA",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:17356,Performance,optimiz,optimizations,17356," default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:17745,Performance,perform,performing,17745," [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14molecule h2o {; 0 1; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:18936,Performance,optimiz,optimized,18936,".0 2 104.5; }. set {; basis cc-pvtz; basis_guess 3-21G; guess sad; }. energy('scf'). Convergence Stabilization¶; With regard to convergence stabilization, Pulay’s Direct Inversion of the; Iterative Subspace (DIIS) extrapolation, Gill’s Maximum Overlap Method (MOM),; and damping are all implemented. A summary of each is presented below,. DIIS [On by Default]; DIIS uses previous iterates of the Fock Matrix together; with an error criterion based on the orbital gradient to produce an informed; estimate of the next Fock Matrix. DIIS is almost always necessary to converge; the SCF procedure and is therefore turned on by default. In rare cases, the; DIIS algorithm may need to be modified or turned off altogether, which may be; accomplished via options.; MOM [Off by Default]; MOM was developed to combat a particular class of convergence failure:; occupation flipping. In some cases, midway though the SCF procedure, a partially; converged orbital which should be occupied in the fully-optimized SCF solution; has a slightly higher orbital eigenvalue than some other orbital which should be; destined to be a virtual orbital. This results in the virtual orbital being; spuriously occupied for one or more iterations. Sometimes this resolves itself; without help, other times the occupation flips back and forth between two, four,; or more orbitals. This is typically visible in the output as a non-converging; SCF which eventually settles down to steady oscillation between two (or more); different total energies. This behavior can be ameliorated by choosing occupied; orbitals by “shape” instead of by orbital eigenvalue, i.e., by choosing the set; of new orbitals which looks most like some previously known “good” set. The; “good” set is typically the occupied orbitals from one of the oscillating; iterations with the lowest total energy. For an oscillating system where the; lowest total energy occurs on iterations \(N,N+2,\ldots\), invoking; MOM_START N can often rescue the convergence of",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:20975,Performance,bottleneck,bottleneck,20975,"t with DIIS, though care should be taken to not turn MOM on; until the oscillatory behavior begins.; Damping [Off by Default]; In some cases, a static mixing of Fock Matrices from adjacent iterations can; quench oscillations. This mixing, known as “damping” can be activated by setting; the DAMPING_PERCENTAGE keyword to a nonzero percent.; SOSCF [Off by Default]; See Second-order Convergence. ERI Algorithms¶; The key difficulty in the SCF procedure is treatment of the four-index ERI; contributions to the Fock Matrix. A number of algorithms are available in; PSI4 for these terms. The algorithm is selected by the SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is re",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:21579,Performance,optimiz,optimized,21579,"SCF_TYPE; keyword, which may be one of the following. PK [Default]; An out-of-core, presorted algorithm using exact ERIs. Quite fast for a; zero-error algorithm if enough memory is available. Integrals are; generated only once, and symmetry is utilized to reduce number of; integrals.; OUT_OF_CORE; An out-of-core, unsorted algorithm using exact ERIs. Overcomes the; memory bottleneck of the current PK algorithm. Integrals are generated; only once, and symmetry is utilized to reduce number of integrals.; DIRECT; A threaded, sieved, integral-direct algorithm, with full permutational; symmetry. This algorithm is brand new, but seems to be reasonably fast; up to 1500 basis functions, uses zero disk (if DF pre-iterations are; turned off), and can obtain significant; speedups with negligible error loss if INTS_TOLERANCE; is set to 1.0E-8 or so.; DF [Default]; A density-fitted algorithm designed for computations with thousands of; basis functions. This algorithm is highly optimized, and is threaded; with a mixture of parallel BLAS and OpenMP. Note that this algorithm; should use the -JKFIT series of auxiliary bases, not the -RI or; -MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, bu",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:22891,Performance,optimiz,optimized,22891,"d unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the IN",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:23167,Performance,optimiz,optimized,23167,"acy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defa",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:23218,Performance,perform,performance,23218,"acy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defa",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:23325,Performance,perform,performance,23325," similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:28645,Performance,tune,tune,28645,"s; can check whether a lower SCF solution exists while respecting the constraints of the original; solution; this is an internal instability. If one or more constraints have to be relaxed to reach; a lower-energy solution, there is an external instability. In PSI4, the only external instability; that can be checked at present is the RHF \(\rightarrow\) UHF one.; Currently, two algorithms exist in PSI4 for stability analysis: the original; Direct Inversion and the newly implemented Davidson algorithms. We will first describe; options common to both algorithms. To request a stability analysis at the end of the SCF,; set the keyword STABILITY_ANALYSIS. Value CHECK only computes the electronic; Hessian eigenvalue and checks if an actual SCF minimum has been found, while value FOLLOW; rotates the converged orbitals along the lowest eigenvector, then invokes the SCF; procedure again to lower the energy. In case the minimization does not succeed; or ends up on the same unstable solution, you can tune the scale factor for the orbital; rotation through the keyword FOLLOW_STEP_SCALE.; The rotation angle is \(\frac{\pi}{2}\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:34154,Performance,perform,perform,34154,"alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:36029,Performance,optimiz,optimization,36029," in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CO",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:36108,Performance,optimiz,optimization,36108,"extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an; example, to add a dipole field of magnitude 0.05 a.u. in the y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginnin",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:36351,Performance,optimiz,optimization,36351,"he y direction and; 0.1 a.u. in the z direction, we can use the following keywords:; 1; 2; 3set perturb_h true; set perturb_with dipole; set perturb_dipole [ 0, 0.05, 0.1 ]. Note that if any specified fields do not fall along a symmetry axis, the; symmetry of the calculation should be reduced accordingly; if in doubt run the; calculation in C1 symmetry. For examples of SCF and MP2 calculations in an; external field, see scf7 and dfmp2-grad5. Convergence and Algorithm Defaults¶. SCF algorithm and convergence criteria defaults by calculation type [1]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE; D_CONVERGENCE; SCF_TYPE. SCF of HF or DFT; energy; 6; 6; DF. optimization; 8; 8. frequency [7]; 8; 8. SCF of post-HF; energy; 8; 8; PK [3]. optimization; 10; 10. frequency [7]; 10; 10. CC property [2]; 10; 10. Post-SCF convergence criteria defaults by calculation type [4]¶. Ab Initio Method; Calculation Type; E_CONVERGENCE [5]; R_CONVERGENCE [6]. post-HF of post-HF; energy; 6;  . optimization; 8;  . frequency [7]; 8;  . CC property [2]; 8;  . Footnotes. [1]Note that this table applies only the SCF module,; not to the final convergence criteria for post-HF methods or to methods; that use an alternate starting point, like MCSCF. SAPT computations, too,; set tighter values. [2](1, 2) This applies to properties computed through the property() function. [3]Post-HF methods that do not rely upon the usual 4-index AO integrals use a; density-fitted SCF reference. That is, for DF-MP2 and SAPT, the default SCF_TYPE is DF. [4]Note that this table applies to the final convergence criteria for; all the post-SCF modules that define a E_CONVERGENCE keyword. [5]The E_CONVERGENCE keyword is implemented for most post-SCF modules.; See a list beginning at E_CONVERGENCE. [6]The R_CONVERGENCE keyword places a convergence check on an internal; residual error measure and is implemented for several post-SCF; modules (see list beginning at R_CONVERGENCE). It is defined; according to the quantum",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:38331,Performance,perform,performing,38331,"nning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theor",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:38796,Performance,optimiz,optimized,38796,"ossible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theory; Minimal Input; Spin/Symmetry Treatment; Broken Symmetry; Orthogonalization; Initial Guess; Convergence Stabilization; ERI Algorithms; Second-order Convergence; Stability Analysis; Effective core potentials (ECPs); External potentials and QM/MM; Convergence and Algorithm Defaults; Recommendations. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Theoretical Methods: SCF to FCI. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created u",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:8977,Safety,avoid,avoid,8977,"zation, DIIS, and a core Hamiltonian guess. For more; information on any of these options, see the relevant section below. Spin/Symmetry Treatment¶; PSI4 implements the most popular spin specializations of Hartree–Fock; theory, including:. Restricted Hartree–Fock (RHF) [Default]; Appropriate only for closed-shell singlet systems, but twice as efficient; as the other flavors, as the alpha and beta densities are constrained to be; identical.; Unrestricted Hartree–Fock (UHF); Appropriate for most open-shell systems and fairly easy to converge.; The spatial parts of the alpha and beta orbitals are fully independent of each; other, which allows a considerable amount of flexibility in the wavefunction.; However, this flexibility comes at the cost of spin symmetry; UHF wavefunctions; need not be eigenfunctions of the \(\hat S^2\) operator. The deviation of; this operator from its expectation value is printed on the output file. If the; deviation is greater than a few hundredths, it is advisable to switch to a; ROHF to avoid this “spin-contamination” problem.; Restricted Open-Shell Hartree–Fock (ROHF); Appropriate for open-shell systems where spin-contamination is problem.; Sometimes more difficult to converge, and assumes uniformly positive spin; polarization (the alpha and beta doubly-occupied orbitals are identical).; Constrained Unrestricted Hartree–Fock (CUHF); A variant of ROHF that starts from a UHF ansatz and is therefore often; easier to converge. These can be invoked by the REFERENCE keyword, which defaults to RHF.; The charge and multiplicity may either be specified in the molecule definition:; 1; 2; 3; 4molecule h {; 0 2 # Neutral doublet; H; }. or, dynamically, by setting the relevant attributes in the Python molecule; object:; 1; 2h.set_molecular_charge(0); h.set_multiplicity(2). Abelian spatial symmetry is fully supported in PSI4 and can be used to; obtain physical interpretation of the molecular orbitals, to assist in difficult; convergence cases, and, in som",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:12382,Safety,avoid,avoided,12382,"hf; set guess_mix true; energy('scf'). Orthogonalization¶; One of the first steps in the SCF procedure is the determination of an; orthogonal basis (known as the OSO basis) from the atomic orbital basis (known; as the AO basis). The Molecular Orbital basis (MO basis) is then built as a; particular unitary transformation of the OSO basis. In PSI4, the; determination of the OSO basis is accomplished via either symmetric or canonical; orthogonalization. Symmetric orthogonalization uses the symmetric inverse square; root of the overlap matrix for the orthogonalization matrix. Use of symmetric; orthogonalization always yields the same number of OSO functions (and thereby; MOs) as AO functions. However, this may lead to numerical problems if the; overlap matrix has small eigenvalues, which may occur for large systems or for; systems where diffuse basis sets are used. This problem may be avoided by using; canonical orthogonalization, in which an asymmetric inverse square root of the; overlap matrix is formed, with numerical stability enhanced by the elimination; of eigenvectors corresponding to very small eigenvalues. As a few combinations; of AO basis functions may be discarded, the number of canonical-orthogonalized; OSOs and MOs may be slightly smaller than the number of AOs. In PSI4,; symmetric orthogonalization is used by default, unless the smallest overlap; eigenvalue falls below the user-supplied double option S_TOLERANCE, which; defaults to 1E-7. If the smallest eigenvalue is below this cutoff, canonical; orthogonalization is forced, and all eigenvectors corresponding to eigenvalues; below the cutoff are eliminated. Use of canonical orthogonalization can be; forced by setting the S_ORTHOGONALIZATION option to CANONICAL. Note; that in practice, the MOs and OSOs are built separately within each irrep from; the symmetry-adapted combinations of AOs known as Unique Symmetry Orbitals; (USOs). For canonical orthogonalization, this implies that the number of MOs; and OSOs ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:22702,Safety,detect,detect,22702,"MP2FIT bases. The default guess for auxiliary basis set should work; for most bases, otherwise the DF_BASIS_SCF keyword can; be used to manually specify the auxiliary basis. This algorithm is; preferred unless either absolute accuracy is required; [\(\gtrsim\)CCSD(T)] or a -JKFIT auxiliary basis is unavailable; for the orbital basis/atoms involved.; CD; A threaded algorithm using approximate ERIs obtained by Cholesky; decomposition of the ERI tensor. The accuracy of the Cholesky; decomposition is controlled by the keyword CHOLESKY_TOLERANCE.; This algorithm is similar to the DF algorithm, but it is not suitable; for gradient computations. The algorithm to obtain the Cholesky; vectors is not designed for computations with thousands of basis; functions. In some cases the above algorithms have multiple implementations that return; the same result, but are optimal under different molecules sizes and hardware; configurations. Psi4 will automatically detect the correct algorithm to run and; only expert users should manually select the below implementations. The DF; algorithm has the following two implementations. MEM_DF; A DF algorithm optimized around memory layout and is optimal as long as; there is sufficient memory to hold the three-index DF tensors in memory. This; algorithm may be faster for builds that require disk if SSDs are used.; DISK_DF; A DF algorithm (the default DF algorithm before Psi4 1.2) optimized to; minimize Disk IO by sacrificing some performance due to memory layout. Note that these algorithms have both in-memory and on-disk options, but; performance penalties up to a factor of 2.5 can be found if the incorrect; algorithm is chosen. It is therefore highly recommended that the keyword “DF”; be selected in all cases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:24415,Safety,avoid,avoid,24415,"ases so that the correct implementation can be selected by; PSI4’s internal routines. Expert users can manually switch between MEM_DF and; DISK_DF; however, they may find documented exceptions during use as several; post SCF algorithms require a specific implementation.; For some of these algorithms, Schwarz and/or density sieving can be used to; identify negligible integral contributions in extended systems. To activate; sieving, set the INTS_TOLERANCE keyword to your desired cutoff; (1.0E-12 is recommended for most applications).; We have added the automatic capability to use the extremely fast DF; code for intermediate convergence of the orbitals, for SCF_TYPE; DIRECT. At the moment, the code defaults to cc-pVDZ-JKFIT as the; auxiliary basis, unless the user specifies DF_BASIS_SCF manually. For; some atoms, cc-pVDZ-JKFIT is not defined, so a very large fitting basis of last; resort will be used.; To avoid this, either set DF_BASIS_SCF to an auxiliary; basis set defined for all atoms in the system, or set DF_SCF_GUESS; to false, which disables this acceleration entirely. Second-order Convergence¶; Second-order convergence takes into account both the gradient and Hessian to; take a full Newton step with respect to the orbital parameters. This results in; quadratic convergence with respect to density for SCF methods. For cases where; normal acceleration methods either fail or take many iterations to converge,; second-order can reduce the total time to solution.; Solving second-order (SO) methods exactly would require an inversion of the; orbital Hessian (an expensive \(\mathbb{N}^6\) operation); however, these; equations are normally solved iteratively where each iteration costs the same; as a normal Fock build (\(\mathbb{N}^4\)). The overall SOSCF operation is; thus broken down into micro- and macroiterations where the microiterations; refer to solving the SOSCF equations and macroiterations are the construction; of a new Fock matrix based on the orbitals from a SO",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:29785,Safety,avoid,avoided,29785,"\mbox{ } \cdot\) (FOLLOW_STEP_SCALE). The default value of; 0.5 usually provides a good guess, and modification is only recommended in difficult cases.; The default behavior for the stability code is to stop after trying to reoptimize the orbitals once; if the instability still exists. For more attempts, set MAX_ATTEMPTS;; the default value of 1 is recommended. In case the SCF ends up in the same minimum, modification; of FOLLOW_STEP_SCALE is recommended over increasing MAX_ATTEMPTS. Note; Setting the option STABILITY_ANALYSIS to FOLLOW is only avalible for UHF. When using; RHF and ROHF instabilities can be checked, but not followed. If you want to attempt to find a lower energy solution; you should re-run the calculation with REFERENCE set to UHF. The main algorithm available in PSI4 is the Direct Inversion algorithm. It can only; work with SCF_TYPE PK, and it explicitly builds the full electronic Hessian; matrix before explicitly inverting it. As such, this algorithm is very slow and it should; be avoided whenever possible. Direct Inversion is automatically invoked if the newer algorithm; is not available.; The Davidson algorithm for stability analysis was implemented recently.; Only the lowest eigenvalues of the electronic Hessian are computed, and Hessian-vector; products are computed instead of the full Hessian. This algorithm is thus; much more efficient than the Direct Inversion, but at present, it is only available for UHF \(\rightarrow\) UHF stability; analysis. The capabilities of both algorithms are summarized below:. Stability analysis methods available in PSI4¶. Algorithm; REFERENCE; Stability checked; STABILITY_ANALYSIS; SCF_TYPE. Direct Inversion; RHF; Internal, External (\(\rightarrow\) UHF); CHECK; PK only. ROHF; Internal; CHECK; PK only. Davidson; UHF; Internal; CHECK or FOLLOW; Anything. The best algorithm is automatically selected, i.e. Davidson for UHF \(\rightarrow\) UHF and Direct Inversion otherwise.; In addition to the options available for ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:32482,Safety,avoid,avoid,32482,"ist.; Some default values were modified for the stability analysis code, in that case they are; explicitly indicated here. SOLVER_MAXITER: maximum number of iterations; SOLVER_CONVERGENCE: eigenvector convergence threshold; SOLVER_N_ROOT: Solve for N eigenvectors in each irreducible representation; SOLVER_N_GUESS: Use N guess vectors, this needs to be larger than the number of roots so that the lowest ones can be captured reliably. Default within this context: 3; SOLVER_MIN_SUBSPACE: Minimum size of the subspace when collapsing.; SOLVER_MAX_SUBSPACE: Maximum size of the subspace. Default within this context: 12. In case convergence problems are encountered during the Davidson procedure,; it is recommended to first increase SOLVER_MAX_SUBSPACE, especially if you solve; for a large number of roots. This will result in a higher computational cost of each iteration, but should; make the solver better behaved. However, note that SOLVER_MAX_SUBSPACE should never be larger than; the full subspace minus the number of desired roots to avoid adding artificial zero eigenvalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenvalue, try increasing SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of c",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:33317,Safety,detect,detected,33317,"ation, but should; make the solver better behaved. However, note that SOLVER_MAX_SUBSPACE should never be larger than; the full subspace minus the number of desired roots to avoid adding artificial zero eigenvalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenvalue, try increasing SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:33875,Testability,test,tested,33875,"otentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordin",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:34272,Testability,test,test,34272,"automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implementation of EFP for accurate QM/MM; computations, PSI4 can perform more rudimentary QM/MM procedures via the; EXTERN keyword. The following snippet, extracted from the; extern1 test case, demonstrates its use for a TIP3P external potential:; 1; 2; 3; 4; 5Chrgfield = QMMM(); Chrgfield.extern.addCharge(-0.834, 1.649232019048, 0.0, -2.356023604706); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -3.799961446760); Chrgfield.extern.addCharge( 0.417, 0.544757019107, 0.0, -0.912085762652); psi4.set_global_option_python('EXTERN', Chrgfield.extern). First a QMMM object is created, then three separate particles are added to this; object before the SCF code is told about its existence on the last line. The; calls to addCharge take the atomic charge, x coordinate, y coordinate, and; z coordinate in that order. The atomic charge is specified in atomic units,; and the coordinates always use the same units as the geometry specification in; the regular QM region. Additional MM molecules may be specified by adding; extra calls to addCharge to describe the full MM region.; To run a computation in a constant dipole field, the PERTURB_H,; PERTURB_WITH and PERTURB_DIPOLE keywords can be used. As an",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:4489,Usability,simpl,simplest,4489,"brid DF/Direct procedure can significantly accelerate SCF; computations requiring exact integrals.; After the iterations are completed, a number of one-electron properties are; printed, and some bookkeeping is performed to set up possible correlated; computations. Additional one-electron properties are available by increasing the; PRINT option. Also printed are the occupied and virtual orbital energies,; which are useful in elucidating the stability and reactivity of the system. Theory¶; The objective of Hartree–Fock (HF) Theory is to produce the optimized Molecular; Orbitals (MOs) \(\{\psi_i\}\),. \[\psi_i(\vec x_1) = C_{\mu i} \phi_{\mu} (\vec x_1).\]; Here, \(\{\phi_{\mu}\}\) are the basis functions, which, in PSI4 are; contracted Cartesian Gaussian functions often referred to as Atomic Orbitals; (AOs). The matrix \(C_{\mu i}\) contains the MO coefficients, which are the; constrained variational parameters in Hartree–Fock. The molecular orbitals are; used to build the simplest possible antisymmetric wavefunction, a single Slater; determinant,. \[\begin{split}| \Psi_0 \rangle =; \frac{1}{\sqrt{N!}} \left | \begin{array}{cccc}; \psi_1 (\vec x_1) & \psi_2(\vec x_1) & \ldots & \psi_N (\vec x_1) \\; \psi_1 (\vec x_2) & \psi_2(\vec x_2) & \ldots & \psi_N (\vec x_2) \\; \vdots & \vdots & \ddots & \vdots \\; \psi_1 (\vec x_N) & \psi_2(\vec x_N) & \ldots & \psi_N (\vec x_N) \\; \end{array}\right |\end{split}\]; This form for the Hartree–Fock wavefunction is actually entirely equivalent to; treating the electron correlation as a mean field repulsion in; \(\mathbb{R}^6\) instead of a more complicated effect in; \(\mathbb{R}^N\).; Considering the electronic Hamiltonian,. \[\hat H = \sum_{i} -\frac{1}{2} \nabla_i^2 + \sum_{i} \sum_{A} -; \frac{Z_A}{r_{iA}} + \sum_{i>j} \frac{1}{r_{ij}},\]; the Hartree–Fock energy is, by Slater’s rules,. \[E_{\mathrm{HF}} =; \langle \Psi_0 | \hat H | \Psi_0 \rangle; = \sum_{i} \langle i | \hat h | i \rangle; + \frac 1 2 \sum_{i,j} [ii|jj] - [ij",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:16881,Usability,simpl,simple,16881,"convergence. This is particularly likely for large systems, metallic systems,; multireference systems, open-shell systems, anions, and systems with diffuse; basis sets.; For initial orbital selection, several options are available. These include:. CORE; Diagonalization of the core Hamiltonian, removing even mean-field electron; repulsion. Simple, but often too far from the final solution for larger; systems. READ becomes the default for the second and later iterations; of geometry optimizations.; SAD [Default]; Superposition of Atomic Densities. Builds the initial density as the; spin-averaged sum of atomic UHF computations in the current basis. If an; open-shell system, uniform scaling of the spin-averaged density matrices is; performed. If orbitals are needed (e.g., in density fitting), a partial; Cholesky factorization of the density matrices is used. Often extremely; accurate, particularly for closed-shell systems.; GWH [Default]; Generalized Wolfsberg-Helmholtz, a simple Hückel-Theory-like method based on; the overlap and core Hamiltonian matrices. May be useful in open-shell systems.; READ; Read the previous orbitals from a checkpoint file, casting from one basis to; another if needed. Useful for starting anion computations from neutral; orbitals, or after small geometry changes. At present, casting from a; different molecular point group is not supported. This becomes the; default for the second and later iterations of geometry optimizations. These are all set by the GUESS keyword. Also, an automatic Python; procedure has been developed for converging the SCF in a small basis, and then; casting up to the true basis. This can be done by adding; BASIS_GUESS = SMALL_BASIS to the options list. We recommend the; 3-21G basis for the small basis due to its efficient mix of flexibility and; compactness. An example of performing an RHF solution of water by SAD guessing; in a 3-21G basis and then casting up to cc-pVTZ is shown below:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; ",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:33114,Usability,simpl,simply,33114,"untered during the Davidson procedure,; it is recommended to first increase SOLVER_MAX_SUBSPACE, especially if you solve; for a large number of roots. This will result in a higher computational cost of each iteration, but should; make the solver better behaved. However, note that SOLVER_MAX_SUBSPACE should never be larger than; the full subspace minus the number of desired roots to avoid adding artificial zero eigenvalues.; This may happen in minimal basis sets, especially with symmetry, but the code automatically adjusts; SOLVER_MAX_SUBSPACE if it is too large.; If the solver seems to converge on the wrong eigenvalue, try increasing SOLVER_N_GUESS.; Otherwise, if the solver is almost converged but reaches the maximum number of iterations, try increasing; SOLVER_MAXITER. Effective core potentials (ECPs)¶; PSI4 supports the use of effective core potentials to describe the; innermost electrons in heavy elements. If a basis set is designed to use an; effective core potential, the ECP definition should be simply placed alongside; the orbital basis set definition, c.f. Inputting effective core potentials (ECPs). All; information related to the definition and number of core electrons will; automatically be detected and no further input is required to use the; ECP-containing basis set. See scf-ecp and dfmp2-ecp; for examples of computations with ECP-containing basis sets. Warning; Analytic derivatives of ECPs are not yet available. The HF and DFT derivatives are implemented in a semi-numerical scheme, where numerical ECP gradients are added to analytic SCF gradients. Analytic gradients for (DF)MP2 are not yet available, but the standard numerical gradients will work correctly. Fully analytic gradients will be implemented soon. Warning; ECPs have not been tested with projected basis set guesses or with FI-SAPT calculations. If you require this functionality, please contact the developers on GitHub and/or the forum. External potentials and QM/MM¶; In addition to the implement",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/scf.html:38250,Usability,simpl,simple,38250,"nning at R_CONVERGENCE). It is defined; according to the quantum chemical method and so its default value is set; by each module individually. [7](1, 2, 3) For frequency computations by finite difference of energies,; convergence criteria are tightened further still to 10 for; E_CONVERGENCE and D_CONVERGENCE for SCF of HF or DFT, 11; for E_CONVERGENCE and D_CONVERGENCE for SCF of post-HF,; and 10 for E_CONVERGENCE for post-HF of post-HF. Recommendations¶; The SCF code is quite flexible and powerful.; We have tried as much as possible to keep the number of options to; a minimum and to allow all options to be used in the presence of all other; options. Below are some rough words of advice about using the SCF code for; practical calculations:. For GUESS, the SAD guess is usually your; friend, even for open-shell systems (at the very least, it gets the right; number of electrons, unlike some other programs). For instance, we have found; that a simple SAD guess is often as good as doing a full SCF in a 3-21G basis; and then performing a cast-up, at a fraction of the cost. However, SAD and; DOCC/SOCC arrays do not play very well together at the moment.; For wall time, DF may be a factor of ten or more faster than the exact; integral technologies available in PSI4.; Use DF unless you need absolute accuracy or do not; have a -JKFIT auxiliary set for your orbital basis/atom type. Then use; DIRECT.; Don’t mess with the DIIS convergence options unless convergence is a problem.; We have optimized the parameters for efficiency over a wide array of system; types.; Buy a developer a beer!. The “best-practice” input file for HF is:; 1; 2; 3; 4; 5; 6; 7; 8; 9; 10; 11; 12; 13; 14; 15; 16memory 1 GB # As much as you've got, the DF algorithm can use. molecule {; O; H 1 1.0; H 1 1.0 2 104.5; }. set {; basis cc-pvdz; scf_type df; guess sad; ints_tolerance 1.0E-10 # Even this is epically tight, 1.0E-8 is OK; }. energy('scf'). table of contents. HF: Hartree–Fock Theory; Introduction; Theor",MatchSource.WIKI,psi4manual/1.3.2/scf.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/scf.html
https://psicode.org/psi4manual/1.3.2/search-1.html:533,Deployability,update,updated,533,"﻿. Search. Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/search-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/search-1.html
https://psicode.org/psi4manual/1.3.2/search.html:533,Deployability,update,updated,533,"﻿. Search. Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. Search. Please activate JavaScript to enable the search; functionality.; . From here you can search these documents. Enter your search; words into the box below and click ""search"". Note that the search; function will automatically search for all of the words. Pages; containing fewer words won't appear in the result list.; . «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .  · ; 1.3.2;  · . PSI4. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/search.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/search.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:814,Availability,avail,available,814,"﻿. Interface to SIMINT by B. Pritchard. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upst",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:1041,Deployability,install,installed,1041," B. Pritchard. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simin",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:1139,Deployability,install,installed,1139,"erface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PAT",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:1225,Deployability,install,install,1225,"erface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PAT",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:1549,Deployability,install,installation,1549,"for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint in",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2255,Deployability,install,installation,2255,"eature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_si",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2397,Deployability,install,installation,2397,"etails. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. In",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:3705,Deployability,update,updated,3705,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:403,Integrability,interface,interfaced,403,"﻿. Interface to SIMINT by B. Pritchard. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upst",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:1389,Integrability,depend,dependent,1389," of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR —",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:1776,Integrability,depend,dependent,1776,"o be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling ba",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2206,Integrability,depend,dependencies,2206," (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABL",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:3347,Integrability,depend,dependencies,3347,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:1799,Modifiability,config,configure,1799,"as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx,",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2088,Modifiability,variab,variable,2088," (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABL",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2170,Modifiability,variab,variable,2170," (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABL",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2333,Modifiability,variab,variable,2333,"ild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dep",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2512,Modifiability,variab,variable,2512,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2628,Modifiability,variab,variable,2628,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2735,Modifiability,variab,variable,2735,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:3190,Modifiability,config,configdir,3190,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:3482,Modifiability,config,configure,3482,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:1362,Safety,detect,detect,1362," of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR —",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2566,Safety,detect,detecting,2566,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2646,Safety,detect,detecting,2646,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:2830,Safety,detect,detected,2830,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint-1.html:3239,Safety,detect,detectable,3239,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint-1.html
https://psicode.org/psi4manual/1.3.2/simint.html:814,Availability,avail,available,814,"﻿. Interface to SIMINT by B. Pritchard. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upst",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:1041,Deployability,install,installed,1041," B. Pritchard. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simin",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:1139,Deployability,install,installed,1139,"erface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PAT",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:1225,Deployability,install,install,1225,"erface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PAT",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:1549,Deployability,install,installation,1549,"for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint in",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2255,Deployability,install,installation,2255,"eature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_si",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2397,Deployability,install,installation,2397,"etails. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. In",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:3705,Deployability,update,updated,3705,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:403,Integrability,interface,interfaced,403,"﻿. Interface to SIMINT by B. Pritchard. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. Interface to SIMINT by B. Pritchard¶; Code author: Benjamin P. Pritchard; Section author: Lori A. Burns. These are the vectorized implementation of the Obara-Saika (OS) method of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upst",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:1389,Integrability,depend,dependent,1389," of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR —",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:1776,Integrability,depend,dependent,1776,"o be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling ba",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2206,Integrability,depend,dependencies,2206," (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABL",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:3347,Integrability,depend,dependencies,3347,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:1799,Modifiability,config,configure,1799,"as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx,",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2088,Modifiability,variab,variable,2088," (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABL",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2170,Modifiability,variab,variable,2170," (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABL",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2333,Modifiability,variab,variable,2333,"ild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dep",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2512,Modifiability,variab,variable,2512,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2628,Modifiability,variab,variable,2628,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2735,Modifiability,variab,variable,2735,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:3190,Modifiability,config,configdir,3190,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:3482,Modifiability,config,configure,3482,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:1362,Safety,detect,detect,1362," of; calculating electron repulsion integrals developed by B. Pritchard and; interfaced into libmints. Enabling simint and adding set; integral_package simint (do this in ~/.psi4rc for universal effect); runs libderiv from Libint for derivative integrals and simint for; non-derivative integrals. Note that present AM maximum is $$(gg|gg)$$. Warning; simint seems to be having some problems with Intel 2018 compilers. presently disabled in conda package. Installation¶; Binary. SIMINT is available as a conda package for Linux and macOS (and Windows, through the Ubuntu shell). The conda package is compiled to least-common-denominator, namely SSE instruction set. If using the PSI4 binary, simint has already been installed alongside. If using PSI4 built from source, and anaconda or miniconda has; already been installed (instructions at Quick Installation),; simint can be obtained through conda install simint -c psi4.; Then enable it as a feature with ENABLE_simint,; hint its location with CMAKE_PREFIX_PATH,; and rebuild PSI4 to detect simint and activate dependent code. Previous bullet had details. To build PSI4 from source and use; simint from conda without thinking, consult sec:condapsi4dev. To remove a conda installation, conda remove simint. Source. If using PSI4 built from source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR —",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2566,Safety,detect,detecting,2566,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2646,Safety,detect,detecting,2646,"source and you want simint built from; from source also,; enable it as a feature with ENABLE_simint,; and let the build system fetch and build it and activate dependent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PS",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:2830,Safety,detect,detected,2830,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/simint.html:3239,Safety,detect,detectable,3239,"ndent code. How to configure simint for building Psi4¶; Role and Dependencies. Role — In PSI4, simint is a library that provides alternate; integrals.; Downstream Dependencies — PSI4 (\(\Leftarrow\) optional) simint; Upstream Dependencies — simint \(\Leftarrow\) None. CMake Variables. ENABLE_simint — CMake variable toggling whether PSI4 builds with simint; CMAKE_PREFIX_PATH — CMake list variable to specify where pre-built dependencies can be found. For simint, set to an installation directory containing include/simint/simint.h; simint_DIR — CMake variable to specify where pre-built simint can be found. Set to installation directory containing share/cmake/simint/simintConfig.cmake; CMAKE_DISABLE_FIND_PACKAGE_simint — CMake variable to force internal build of simint instead of detecting pre-built; CMAKE_INSIST_FIND_PACKAGE_simint — CMake variable to force detecting pre-built simint and not falling back on internal build; SIMINT_VECTOR — CMake variable for simint vectorization (i.e., scalar sse avx avxfma micavx512). Default is avx, not detected, so sse may be required for older chipsets. See http://www.bennyp.org/research/simint/README.txt for details. Examples. Build bundled. >>> cmake -DENABLE_simint=ON. Build without simint. >>> cmake. Link against pre-built. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/simint/root. >>> cmake -DENABLE_simint=ON -Dsimint_DIR=/path/to/simint/configdir. Build bundled despite pre-built being detectable. >>> cmake -DENABLE_simint=ON -DCMAKE_PREFIX_PATH=/path/to/unwanted/simint/root/and/wanted/other/dependencies/root -DCMAKE_DISABLE_FIND_PACKAGE_simint=ON. table of contents. Interface to SIMINT by B. Pritchard; Installation; How to configure simint for building Psi4. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Interfaces: Enhancing PSI4 Capabilities. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/simint.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/simint.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:514,Availability,avail,available,514,"﻿. Embarrassing Parallelism. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; ",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:1356,Availability,avail,available,1356,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:1156,Deployability,continuous,continuous,1156,"tion. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. mod",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:1238,Deployability,continuous,continuous,1238,"SI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 ",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:2269,Deployability,update,updated,2269,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:207,Integrability,wrap,wrappers,207,"﻿. Embarrassing Parallelism. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; ",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:1461,Performance,optimiz,optimize,1461,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:2047,Testability,test,tested,2047,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap-1.html:461,Usability,simpl,simply,461,"﻿. Embarrassing Parallelism. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; ",MatchSource.WIKI,psi4manual/1.3.2/sowreap-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap-1.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:514,Availability,avail,available,514,"﻿. Embarrassing Parallelism. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; ",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:1356,Availability,avail,available,1356,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:1156,Deployability,continuous,continuous,1156,"tion. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. mod",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:1238,Deployability,continuous,continuous,1238,"SI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 ",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:2269,Deployability,update,updated,2269,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:207,Integrability,wrap,wrappers,207,"﻿. Embarrassing Parallelism. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; ",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:1461,Performance,optimiz,optimize,1461,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:2047,Testability,test,tested,2047,"sithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; Function intercalls (e.g., db(opt())) are not tested with sow/reap procedures. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/sowreap.html:461,Usability,simpl,simply,461,"﻿. Embarrassing Parallelism. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Psithon Functions: Invoking a Calculation. Embarrassing Parallelism¶; Many of the tasks automated by Python wrappers consist of a number of; independent PSI4 calculations and are thus suited to an embarrassingly; parallel mode of operation. In Psithon, these have been dubbed sow/reap; procedures and have the following general structure. Prepare an input file, simply adding mode='sow' to the; argument list of an available Python function. Run this quick job to; produce input files for lengthier calculations.; According to the instructions in the output file of the above step,; run the generated input files in any order on any variety of computers; and architectures. This is the time-intensive portion of the; calculation.; The ‘sow’ stage also produces a master input file (with a; mode='reap' directive). When all the jobs in the above step are; completed, place their output files in the same location as the; master input, and run this last, quick job to collect the results. Sow/reap procedures are governed by the mode keyword, choices being; 'continuous', 'sow', and 'reap'. Only 'sow' is likely to; be used by the user, as 'continuous' is always the default, and; input files with 'reap' are autogenerated.; Embarrassingly parallel algorithm available at present for:; Database — database(); finite difference operation of Geometry Optimization — optimize() and gradient(); finite difference of energies of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(); finite difference of gradients of Harmonic Vibrational Analysis and Visualization of Normal Modes — frequency() and hessian(). Caution; Some features are not yet implemented. Buy a developer a coffee. Local options (e.g., set scf e_convergence 9) will not get transmitted to the child jobs.; Array options (e.g., set states_per_irrep [2, 1]) will not get transmitted to the child jobs.; ",MatchSource.WIKI,psi4manual/1.3.2/sowreap.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/sowreap.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:10579,Availability,checkpoint,checkpoint,10579," and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:39463,Availability,error,error,39463,"here four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of wa",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:5887,Deployability,install,install,5887,"vel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:6150,Deployability,update,update,6150,"unctional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7574,Deployability,update,update,7574,"gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12815,Deployability,update,update,12815,"with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:30647,Deployability,update,updated,30647,"epa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-g",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:33423,Deployability,update,update,33423,"+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 c",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:35641,Deployability,update,update,35641,"putations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:36664,Deployability,update,updated,36664,"d cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orb",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:38213,Deployability,update,update,38213," Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:42255,Deployability,update,updated,42255," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:1667,Energy Efficiency,energy,energy,1667,"LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. df",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:2082,Energy Efficiency,energy,energy,2082,"HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:2437,Energy Efficiency,energy,energy,2437,"f; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:2762,Energy Efficiency,energy,energy,2762,"P3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state de",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:3294,Energy Efficiency,energy,energy,3294,"utation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Fin",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:3449,Energy Efficiency,energy,energy,3449,"rgy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVD",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:3880,Energy Efficiency,energy,energy,3880,"nts for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computatio",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:3900,Energy Efficiency,energy,energy,3900,"olecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:4487,Energy Efficiency,energy,energy,4487,"n; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:4770,Energy Efficiency,energy,energy,4770,"ate described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least t",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:4890,Energy Efficiency,energy,energy,4890,"6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and execu",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:5962,Energy Efficiency,energy,energy,5962,"; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pV",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:6035,Energy Efficiency,charge,charge,6035,"ted states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:6051,Energy Efficiency,energy,energy,6051,"ted states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:6918,Energy Efficiency,energy,energy,6918,"Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional wit",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:6966,Energy Efficiency,energy,energy,6966,". sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O mol",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7059,Energy Efficiency,energy,energy,7059,"rgy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length g",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7217,Energy Efficiency,energy,energy,7217,"on. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7261,Energy Efficiency,energy,energy,7261," using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-p",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7440,Energy Efficiency,energy,energy,7440,"thylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7711,Energy Efficiency,energy,energy,7711," Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mo",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7968,Energy Efficiency,energy,energy,7968,"rgy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:8149,Energy Efficiency,energy,energy,8149," variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects th",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:8268,Energy Efficiency,energy,energy,8268,"or the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size an",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:9757,Energy Efficiency,energy,energy,9757,"ed then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:10298,Energy Efficiency,energy,energy,10298,"s the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:10503,Energy Efficiency,energy,energy,10503,"le field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values.",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:11581,Energy Efficiency,energy,energy,11581,"heckpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12275,Energy Efficiency,energy,energy,12275,"pled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-ali",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12632,Energy Efficiency,charge,charged,12632,"pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body ene",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:13018,Energy Efficiency,energy,energy,13018,"t is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and d",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:13325,Energy Efficiency,energy,energy,13325," NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set sy",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:13465,Energy Efficiency,energy,energy,13465,"aneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target ex",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:14260,Energy Efficiency,energy,energy,14260,"molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:14981,Energy Efficiency,energy,energy,14981,"ur. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the B",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:15003,Energy Efficiency,energy,energy,15003,"ater. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradi",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:15445,Energy Efficiency,energy,energy,15445,"cited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ en",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:15559,Energy Efficiency,energy,energy,15559,"=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tes",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:15957,Energy Efficiency,energy,energy,15957,"; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:16169,Energy Efficiency,energy,energy,16169,"avors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ ener",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:16456,Energy Efficiency,energy,energy,16456,"d water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:16521,Energy Efficiency,energy,energy,16521,"to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:16854,Energy Efficiency,energy,energy,16854,"Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:17166,Energy Efficiency,energy,energy,17166,"DZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:17694,Energy Efficiency,energy,energy,17694,"is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ opt",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:17813,Energy Efficiency,energy,energy-large,17813,"that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-correc",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:17914,Energy Efficiency,energy,energy,17914,"y. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:18607,Energy Efficiency,energy,energy,18607,"ga optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19111,Energy Efficiency,energy,energy,19111," ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serve",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19610,Energy Efficiency,energy,energy,19610,"-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19811,Energy Efficiency,energy,energy,19811," Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19954,Energy Efficiency,energy,energy,19954,"ith n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane.",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:20469,Energy Efficiency,energy,energy,20469,"tic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) a",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:20584,Energy Efficiency,energy,energy,20584,"-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:20803,Energy Efficiency,energy,energy,20803," HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note t",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:21195,Energy Efficiency,energy,energy,21195,"geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient f",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:21523,Energy Efficiency,energy,energy,21523,"ci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, usin",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:22288,Energy Efficiency,energy,energy,22288,"both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:22338,Energy Efficiency,energy,energy,22338,"nual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:22416,Energy Efficiency,energy,energy,22416,"e MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for di",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:22487,Energy Efficiency,energy,energy,22487,"SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluate",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:22893,Energy Efficiency,energy,energy,22893,"entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ o",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:22943,Energy Efficiency,energy,energy,22943,"e latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. c",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:23016,Energy Efficiency,energy,energy,23016,"s H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fue",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:23138,Energy Efficiency,energy,energy,23138,"5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:24058,Energy Efficiency,energy,energy,24058,"e NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowes",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:24139,Energy Efficiency,energy,energy,24139,"e occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25340,Energy Efficiency,energy,energy,25340,"42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gau",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25451,Energy Efficiency,energy,energy,25451,"irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water ge",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25573,Energy Efficiency,energy,energy,25573,"rsionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25633,Energy Efficiency,energy,energy,25633,"atch to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:27224,Energy Efficiency,energy,energy,27224,"tion of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:27279,Energy Efficiency,energy,energy,27279,"cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:27315,Energy Efficiency,energy,energy,27315,"cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:27409,Energy Efficiency,energy,energy,27409,"eometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:29012,Energy Efficiency,energy,energy,29012,"(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of en",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:29469,Energy Efficiency,energy,energy,29469,"p2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water,",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:29616,Energy Efficiency,energy,energy,29616,"tting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-ma",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:30452,Energy Efficiency,energy,energy,30452,"-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:30676,Energy Efficiency,energy,energy,30676,"epa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-g",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:30843,Energy Efficiency,energy,energy,30843,"are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOO",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:31567,Energy Efficiency,energy,energy,31567,"ms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field a",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:31818,Energy Efficiency,energy,energy,31818,"is \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T)",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:32055,Energy Efficiency,energy,energy,32055,"ctrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:32407,Energy Efficiency,energy,energy,32407,"d-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC upda",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:32800,Energy Efficiency,energy,energy,32800,"y. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:32883,Energy Efficiency,energy,energy,32883,"ternal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:32979,Energy Efficiency,energy,energy,32979,"d at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are rea",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:33560,Energy Efficiency,energy,energy,33560,"rformed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:33843,Energy Efficiency,energy,energy,33843," cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:34441,Energy Efficiency,energy,energy,34441,"s and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set s",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:34886,Energy Efficiency,energy,energy,34886,"adical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the us",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:35391,Energy Efficiency,energy,energy,35391,"d density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out.",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:35514,Energy Efficiency,energy,energy,35514,"s. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scan",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:35782,Energy Efficiency,energy,energy,35782,"2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:35971,Energy Efficiency,energy,energy,35971,"ion explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ ge",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:36697,Energy Efficiency,charge,charge,36697,"d cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orb",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:36910,Energy Efficiency,energy,energy,36910,"mputation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:38168,Energy Efficiency,energy,energy,38168,"cf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and R",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:38764,Energy Efficiency,energy,energy,38764,"he split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:39359,Energy Efficiency,energy,energy,39359,"oided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of ene",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:39581,Energy Efficiency,energy,energy,39581,"ence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water g",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:39810,Energy Efficiency,energy,energy,39810,"ing them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and the",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:41024,Energy Efficiency,energy,energy,41024," run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sa",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:41124,Energy Efficiency,energy,energy,41124,"g a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide men",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:41456,Energy Efficiency,energy,energy,41456," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:41562,Energy Efficiency,energy,energy,41562," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:41824,Energy Efficiency,energy,energy,41824," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:42089,Energy Efficiency,energy,energy,42089," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:579,Integrability,interface,interfaced,579,"﻿. Test Suite and Sample Inputs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequenc",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:15932,Integrability,wrap,wrapper,15932,"; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:18400,Integrability,depend,depend,18400,"thene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-C",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:18503,Integrability,depend,depend,18503,"-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:21072,Integrability,interface,interface,21072," doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax example",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:21089,Integrability,interface,interface,21089," doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax example",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25539,Integrability,interface,interface,25539,"the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:29657,Integrability,rout,routing,29657," basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the pot",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:30252,Integrability,depend,depend,30252,"o Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:30355,Integrability,depend,depend,30355,"v. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:38729,Integrability,wrap,wrappers,38729,"he split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:3649,Modifiability,variab,variables,3649,"-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custo",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:5855,Modifiability,plugin,plugins,5855,"vel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12149,Modifiability,variab,variables,12149,"y. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12232,Modifiability,variab,variables,12232," F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfom",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:21686,Modifiability,variab,variables,21686,"ations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RH",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:30628,Modifiability,variab,variables,30628,"epa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-g",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:1053,Performance,optimiz,optimizations,1053,"    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:1729,Performance,optimiz,optimization,1729,"UMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:1800,Performance,optimiz,optimization,1800,"uted are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:2988,Performance,optimiz,optimization,2988,"es frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gr",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:4341,Performance,perform,performed,4341,"ensity matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check f",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:6126,Performance,perform,performs,6126,"unctional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7534,Performance,perform,performs,7534,"gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:10103,Performance,perform,performing,10103,"objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:10669,Performance,optimiz,optimization,10669," Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane di",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:10737,Performance,optimiz,optimization,10737,"hyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test o",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12019,Performance,perform,performed,12019,"-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point.",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12401,Performance,perform,performs,12401,"ter Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interac",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12419,Performance,optimiz,optimization,12419,"ter Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interac",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12795,Performance,perform,performs,12795,"with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:13519,Performance,optimiz,optimization,13519,"irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy P",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:16594,Performance,optimiz,optimization,16594,"tting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:16672,Performance,optimiz,optimized,16672,"tting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:16942,Performance,optimiz,optimization,16942,"pper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO mol",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:17624,Performance,optimiz,optimization,17624,"bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:17977,Performance,optimiz,optimization,17977,"h dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:18693,Performance,optimiz,optimization,18693,"gy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM wa",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19198,Performance,optimiz,optimization,19198,"pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. df",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19439,Performance,optimiz,optimization,19439,"stup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19517,Performance,optimiz,optimization,19517,"nd on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19755,Performance,perform,performed,19755,"e point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h metha",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19891,Performance,optimiz,optimizations,19891,"em. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:22586,Performance,optimiz,optimized,22586,"SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluate",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:22731,Performance,optimiz,optimization,22731,"r they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:24858,Performance,optimiz,optimization,24858,"; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultane",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:24988,Performance,optimiz,optimized,24988,"SCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet catio",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25388,Performance,optimiz,optimization,25388," gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superpo",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:26659,Performance,perform,performed,26659,"-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:30728,Performance,perform,performed,30728,"epa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-g",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:31647,Performance,optimiz,optimizations,31647,"pdated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two stat",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:31919,Performance,optimiz,optimizations,31919,"is \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T)",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:32289,Performance,optimiz,optimization,32289,"grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the diffe",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:32530,Performance,perform,performed,32530,"8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:33389,Performance,perform,performs,33389,"+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 c",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:34332,Performance,optimiz,optimization,34332,"sing the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxid",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:35226,Performance,perform,performed,35226,". The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:35617,Performance,perform,performs,35617,"putations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:38189,Performance,perform,performs,38189," Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:38658,Performance,optimiz,optimization,38658,"rtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hyb",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:38754,Performance,optimiz,optimize,38754,"he split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:39301,Performance,optimiz,optimization,39301,"handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure.",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:40795,Performance,perform,performed,40795,"VDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and bro",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:7848,Safety,avoid,avoided,7848,"fferent algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF d",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:33701,Safety,avoid,avoided,33701,"states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in therm",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:38358,Safety,avoid,avoided,38358,"D[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for t",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:560,Security,access,accessible,560,"﻿. Test Suite and Sample Inputs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequenc",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:4354,Security,validat,validate,4354,"ensity matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check f",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19768,Security,validat,validate,19768,"e point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h metha",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:184,Testability,test,test,184,"﻿. Test Suite and Sample Inputs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequenc",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:224,Testability,test,tests,224,"﻿. Test Suite and Sample Inputs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequenc",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:1500,Testability,test,test,1500,"ctory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:2223,Testability,test,test,2223,"5)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, a",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:2947,Testability,test,test,2947,"is set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:3313,Testability,test,tests,3313,"utation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Fin",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:4087,Testability,test,test,4087,"intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Dou",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:4317,Testability,test,test,4317,"ensity matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check f",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:4648,Testability,test,test,4648,"bles of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, whi",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:5360,Testability,test,test,5360,"2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZV",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:5394,Testability,test,test,5394,"2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZV",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:8408,Testability,test,tested,8408,"O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (b",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:8994,Testability,test,test,8994,"CSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ grad",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:10097,Testability,test,test,10097,"objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:10223,Testability,test,tests,10223,"g bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:11150,Testability,test,test,11150," and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI varia",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:11214,Testability,test,test,11214,"is tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harv",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:11472,Testability,test,test,11472,"F gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and sim",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:11874,Testability,test,test,11874,"-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis.",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12005,Testability,test,test,12005,"-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point.",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12135,Testability,test,test,12135,"y. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12200,Testability,test,testing,12200," F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfom",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:12701,Testability,test,test,12701," run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeof",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:13848,Testability,test,tests,13848," orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:16540,Testability,test,tests,16540,"to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:17008,Testability,test,testing,17008,"Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:17442,Testability,test,test,17442,"cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrat",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19292,Testability,test,test,19292," that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:19731,Testability,test,test,19731,"e point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h metha",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:20047,Testability,test,tests,20047," (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE sch",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:20364,Testability,test,test,20364,"}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correctio",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:20643,Testability,test,test,20643,"calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatr",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:21099,Testability,test,testing,21099," doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax example",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:21406,Testability,test,test,21406,"ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:23740,Testability,test,test,23740," first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewic",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:23808,Testability,test,test,23808," first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewic",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:23856,Testability,test,test,23856,"tral bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geome",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:24456,Testability,test,test,24456,"es, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:24646,Testability,test,testing,24646,"t frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G**",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25523,Testability,test,test,25523,"the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25656,Testability,test,test,25656,"atch supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:25896,Testability,test,tested,25896,"nal frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-me",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:26066,Testability,test,testing,26066,"(A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fracti",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:26514,Testability,test,test,26514,"VDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 ele",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:26645,Testability,test,test,26645,"-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:26736,Testability,test,test,26736,"Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-3",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:28592,Testability,test,test,28592,"uction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Po",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:29270,Testability,test,testing,29270,"try from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:31336,Testability,test,test,31336,"omparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via an",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:31737,Testability,test,test,31737," using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Seco",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:32102,Testability,test,test,32102,"T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various b",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:33049,Testability,test,test,33049,"gy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G g",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:34177,Testability,test,test,34177,"ymmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. The",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:34512,Testability,test,tests,34512,"tual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:34948,Testability,test,tests,34948,"class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer in",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:36341,Testability,test,test,36341,"e. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Sc",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:39019,Testability,test,testing,39019,"ing the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:39505,Testability,test,test,39505,"-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-213",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:39677,Testability,test,test,39677,"molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user nee",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:40058,Testability,test,test,40058,"with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, t",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:40650,Testability,test,test,40650,"hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed wi",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:40781,Testability,test,test,40781,"VDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and bro",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:41751,Testability,benchmark,benchmark,41751," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:41776,Testability,benchmark,benchmarks,41776," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite-1.html:3495,Usability,simpl,simple,3495,"ver cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the c",MatchSource.WIKI,psi4manual/1.3.2/testsuite-1.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite-1.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:10579,Availability,checkpoint,checkpoint,10579," and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:39463,Availability,error,error,39463,"here four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of wa",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:5887,Deployability,install,install,5887,"vel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:6150,Deployability,update,update,6150,"unctional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7574,Deployability,update,update,7574,"gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12815,Deployability,update,update,12815,"with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:30647,Deployability,update,updated,30647,"epa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-g",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:33423,Deployability,update,update,33423,"+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 c",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:35641,Deployability,update,update,35641,"putations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:36664,Deployability,update,updated,36664,"d cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orb",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:38213,Deployability,update,update,38213," Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:42255,Deployability,update,updated,42255," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:1667,Energy Efficiency,energy,energy,1667,"LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. df",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:2082,Energy Efficiency,energy,energy,2082,"HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:2437,Energy Efficiency,energy,energy,2437,"f; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:2762,Energy Efficiency,energy,energy,2762,"P3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state de",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:3294,Energy Efficiency,energy,energy,3294,"utation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Fin",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:3449,Energy Efficiency,energy,energy,3449,"rgy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVD",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:3880,Energy Efficiency,energy,energy,3880,"nts for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computatio",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:3900,Energy Efficiency,energy,energy,3900,"olecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:4487,Energy Efficiency,energy,energy,4487,"n; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:4770,Energy Efficiency,energy,energy,4770,"ate described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least t",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:4890,Energy Efficiency,energy,energy,4890,"6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and execu",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:5962,Energy Efficiency,energy,energy,5962,"; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pV",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:6035,Energy Efficiency,charge,charge,6035,"ted states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:6051,Energy Efficiency,energy,energy,6051,"ted states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:6918,Energy Efficiency,energy,energy,6918,"Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional wit",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:6966,Energy Efficiency,energy,energy,6966,". sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O mol",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7059,Energy Efficiency,energy,energy,7059,"rgy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length g",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7217,Energy Efficiency,energy,energy,7217,"on. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7261,Energy Efficiency,energy,energy,7261," using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-p",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7440,Energy Efficiency,energy,energy,7440,"thylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7711,Energy Efficiency,energy,energy,7711," Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mo",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7968,Energy Efficiency,energy,energy,7968,"rgy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:8149,Energy Efficiency,energy,energy,8149," variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects th",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:8268,Energy Efficiency,energy,energy,8268,"or the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size an",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:9757,Energy Efficiency,energy,energy,9757,"ed then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:10298,Energy Efficiency,energy,energy,10298,"s the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:10503,Energy Efficiency,energy,energy,10503,"le field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values.",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:11581,Energy Efficiency,energy,energy,11581,"heckpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12275,Energy Efficiency,energy,energy,12275,"pled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-ali",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12632,Energy Efficiency,charge,charged,12632,"pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body ene",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:13018,Energy Efficiency,energy,energy,13018,"t is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and d",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:13325,Energy Efficiency,energy,energy,13325," NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set sy",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:13465,Energy Efficiency,energy,energy,13465,"aneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target ex",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:14260,Energy Efficiency,energy,energy,14260,"molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:14981,Energy Efficiency,energy,energy,14981,"ur. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the B",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:15003,Energy Efficiency,energy,energy,15003,"ater. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradi",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:15445,Energy Efficiency,energy,energy,15445,"cited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ en",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:15559,Energy Efficiency,energy,energy,15559,"=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. frac-traverse; Scan fractional occupation of electrons. ao-casscf-sp; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tes",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:15957,Energy Efficiency,energy,energy,15957,"; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:16169,Energy Efficiency,energy,energy,16169,"avors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ ener",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:16456,Energy Efficiency,energy,energy,16456,"d water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:16521,Energy Efficiency,energy,energy,16521,"to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:16854,Energy Efficiency,energy,energy,16854,"Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:17166,Energy Efficiency,energy,energy,17166,"DZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:17694,Energy Efficiency,energy,energy,17694,"is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ opt",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:17813,Energy Efficiency,energy,energy-large,17813,"that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-correc",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:17914,Energy Efficiency,energy,energy,17914,"y. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:18607,Energy Efficiency,energy,energy,18607,"ga optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19111,Energy Efficiency,energy,energy,19111," ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serve",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19610,Energy Efficiency,energy,energy,19610,"-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19811,Energy Efficiency,energy,energy,19811," Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19954,Energy Efficiency,energy,energy,19954,"ith n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane.",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:20469,Energy Efficiency,energy,energy,20469,"tic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) a",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:20584,Energy Efficiency,energy,energy,20584,"-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:20803,Energy Efficiency,energy,energy,20803," HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note t",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:21195,Energy Efficiency,energy,energy,21195,"geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient f",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:21523,Energy Efficiency,energy,energy,21523,"ci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, usin",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:22288,Energy Efficiency,energy,energy,22288,"both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:22338,Energy Efficiency,energy,energy,22338,"nual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:22416,Energy Efficiency,energy,energy,22416,"e MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for di",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:22487,Energy Efficiency,energy,energy,22487,"SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluate",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:22893,Energy Efficiency,energy,energy,22893,"entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ o",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:22943,Energy Efficiency,energy,energy,22943,"e latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. c",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:23016,Energy Efficiency,energy,energy,23016,"s H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fue",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:23138,Energy Efficiency,energy,energy,23138,"5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:24058,Energy Efficiency,energy,energy,24058,"e NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowes",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:24139,Energy Efficiency,energy,energy,24139,"e occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25340,Energy Efficiency,energy,energy,25340,"42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gau",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25451,Energy Efficiency,energy,energy,25451,"irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water ge",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25573,Energy Efficiency,energy,energy,25573,"rsionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25633,Energy Efficiency,energy,energy,25633,"atch to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:27224,Energy Efficiency,energy,energy,27224,"tion of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:27279,Energy Efficiency,energy,energy,27279,"cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:27315,Energy Efficiency,energy,energy,27315,"cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:27409,Energy Efficiency,energy,energy,27409,"eometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:29012,Energy Efficiency,energy,energy,29012,"(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of en",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:29469,Energy Efficiency,energy,energy,29469,"p2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water,",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:29616,Energy Efficiency,energy,energy,29616,"tting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-ma",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:30452,Energy Efficiency,energy,energy,30452,"-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:30676,Energy Efficiency,energy,energy,30676,"epa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-g",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:30843,Energy Efficiency,energy,energy,30843,"are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOO",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:31567,Energy Efficiency,energy,energy,31567,"ms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field a",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:31818,Energy Efficiency,energy,energy,31818,"is \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T)",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:32055,Energy Efficiency,energy,energy,32055,"ctrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:32407,Energy Efficiency,energy,energy,32407,"d-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC upda",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:32800,Energy Efficiency,energy,energy,32800,"y. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:32883,Energy Efficiency,energy,energy,32883,"ternal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:32979,Energy Efficiency,energy,energy,32979,"d at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are rea",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:33560,Energy Efficiency,energy,energy,33560,"rformed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:33843,Energy Efficiency,energy,energy,33843," cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:34441,Energy Efficiency,energy,energy,34441,"s and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set s",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:34886,Energy Efficiency,energy,energy,34886,"adical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the us",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:35391,Energy Efficiency,energy,energy,35391,"d density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out.",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:35514,Energy Efficiency,energy,energy,35514,"s. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scan",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:35782,Energy Efficiency,energy,energy,35782,"2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:35971,Energy Efficiency,energy,energy,35971,"ion explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ ge",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:36697,Energy Efficiency,charge,charge,36697,"d cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orb",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:36910,Energy Efficiency,energy,energy,36910,"mputation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:38168,Energy Efficiency,energy,energy,38168,"cf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and R",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:38764,Energy Efficiency,energy,energy,38764,"he split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:39359,Energy Efficiency,energy,energy,39359,"oided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of ene",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:39581,Energy Efficiency,energy,energy,39581,"ence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water g",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:39810,Energy Efficiency,energy,energy,39810,"ing them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and the",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:41024,Energy Efficiency,energy,energy,41024," run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sa",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:41124,Energy Efficiency,energy,energy,41124,"g a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide men",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:41456,Energy Efficiency,energy,energy,41456," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:41562,Energy Efficiency,energy,energy,41562," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:41824,Energy Efficiency,energy,energy,41824," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:42089,Energy Efficiency,energy,energy,42089," with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and broken-symmetry UHF energy for molecular hydrogen. fci-tdm; He2+ FCI/cc-pVDZ Transition Dipole Moment. omp2p5-grad2; OMP2.5 cc-pVDZ gradient for the NO radical. fci-h2o-fzcv; 6-31G H2O Test FCI Energy Point. sapt-dft2; SAPT(DFT) aug-cc-pVDZ computation for the water dimer interaction energy. «; hide menu. menu; sidebar; »; . Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. © Copyright 2019, The Psi4 Project.; Last updated on Wednesday, 15 May 2019 08:49PM.; Created using Sphinx 1.8.5.; . ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:579,Integrability,interface,interfaced,579,"﻿. Test Suite and Sample Inputs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequenc",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:15932,Integrability,wrap,wrapper,15932,"; CASSCF/6-31G** energy point. tu2-ch2-energy; Sample UHF/6-31G** CH2 computation. opt13; B3LYP cc-pVDZ geometry optimzation of phenylacetylene, starting from not quite linear structure. dft-b3lyp; Check flavors of B3LYP (b3lyp3/b3lyp5) against other programs. dfomp2-grad1; DF-OMP2 cc-pVDZ gradients for the H2O molecule. psimrcc-fd-freq1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. cbs-xtpl-energy; Extrapolated water energies. mints6; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:18400,Integrability,depend,depend,18400,"thene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-C",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:18503,Integrability,depend,depend,18503,"-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:21072,Integrability,interface,interface,21072," doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax example",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:21089,Integrability,interface,interface,21089," doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax example",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25539,Integrability,interface,interface,25539,"the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:29657,Integrability,rout,routing,29657," basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the pot",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:30252,Integrability,depend,depend,30252,"o Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:30355,Integrability,depend,depend,30355,"v. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:38729,Integrability,wrap,wrappers,38729,"he split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:3649,Modifiability,variab,variables,3649,"-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custo",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:5855,Modifiability,plugin,plugins,5855,"vel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and tri",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12149,Modifiability,variab,variables,12149,"y. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12232,Modifiability,variab,variables,12232," F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfom",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:21686,Modifiability,variab,variables,21686,"ations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RH",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:30628,Modifiability,variab,variables,30628,"epa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-g",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:1053,Performance,optimiz,optimizations,1053,"    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:1729,Performance,optimiz,optimization,1729,"UMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:1800,Performance,optimiz,optimization,1800,"uted are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:2988,Performance,optimiz,optimization,2988,"es frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gr",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:4341,Performance,perform,performed,4341,"ensity matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check f",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:6126,Performance,perform,performs,6126,"unctional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZVPP. dcft-grad3; Restricted DF-DCFT ODC-12 gradient for ethylene with cc-pVDZ/cc-pVDZ-RI standard/auxiliary basis set. cepa0-grad1; CEPA0 cc-pVDZ gradient for the H2O molecule. mp3-grad1; MP3 cc-pVDZ gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of opt",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7534,Performance,perform,performs,7534,"gradient for the H2O molecule. nbody-he-cluster; MP2/aug-cc-pv[DT]Z many body energies of an arbitrary Helium complex Size vs cost tradeoff is rough here. cc13d; Tests analytic CC2 gradients. scf5; Test of all different algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:10103,Performance,perform,performing,10103,"objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:10669,Performance,optimiz,optimization,10669," Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane di",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:10737,Performance,optimiz,optimization,10737,"hyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test o",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12019,Performance,perform,performed,12019,"-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point.",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12401,Performance,perform,performs,12401,"ter Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interac",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12419,Performance,optimiz,optimization,12419,"ter Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interac",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12795,Performance,perform,performs,12795,"with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:13519,Performance,optimiz,optimization,13519,"irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy P",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:16594,Performance,optimiz,optimization,16594,"tting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:16672,Performance,optimiz,optimized,16672,"tting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:16942,Performance,optimiz,optimization,16942,"pper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO mol",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:17624,Performance,optimiz,optimization,17624,"bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:17977,Performance,optimiz,optimization,17977,"h dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:18693,Performance,optimiz,optimization,18693,"gy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM wa",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19198,Performance,optimiz,optimization,19198,"pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. df",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19439,Performance,optimiz,optimization,19439,"stup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19517,Performance,optimiz,optimization,19517,"nd on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19755,Performance,perform,performed,19755,"e point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h metha",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19891,Performance,optimiz,optimizations,19891,"em. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:22586,Performance,optimiz,optimized,22586,"SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluate",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:22731,Performance,optimiz,optimization,22731,"r they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc-pVDZ energy for the H2O+ cation. pubchem1; Benzene vertical singlet-triplet energy difference computation, using the PubChem database to obtain the initial geometry, which is optimized at the HF/STO-3G level, before computing single point energies at the RHF, UHF and ROHF levels of theory. opt2; SCF DZ allene geometry optimization, with Cartesian input, first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:24858,Performance,optimiz,optimization,24858,"; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultane",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:24988,Performance,optimiz,optimized,24988,"SCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet catio",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25388,Performance,optimiz,optimization,25388," gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superpo",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:26659,Performance,perform,performed,26659,"-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:30728,Performance,perform,performed,30728,"epa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-g",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:31647,Performance,optimiz,optimizations,31647,"pdated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two stat",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:31919,Performance,optimiz,optimizations,31919,"is \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T)",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:32289,Performance,optimiz,optimization,32289,"grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the diffe",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:32530,Performance,perform,performed,32530,"8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:33389,Performance,perform,performs,33389,"+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 c",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:34332,Performance,optimiz,optimization,34332,"sing the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxid",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:35226,Performance,perform,performed,35226,". The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:35617,Performance,perform,performs,35617,"putations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed param",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:38189,Performance,perform,performs,38189," Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:38658,Performance,optimiz,optimization,38658,"rtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hyb",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:38754,Performance,optimiz,optimize,38754,"he split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:39301,Performance,optimiz,optimization,39301,"handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure.",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:40795,Performance,perform,performed,40795,"VDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). molden1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. psimrcc-ccsd_t-3; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc5; RHF CCSD(T) aug-cc-pvtz frozen-core energy of C4NH4 Anion. mints8; Patch of a glycine with a methyl group, to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. psimrcc-fd-freq2; Mk-MRCCSD frequencies. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. dft-grad2; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. cepa0-grad2; CEPA cc-pVDZ gradient for the NO radical. tu6-cp-ne2; Example potential energy surface scan and CP-correction for Ne2. sapt7; SAPT0 open-shell computation of H2O-HO2 interaction energy First with cc-pVDZ and density fitted integrals with UHF Then with 6-31g and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with UHF. mints-benchmark; run some BLAS benchmarks. scf-bs; UHF and bro",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:7848,Safety,avoid,avoided,7848,"fferent algorithms and reference types for SCF, on singlet and triplet O2, using the cc-pVTZ basis set. omp2-3; OMP2 cc-pVDZ energy for the NO radical. scf2; RI-SCF cc-pVTZ energy of water, with Z-matrix input and cc-pVTZ-RI auxilliary basis. cc36; CC2(RHF)/cc-pVDZ energy of H2O. mints3; Test individual integral objects for correctness. options1; check all variety of options parsing. cc5a; RHF CCSD(T) STO-3G frozen-core energy of C4NH4 Anion. omp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc19; CCSD/cc-pVDZ dipole polarizability at two frequencies. ocepa-grad1; OCEPA cc-pVDZ gradient for the H2O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF d",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:33701,Safety,avoid,avoided,33701,"states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in therm",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:38358,Safety,avoid,avoided,38358,"D[TQ] from Sherrill and Schaefer, J. Phys. Chem. XXX This uses a “primary” virtual space 3s3p (RAS 2), a “secondary” virtual space 3d4s4p4d4f (RAS 3), and a “tertiary” virtual space consisting of the remaining virtuals. First, an initial CISD computation is run to get the natural orbitals; this allows a meaningful partitioning of the virtual orbitals into groups of different importance. Next, the RASCI is run. The split-virtual CISD[TQ] takes all singles and doubles, and all triples and quadruples with no more than 2 electrons in the secondary virtual subspace (RAS 3). If any electrons are present in the tertiary virtual subspace (RAS 4), then that excitation is only allowed if it is a single or double. cc-module; check that CC is returning the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for t",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:560,Security,access,accessible,560,"﻿. Test Suite and Sample Inputs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequenc",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:4354,Security,validat,validate,4354,"ensity matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check f",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19768,Security,validat,validate,19768,"e point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h metha",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:184,Testability,test,test,184,"﻿. Test Suite and Sample Inputs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequenc",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:224,Testability,test,tests,224,"﻿. Test Suite and Sample Inputs. Navigation. Index. modules    .    .    .    .  · ; 1.3.2;  · . PSI4. Appendices. Test Suite and Sample Inputs¶; PSI4 is distributed with an extensive test suite, which can; be found in psi4/tests. After building the source code, these; can automatically be run by running ctest in the compilation; directory. More info on ctest options can be found; here. Sample input files; can be found in the psi4/samples subdirectory of the top-level Psi; directory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequenc",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:1500,Testability,test,test,1500,"ctory. The samples and a brief description are provided below.; Sample inputs accessible through interfaced executables are bulleted below. CFOUR; CHEMPS2; COOKBOOK; DFTD3; DKH; LIBEFP; ERD; GCP; GDMA; GPU_DFCC; JSON; MRCC; PCMSOLVER; PSI4NUMPY; PYTHON; SIMINT; SNSMP2; V2RDM_CASSCF. Sample inputs for PSI4 as distributed are below. Input File; Description. cubeprop-frontier; ROHF frontier orbitals of CH2(s) and CH2(t). mp2p5-grad2; MP2.5 cc-pVDZ gradient for the NO radical. cc46; EOM-CC2/cc-pVDZ on H2O2 with two excited states in each irrep. opt11; Transition-state optimizations of HOOH to both torsional transition states. dfomp2p5-grad1; DF-OMP2.5 cc-pVDZ gradients for the H2O molecule. nbody-vmfc-gradient; Computation of VMFC-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:2223,Testability,test,test,2223,"5)). dfmp2-grad4; DF-MP2 cc-pVDZ gradient for the NO molecule. cc40; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = length, omega = (589 355 nm). dft-custom-dhdf; DSD-PBEP86 S22 Ammonia test. cc25; Single point gradient of 1-2B2 state of H2O+ with EOM-CCSD. dfomp2-grad3; Tests OMP2 gradient in the presence of a dipole field. casscf-sp; CASSCF/6-31G** energy point. cc13; UHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. omp3-5; SOS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dcft-grad4; Unrestricted DF-DCFT ODC-12 gradient for O2 with cc-pVTZ/cc-pVTZ-RI standard/auxiliary basis set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, a",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:2947,Testability,test,test,2947,"is set. fd-freq-gradient; SCF STO-3G finite-differences frequencies from gradients for H2O. sapt-exch-ind-inf; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. ocepa-grad2; OCEPA cc-pVDZ gradient for the NO radical. dfscf-bz2; Benzene Dimer DF-HF/cc-pVDZ. isapt1; This test case shows an example of running and analyzing an FI-SAPT0/jun-cc-pvdz computation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:3313,Testability,test,tests,3313,"utation for 2,4-pentanediol (targeting the intramolecular hydrogen bond between the two hydroxyl groups). dfmp2-2; Density fitted MP2 energy of H2, using density fitted reference and automatic looping over cc-pVDZ and cc-pVTZ basis sets. Results are tabulated using the built in table functions by using the default options and by specifiying the format. dfmp2-freq1; DF-MP2 frequency by difference of energies for H2O. cc8a; ROHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. cbs-xtpl-gradient; Various gradients for a strained helium dimer and water molecule. dft-jk; DFT JK on-disk test. cbs-xtpl-opt; Various extrapolated optimization methods for the H2 molecule. ci-multi; BH single points, checking that program can run multiple instances of DETCI in a single input, without an intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Fin",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:4087,Testability,test,test,4087,"intervening clean() call. fd-freq-gradient-large; SCF DZ finite difference frequencies by gradients for C4NH4. soscf-ref; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Dou",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:4317,Testability,test,test,4317,"ensity matrices. cisd-h2o+-0; 6-31G** H2O+ Test CISD Energy Point. sapt-dft-lrc; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. serial-wfn; A simple hf/cc-pvdz water calculation. The resulting wavefunction is written to a file, and then a new wavefunction is generated from that file. The member variables of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check f",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:4648,Testability,test,test,4648,"bles of both wavefunctions should be identical in value. psimrcc-ccsd_t-4; Mk-MRCCSD(T) single point. \(^1A_1\) O$_3` state described using the Ms = 0 component of the singlet. Uses TCSCF orbitals. casscf-semi; CASSCF/6-31G** energy point. Check energy with frozen core/virtual orbs. after semicanonicalization. mp2-grad1; MP2 cc-pVDZ gradient for the H2O molecule. omp3-grad2; OMP3 cc-pVDZ gradient for the NO radical. fsapt1; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. extern1; External potential calculation involving a TIP3P water and a QM water. Finite different test of the gradient is performed to validate forces. cisd-h2o+-2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, whi",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:5360,Testability,test,test,5360,"2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZV",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:5394,Testability,test,test,5394,"2; 6-31G** H2O+ Test CISD Energy Point. sapt1; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. scf-upcast-custom-basis; test scf castup with custom basis sets. cc52; CCSD Response for H2O2. decontract; RHF/cc-pvdz-decontract HCl single-point energy Testing the in line -decontract option for basis sets. nbody-multi-level; Multilevel computation of water trimer energy (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cc55; EOM-CCSD/6-31g excited state transition data for water with two excited states per irrep. dft-ghost; DFT Functional Test for Range-Seperated Hybrids and Ghost atoms. dft-b2plyp; Double-hybrid density functional B2PYLP. Reproduces portion of Table I in S. Grimme’s J. Chem. Phys 124 034108 (2006) paper defining the functional. stability2; ROHF stability analysis check for CN with cc-pVDZ. This test corresponds to the rohf-stab test from Psi3. psimrcc-ccsd_t-1; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. cc44; Test case for some of the PSI4 out-of-core codes. The code is given only 2.0 MB of memory, which is insufficient to hold either the A1 or B2 blocks of an ovvv quantity in-core, but is sufficient to hold at least two copies of an oovv quantity in-core. psithon2; Accesses basis sets, databases, plugins, and executables in non-install locations. dft1-alt; DFT Functional Test. dfccdl1; DF-CCDL cc-pVDZ energy for the H2O molecule. sapt5; SAPT0 aug-cc-pVTZ computation of the charge transfer energy of the water dimer. dcft3; DC-06 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the AO Basis, using integrals stored on disk. mp2-def2; Test case for Binding Energy of C4H5N (Pyrrole) with CO2 using MP2/def2-TZV",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:8408,Testability,test,tested,8408,"O molecule. dfccsdat1; DF-CCSD(AT) cc-pVDZ energy for the H2O molecule. dcft4; DCFT calculation for the HF+ using DC-06 functional. This performs both two-step and simultaneous update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next two the ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. The computation is then repeated using the DC-12 functional with the same algorithms. mp2-module; OMP2 cc-pVDZ energy for the H2O molecule. cc28; CCSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (b",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:8994,Testability,test,test,8994,"CSD/cc-pVDZ optical rotation calculation (length gauge only) on Z-mat H2O2. fnocc1; Test QCISD(T) for H2O/cc-pvdz Energy. dfccd1; DF-CCD cc-pVDZ energy for the H2O molecule. opt2-fd; SCF DZ allene geometry optimzation, with Cartesian input. dfomp2-2; OMP2 cc-pVDZ energy for the NO molecule. dcft6; DCFT calculation for the triplet O2 using DC-06, DC-12 and CEPA0 functionals. Only two-step algorithm is tested. dfep2-2; Compute three IP and 2 EA’s for the PH3 molecule. pywrap-bfs; apply linear fragmentation algorithm to a water cluster. omp3-grad1; OMP3 cc-pVDZ gradient for the H2O molecule. pywrap-freq-g-sowreap; Finite difference of gradients frequency, run in sow/reap mode. dfmp2-ecp; Ne-Xe dimer MP2 energies with ECP, with electrons correlated then frozen. scf-dipder; Test SCF dipole derivatives against old Psi3 reference values. cc48; reproduces dipole moments in J.F. Stanton’s “biorthogonal” JCP paper. dfccd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. mints9; A test of the basis specification. Various basis sets are specified outright and in blocks, both orbital and auxiliary. Constructs libmints BasisSet objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ grad",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:10097,Testability,test,test,10097,"objects through the constructor that calls qcdb.BasisSet infrastructure. Checks that the resulting bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:10223,Testability,test,tests,10223,"g bases are of the right size and checks that symmetry of the Molecule observes the basis assignment to atoms. cc31; CCSD/sto-3g optical rotation calculation (both gauges) at two frequencies on methyloxirane. cc7; Tests CCENERGY’s CCSD gradient in the presence of a dipole field. cisd-sp-2; 6-31G** H2O Test CISD Energy Point. dfep2-1; Compute three IP and 2 EA’s for the PH3 molecule. opt1; SCF STO-3G geometry optimzation, with Z-matrix input. sapt-compare; SAPT0 cc-pVDZ computation of the ethene-ethyne interaction energy, using the cc-pVDZ-JKFIT RI basis for SCF and cc-pVDZ-RI for SAPT. Monomer geometries are specified using Cartesian coordinates. adc1; ADC/6-31G** on H2O. mp2-grad2; MP2 cc-pVDZ gradient for the NO radical. dfccsd-grad1; DF-CCSD cc-pVDZ gradients for the H2O molecule. dft-omega; Test omega is setable. dft3; DFT integral algorithms test, performing w-B97 RKS and UKS computations on water and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:11150,Testability,test,test,11150," and its cation, using all of the different integral algorithms. This tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI varia",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:11214,Testability,test,test,11214,"is tests both the ERI and ERF integrals. cc8; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mp3-grad2; MP3 cc-pVDZ gradient for the NO radical. scf6; Tests RHF/ROHF/UHF SCF gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harv",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:11472,Testability,test,test,11472,"F gradients. cc4; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. After the computation, the checkpoint file is renamed, using the PSIO handler. pywrap-opt-sowreap; Finite difference optimization, run in sow/reap mode. opt-full-hess-every; SCF/sto-3g optimization with a hessian every step. dfccsd-t-grad1; DF-CCSD(T) cc-pVDZ gradients for the H2O molecule. cc47; EOM-CCSD/cc-pVDZ on H2O2 with two excited states in each irrep. dcft-grad2; RHF-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and sim",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:11874,Testability,test,test,11874,"-ODC-12 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. RHF-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis.",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12005,Testability,test,test,12005,"-ODC-06 analytic gradient computations for H2O use AO_BASIS=DISK and AO_BASIS=NONE, respectively. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point.",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12135,Testability,test,test,12135,"y. dft-grad-lr3; wB97X-D test for a large UKS molecule. fsapt2; A very quick correctness test of F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12200,Testability,test,testing,12200," F-SAPT (see fsapt1 for a real example). cepa3; cc-pvdz H2O Test coupled-pair CISD against DETCI CISD. cc32; CC3/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). scf-hess1; RHF STO-3G (Cartesian) and cc-pVDZ (spherical) water Hessian test, against Psi3 reference values. ocepa-freq1; OCEPA cc-pVDZ freqs for C2H2. dfccsdt1; DF-CCSD(T) cc-pVDZ energy for the H2O molecule. fsapt-terms; F-SAPT0/jun-cc-pvdz procedure for methane dimer. pywrap-db2; Database calculation, run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfom",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:12701,Testability,test,test,12701," run in sow/reap mode. sad1; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-psivar; HF and DFT variants single-points on zmat methane, mostly to test that PSI variables are set and computed correctly. Now also testing that CSX harvesting PSI variables correctly. ocepa2; OCEPA cc-pVDZ energy with B3LYP initial guess for the NO radical. dcft5; DC-06 calculation for the O2 molecule (triplet ground state). This performs geometry optimization using two-step and simultaneous solution of the response equations for the analytic gradient. opt-irc-1; Compute the IRC for HOOH torsional rotation at the RHF/DZP level of theory. sapt-ecp; sapt0 of charged system in ECP basis set. mints10; H2 with tiny basis set, to test basis set parser’s handling of integers. dcft2; DC-06 calculation for the He dimer. This performs a two-step update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeof",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:13848,Testability,test,tests,13848," orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. fci-tdm-2; BH-H2+ FCI/cc-pVDZ Transition Dipole Moment. dfcasscf-fzc-sp; CASSCF/6-31G** energy point. cepa2; cc-pvdz H2O Test ACPF Energy/Properties. cc24; Single point gradient of 1-2B1 state of H2O+ with EOM-CCSD. castup1; Test of SAD/Cast-up (mainly not dying due to file weirdness). dfomp3-grad1; DF-OMP3 cc-pVDZ gradients for the H2O molecule. pywrap-alias; Test parsed and exotic calls to energy() like zapt4, mp2.5, and cisd are working. fci-dipole; 6-31G H2O Test FCI Energy Point. sapt-dft1; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc2; 6-31G** H2O CCSD optimization by energies, with Z-Matrix input. dft1; DFT Functional Test. nbody-intermediates; HF/cc-pVDZ many body energies of an arbitrary noble gas trimer complex Size vs cost tradeoff is rough here. cc11; Frozen-core CCSD(ROHF)/cc-pVDZ on CN radical with disk-based AO algorithm. pywrap-cbs1; Various basis set extrapolation tests. x2c3; Test of SFX2C-1e on Water uncontracted cc-pVDZ The reference numbers are from Lan Cheng’s implementation in Cfour. cubeprop-esp; RHF orbitals and density for water. cc49; EOM-CC3(UHF) on CH radical with user-specified basis and properties for particular root. opt-multi-dimer-c1; Multi-fragment opt of C2h methane dimer with user-combined reference points. pywrap-checkrun-uhf; This checks that all energy methods can run with a minimal input and set symmetry. cc13c; Tests RHF CCSD(T)gradients. mom; Maximum Overlap Method (MOM) Test. MOM is designed to stabilize SCF convergence and to target excited Slater determinants directly. zaptn-nh2; ZAPT(n)/6-31G NH2 Energy Point, with n=2-25. omp2-grad1; OMP2 cc-pVDZ gradient for the H2O molecule. pywrap-checkrun-convcrit; Advanced python example sets different sets of scf/post-scf conv crit and check to be sure computation has actually converged to the expected accuracy. dfrasscf-sp; 6-31G** H2O Test RASSCF Energy ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:16540,Testability,test,tests,16540,"to make alanine, then DF-SCF energy calculation with the cc-pVDZ basis set. basis-ecp; check mixing ECP and non-ECP orbital/fitting basis sets in a session. isapt2; This is a shorter version if isapt1 - does not do cube plots. See isapt1 for full details. casscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule see C. D. Sherrill and P. Piecuch, J. Chem. Phys. 122, 124104 (2005). cbs-xtpl-wrapper; RHF aug-cc-pVQZ energy for the BH molecule, with Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:17008,Testability,test,testing,17008,"Cartesian input. Various gradients for a strained helium dimer and water molecule. pywrap-align; apply linear fragmentation algorithm to a water cluster. dfccsd1; DF-CCSD cc-pVDZ energy for the H2O molecule. cc13b; Tests RHF CCSD(T)gradients. x2c1; Test of SFX2C-1e on water uncontracted cc-pVDZ-DK The reference numbers are from Lan Cheng’s implementation in Cfour. scf-property; UFH and B3LYP cc-pVQZ properties for the CH2 molecule. dfomp2p5-2; DF-OMP2.5 cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:17442,Testability,test,test,17442,"cc-pVDZ energy for the H2O+ cation. soscf-dft; Triple and Singlet Oxygen energy SOSCF, also tests non-symmetric density matrices. opt14; 6-31G(d) optimization of SF4 starting from linear bond angle that is not linear in the optimized structure but is in a symmetry plane of the molecule. dcft-grad1; DCFT DC-06 gradient for the O2 molecule with cc-pVDZ basis set. pywrap-checkrun-rhf; This checks that all energy methods can run with a minimal input and set symmetry. opt5; 6-31G** UHF CH2 3B1 optimization. Uses a Z-Matrix with dummy atoms, just for demo and testing purposes. cc53; Matches Table II a-CCSD(T)/cc-pVDZ H2O @ 2.5 * Re value from Crawford and Stanton, IJQC 98, 601-611 (1998). dfomp3-1; DF-OMP3 cc-pVDZ energy for the H2O molecule. psithon1; Spectroscopic constants of H2, and the full ci cc-pVTZ level of theory. scf-response1; Compute the dipole, quadrupole, and traceless quadrupoles for water. tu5-sapt; Example SAPT computation for ethene*ethine (i.e., ethylene*acetylene), test case 16 from the S22 database. cc39; RHF-CC2-LR/cc-pVDZ dynamic polarizabilities of HOF molecule. cc18; RHF-CCSD-LR/cc-pVDZ static polarizability of HOF. frac-ip-fitting; Omega optimization for LRC functional wB97 on water. dfomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. cc35; CC3(ROHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). fd-freq-energy-large; SCF DZ finite difference frequencies by energies for C4NH4. dfomp2-grad2; OMP2 cc-pVDZ energy for the NO molecule. cc1; RHF-CCSD 6-31G** all-electron optimization of the H2O molecule. psimrcc-sp1; Mk-MRCCSD single point. \(^3 \Sigma ^-\) O2 state described using the Ms = 0 component of the triplet. Uses ROHF triplet orbitals. castup2; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrat",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19292,Testability,test,test,19292," that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend on presence/absence of castup. Demonstrates (by comparison to castup3) that output file doesn’t depend on options (scf_type) being set global or local. This input uses global. cc10; ROHF-CCSD cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical. opt-freeze-coords; SCF/cc-pVDZ optimization example with frozen cartesian. cc27; Single point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:19731,Testability,test,test,19731,"e point gradient of 1-1B2 state of H2O with EOM-CCSD. nbody-cp-gradient; Computation of CP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). mpn-bh; MP(n)/aug-cc-pVDZ BH Energy Point, with n=2-19. Compare against M. L. Leininger et al., J. Chem. Phys. 112, 9213 (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h metha",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:20047,Testability,test,tests,20047," (2000). sapt-sf1; Tests the Psi4 SF-SAPT code. cbs-delta-energy; Extrapolated energies with delta correction. omp2-5; SOS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. scf-freq1; Analytic vs. finite difference DF-SCF frequency test for water. cc22; ROHF-EOM-CCSD/DZ on the lowest two states of each irrep in \(^{3}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE sch",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:20364,Testability,test,test,20364,"}B_1\) CH2. cc14; ROHF-CCSD/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. mp2-1; All-electron MP2 6-31G** geometry optimization of water. cepa1; cc-pvdz H2O Test CEPA(1) Energy. casscf-fzc-sp; CASSCF/6-31G** energy point. extern2; External potential calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correctio",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:20643,Testability,test,test,20643,"calculation involving a TIP3P water and a QM water for DFMP2. Finite different test of the gradient is performed to validate forces. opt9; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in internals. cc9a; ROHF-CCSD(T) cc-pVDZ energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mints1; Symmetry tests for a range of molecules. This doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatr",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:21099,Testability,test,testing,21099," doesn’t actually compute any energies, but serves as an example of the many ways to specify geometries in Psi4. dfmp2-grad5; Tests DF-MP2 gradient in the presence of a dipole field. pywrap-db3; Test that Python Molecule class processes geometry like psi4 Molecule class. fcidump; test FCIDUMP functionality for rhf/uhf. cc16; ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax example",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:21406,Testability,test,test,21406,"ROHF and UHF-B-CCD(T)/cc-pVDZ \(^{3}B_1\) CH2 single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\) ). fci-h2o; 6-31G H2O Test FCI Energy Point. ocepa1; OCEPA cc-pVDZ energy for the H2O molecule. dft-custom-gga; DFT (LDA/GGA) test of custom implementations in: gga_superfuncs.py. opt-multi-dimer-c2h; Multi-fragment opt of C2h methane dimer with user-combined reference points. fd-freq-energy; SCF STO-3G finite-difference frequencies from energies for H2O. cc30; CCSD/sto-3g optical rotation calculation (length gauge only) at two frequencies on methyloxirane. nbody-convergence; Convergence of many-body gradients of different BSSE schemes. numpy-array-interface; Numpy interface testing. ghosts; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using explicit specification of ghost atoms. This is equivalent to the dfmp2_1 sample but uses both (equivalent) specifications of ghost atoms in a manual counterpoise correction. mints-helper; A general test of the MintsHelper function. sapt3; SAPT2+3(CCD) aug-cc-pVDZ+midbond computation of the water dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. mints4; A demonstration of mixed Cartesian/ZMatrix geometry specification, using variables, for the benzene-hydronium complex. Atoms can be placed using ZMatrix coordinates, whether they belong to the same fragment or not. Note that the Cartesian specification must come before the ZMatrix entries because the former define absolute positions, while the latter are relative. tu4-h2o-freq; Optimization followed by frequencies H2O HF/cc-pVDZ. cbs-parser; mtd/basis syntax examples. dft-reference; MP2 with a PBE0 reference computation. mp2p5-grad1; MP2.5 cc-pVDZ gradient for the H2O molecule. dfmp2-grad3; DF-MP2 cc-pVDZ gradients for the H2O molecule. dfomp2p5-1; DF-OMP2.5 cc-pVDZ energy for the H2O molecule. omp3-3; OMP3 cc-pVDZ energy with B3LYP initial guess for the NO radical. dfomp3-2; DF-OMP3 cc",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:23740,Testability,test,test,23740," first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewic",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:23808,Testability,test,test,23808," first in c2v symmetry, then in Cs symmetry from a starting point with a non-linear central bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewic",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:23856,Testability,test,test,23856,"tral bond angle. dfomp2-3; OMP2 cc-pVDZ energy for the H2O molecule. omp3-2; OMP3 cc-pVDZ energy with ROHF initial guess for the NO radical. ocepa3; OCEPA cc-pVDZ energy with ROHF initial guess for the NO radical. cisd-h2o+-1; 6-31G** H2O+ Test CISD Energy Point. mcscf1; ROHF 6-31G** energy of the \(^{3}B_1\) state of CH2, with Z-matrix input. The occupations are specified explicitly. dfomp2p5-grad2; DF-OMP2.5 cc-pVDZ gradients for the H2O+ cation. freq-isotope2; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures, pressures, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geome",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:24456,Testability,test,test,24456,"es, and isotopologs. props3; DF-SCF cc-pVDZ multipole moments of benzene, up to 7th order and electrostatic potentials evaluated at the nuclear coordinates. scf11-freq-from-energies; Test frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:24646,Testability,test,testing,24646,"t frequencies by finite differences of energies for planar C4NH4 TS. stability1; UHF->UHF stability analysis test for BH with cc-pVDZ Test direct SCF with and without symmetry, test PK without symmetry. scf-coverage; Lithium test for coverage. cc29; CCSD/cc-pVDZ optical rotation calculation (both gauges) on Cartesian H2O2. ci-property; CI/MCSCF cc-pvDZ properties for Potassium nitrate (rocket fuel!). cc37; CC2(UHF)/cc-pVDZ energy of H2O+. sapt8; SAPT0(ROHF) open-shell computation of CN - Ne interaction energy First with jun-cc-pVDZ and density fitted integrals with ROHF Then with cc-pVDZ and direct integrals, except for dispersion that is computed with cc-pVDZ-ri density fitting with ROHF. cc42; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = length, omega = (589 355 nm). dft-dsd; DSD S22 Ammonia test. opt-irc-2; Compute the IRC for HCN <-> NCH interconversion at the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G**",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25523,Testability,test,test,25523,"the RHF/DZP level of theory. dft-custom-mgga; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25656,Testability,test,test,25656,"atch supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). cc3; cc3: RHF-CCSD/6-31G** H2O geometry optimization and vibrational frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:25896,Testability,test,tested,25896,"nal frequency analysis by finite-differences of gradients. dft-freq; Frequencies for H2O B3LYP/6-31G* at optimized geometry. cc23; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}B_1\) state of H2O+ (A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-me",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:26066,Testability,test,testing,26066,"(A1 excitation). fnocc3; Test FNO-QCISD(T) computation. scf3; File retention, docc, socc, and bond distances specified explicitly. adc2; ADC/aug-cc-pVDZ on two water molecules that are distant from 1000 angstroms from each other. dfcasscf-sp; CASSCF/6-31G** energy point. opt10; 6-31G MP2 transition-state optimization with initial, computed Hessian. scf1; RHF cc-pVQZ energy for the BH molecule, with Cartesian input. pubchem2; Superficial test of PubChem interface. omp2p5-1; OMP2 cc-pVDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fracti",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:26514,Testability,test,test,26514,"VDZ energy for the H2O molecule. ao-dfcasscf-sp; CASSCF/6-31G** energy point. mints12; test roundtrip-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 ele",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:26645,Testability,test,test,26645,"-ness of dict repr for psi4.core.Molecule and qcdb.Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:26736,Testability,test,test,26736,"Molecule. omp2-grad2; OMP2 cc-pVDZ gradient for the NO radical. dcft7; DCFT calculation for the triplet O2 using ODC-06 and ODC-12 functionals. Only simultaneous algorithm is tested. scf-guess-read1; Sample UHF/cc-pVDZ H2O computation on a doublet cation, using RHF/cc-pVDZ orbitals for the closed-shell neutral as a guess. pywrap-align-chiral; testing aligner on enantiomers based on Table 1 of 10.1021/ci100219f aka J Chem Inf Model 2010 50(12) 2129-2140. cc43; RHF-CC2-LR/STO-3G optical rotation of (S)-methyloxirane. gauge = both, omega = (589 355 nm). cc41; RHF-CC2-LR/cc-pVDZ optical rotation of H2O2. gauge = both, omega = (589 355 nm). molden2; Test of the superposition of atomic densities (SAD) guess, using a highly distorted water geometry with a cc-pVDZ basis set. This is just a test of the code and the user need only specify guess=sad to the SCF module’s (or global) options in order to use a SAD guess. The test is first performed in C2v symmetry, and then in C1. dft-custom; DFT custom functional test. dfcasscf-sa-sp; Example of state-averaged CASSCF for the C2 molecule. dfomp3-grad2; DF-OMP3 cc-pVDZ gradients for the H2O+ cation. dft-grad-meta; meta-GGA gradients of water and ssh molecules. dfmp2-grad2; DF-MP2 cc-pVDZ gradient for the NO molecule. cc38; RHF-CC2-LR/cc-pVDZ static polarizabilities of HOF molecule. frac; Carbon/UHF Fractionally-Occupied SCF Test Case. dft-grad1; DF-BP86-D2 cc-pVDZ frozen core gradient of S22 HCN. sapt-dft-api; SAPT(DFT) aug-cc-pVDZ interaction energy between Ne and Ar atoms. cc34; RHF-CCSD/cc-pVDZ energy of H2O partitioned into pair energy contributions. sapt2; SAPT0 aug-cc-pVDZ computation of the benzene-methane interaction energy, using the aug-pVDZ-JKFIT DF basis for SCF, the aug-cc-pVDZ-RI DF basis for SAPT0 induction and dispersion, and the aug-pVDZ-JKFIT DF basis for SAPT0 electrostatics and induction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-3",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:28592,Testability,test,test,28592,"uction. This example uses frozen core as well as asyncronous I/O while forming the DF integrals and CPHF coefficients. rasscf-sp; 6-31G** H2O Test RASSCF Energy Point will default to only singles and doubles in the active space. omp2p5-grad1; OMP2.5 cc-pVDZ gradient for the H2O molecule. cbs-xtpl-nbody; RHF interaction energies using nbody and cbs parts of the driver Ne dimer with mp2/v[dt]z + d:ccsd(t)/vdz. freq-isotope1; Vibrational and thermo analysis of several water isotopologs. Demonstrates Hessian reuse for different temperatures and pressures but not for different isotopologs. nbody-nocp-gradient; Computation of NoCP-corrected water trimer gradient (geometry from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Po",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:29270,Testability,test,testing,29270,"try from J. Chem. Theory Comput. 11, 2126-2136 (2015)). cisd-sp; 6-31G** H2O Test CISD Energy Point. opt-multi-frozen-dimer-c2h; Frozen-fragment opt of C2h methane dimer with user-combined reference points. dfmp2-fc; Kr–Kr nocp energies with all-electron basis set to check frozen core. dfmp2-4; conventional and density-fitting mp2 test of mp2 itself and setting scs-mp2. cc54; CCSD dipole with user-specified basis set. scf-guess; Test initial SCF guesses on FH and FH+ in cc-pVTZ basis. pywrap-db1; Database calculation, so no molecule section in input file. Portions of the full databases, restricted by subset keyword, are computed by sapt0 and dfmp2 methods. dfmp2-1; Density fitted MP2 cc-PVDZ/cc-pVDZ-RI computation of formic acid dimer binding energy using automatic counterpoise correction. Monomers are specified using Cartesian coordinates. cc6; Frozen-core CCSD(T)/cc-pVDZ on C4H4N anion with disk ao algorithm. dft-dldf; Dispersionless density functional (dlDF+D) internal match to Psi4 Extensive testing has been done to match supplemental info of Szalewicz et. al., Phys. Rev. Lett., 103, 263201 (2009) and Szalewicz et. al., J. Phys. Chem. Lett., 1, 550-555 (2010). dfccsdl1; DF-CCSDL cc-pVDZ energy for the H2O molecule. dft-grad-lr1; wB97X-D cc-pVDZ gradient of S22 HCN. fci-h2o-2; 6-31G H2O Test FCI Energy Point. cdomp2-2; OMP2 cc-pVDZ energy for the NO molecule. cepa-module; routing check on lccd, lccsd, cepa(0). pywrap-basis; SAPT calculation on bimolecular complex where monomers are unspecified so driver auto-fragments it. Basis set and auxiliary basis sets are assigned by atom type. cc17; Single point energies of multiple excited states with EOM-CCSD. dfmp2-freq2; DF-MP2 frequency by difference of energies for H2O. castup3; SCF with various combinations of pk/density-fitting, castup/no-castup, and spherical/cartesian settings. Demonstrates that puream setting is getting set by orbital basis for all df/castup parts of calc. Demonstrates that answer doesn’t depend ",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:31336,Testability,test,test,31336,"omparison to castup2) that output file doesn’t depend on options (scf_type) being set global or local. This input uses local. scf4; RHF cc-pVDZ energy for water, automatically scanning the symmetric stretch and bending coordinates using Python’s built-in loop mechanisms. The geometry is specified using a Z-matrix with variables that are updated during the potential energy surface scan, and then the same procedure is performed using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via an",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:31737,Testability,test,test,31737," using polar coordinates, converted to Cartesian coordinates. cc15; RHF-B-CCD(T)/6-31G** H2O single-point energy (fzc, MO-basis \(\langle ab|cd \rangle\)). fnocc2; Test G2 method for H2O. opt4; SCF cc-pVTZ geometry optimzation, with Z-matrix input. dfmp2-grad1; DF-MP2 cc-pVDZ gradients for the H2O molecule. props4; Electrostatic potential and electric field evaluated on a grid around water. psimrcc-ccsd_t-2; Mk-MRCCSD(T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Seco",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:32102,Testability,test,test,32102,"T) single point. \(^1A_1\) CH2 state described using the Ms = 0 component of the singlet. Uses RHF singlet orbitals. dft-grac; Gradient regularized asymptotic correction (GRAC) test. cbs-xtpl-freq; Various gradients for a strained helium dimer and water molecule. cisd-h2o-clpse; 6-31G** H2O Test CISD Energy Point with subspace collapse. rasci-h2o; RASCI/6-31G** H2O Energy Point. opt8; Various constrained energy minimizations of HOOH with cc-pvdz RHF. Cartesian-coordinate constrained optimizations of HOOH in Cartesians. dft-grad-disk; A range-seperated gradient for SO2 to test disk algorithms by explicitly setting low memory. opt6; Various constrained energy minimizations of HOOH with cc-pvdz RHF Internal-coordinate constraints in internal-coordinate optimizations. dfmp2-3; DF-MP2 cc-pVDZ frozen core gradient of benzene, computed at the DF-SCF cc-pVDZ geometry. cdomp2-1; OMP2 cc-pVDZ energy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various b",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:33049,Testability,test,test,33049,"gy for the H2O molecule. fsapt-diff1; This test case shows an example of running and analyzing a difference F-SAPT0/jun-cc-pvdz procedure for phenol dimer from the S22 database. cc13a; UHF-CCSD(T)/cc-pVDZ \(^{3}B_1\) CH2 geometry optimization via analytic gradients. cbs-xtpl-alpha; Extrapolated water energies. cc8c; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. props1; RHF STO-3G dipole moment computation, performed by applying a finite electric field and numerical differentiation. cc45; RHF-EOM-CC2/cc-pVDZ lowest two states of each symmetry of H2O. cbs-xtpl-dict; Extrapolated water energies. soscf-large; Second-order SCF convergnece: Benzene. fnocc4; Test FNO-DF-CCSD(T) energy. tu3-h2o-opt; Optimize H2O HF/cc-pVDZ. cc9; UHF-CCSD(T) cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Z-matrix input. mcscf3; RHF 6-31G** energy of water, using the MCSCF module and Z-matrix input. mints2; A test of the basis specification. A benzene atom is defined using a ZMatrix containing dummy atoms and various basis sets are assigned to different atoms. The symmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G g",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:34177,Testability,test,test,34177,"ymmetry of the molecule is automatically lowered to account for the different basis sets. dcft8; DCFT calculation for the NH3+ radical using the ODC-12 and ODC-13 functionals. This performs both simultaneous and QC update of the orbitals and cumulant using DIIS extrapolation. Four-virtual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. The",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:34512,Testability,test,tests,34512,"tual integrals are first handled in the MO Basis for the first two energy computations. In the next computation ao_basis=disk algorithm is used, where the transformation of integrals for four-virtual case is avoided. cc12; Single point energies of multiple excited states with EOM-CCSD. dft2; DFT Functional Test. cc8b; ROHF-CCSD cc-pVDZ frozen-core energy for the \(^2\Sigma^+\) state of the CN radical, with Cartesian input. pywrap-molecule; Check that C++ Molecule class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:34948,Testability,test,tests,34948,"class and qcdb molecule class are reading molecule input strings identically. opt1-fd; SCF STO-3G geometry optimzation, with Z-matrix input, by finite-differences. x2c2; Test of SFX2C-1e on Water cc-pVDZ-DK. In this test the Dirac equation is solved in the uncontracted cc-pVDZ-DK basis. The reference numbers are from Lan Cheng’s implementation in Cfour. cbs-xtpl-func; optimization with method defined via cbs. cubeprop; RHF orbitals and density for water. omp3-1; OMP3 cc-pVDZ energy for the H2O molecule. fd-gradient; SCF STO-3G finite-difference tests. mints5; Tests to determine full point group symmetry. Currently, these only matter for the rotational symmetry number in thermodynamic computations. sapt6; checks that all SAPT physical components (elst, exch, indc, disp) and total IE are being computed correctly for SAPT2+3(CCD)dMP2/aug-cc-pvdz and all lesser methods thereof. cc4a; RHF-CCSD(T) cc-pVQZ frozen-core energy of the BH molecule, with Cartesian input. This version tests the FROZEN_DOCC option explicitly. nbo; Generation of NBO file. matrix1; An example of using BLAS and LAPACK calls directly from the Psi input file, demonstrating matrix multiplication, eigendecomposition, Cholesky decomposition and LU decomposition. These operations are performed on vectors and matrices provided from the Psi library. mp2-property; MP2 cc-pvDZ properties for Nitrogen oxide. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer in",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:36341,Testability,test,test,36341,"e. pywrap-checkrun-rohf; This checks that all energy methods can run with a minimal input and set symmetry. dft-smoke; DFT Functional Smoke Test. omp2p5-2; OMP2 cc-pVDZ energy for the H2O molecule. dcft1; DC-06, DC-12, ODC-06 and ODC-12 calculation for the He dimer. This performs a simultaneous update of the orbitals and cumulant, using DIIS extrapolation. Four-virtual integrals are handled in the MO Basis. opt7; Various constrained energy minimizations of HOOH with cc-pvdz RHF. For “fixed” coordinates, the final value is provided by the user. sapt4; SAPT2+(3) aug-cc-pVDZ computation of the formamide dimer interaction energy, using the aug-cc-pVDZ-JKFIT DF basis for SCF and aug-cc-pVDZ-RI for SAPT. This example uses frozen core as well as MP2 natural orbital approximations. cc26; Single-point gradient, analytic and via finite-differences of 2-1A1 state of H2O with EOM-CCSD. scf-guess-read2; Test if the the guess read in the same basis converges. dft-pbe0-2; Internal match to psi4, test to match to literature values in litref.in/litref.out. gibbs; Test Gibbs free energies at 298 K of N2, H2O, and CH4. props2; DF-SCF cc-pVDZ of benzene-hydronium ion, scanning the dissociation coordinate with Python’s built-in loop mechanism. The geometry is specified by a Z-matrix with dummy atoms, fixed parameters, updated parameters, and separate charge/multiplicity specifiers for each monomer. One-electron properties computed for dimer and one monomer. cc50; EOM-CC3(ROHF) on CH radical with user-specified basis and properties for particular root. tu1-h2o-energy; Sample HF/cc-pVDZ H2O computation. opt3; SCF cc-pVDZ geometry optimzation, with Z-matrix input. psimrcc-pt2; Mk-MRPT2 single point. \(^1A_1\) F2 state described using the Ms = 0 component of the singlet. Uses TCSCF singlet orbitals. scf-bz2; Benzene Dimer Out-of-Core HF/cc-pVDZ. cisd-opt-fd; H2O CISD/6-31G** Optimize Geometry by Energies. rasci-ne; Ne atom RASCI/cc-pVQZ Example of split-virtual CISD[TQ] from Sherrill and Sc",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:39019,Testability,test,testing,39019,"ing the same values btwn CC*, FNOCC, and DFOCC modules. dcft9; UHF-ODC-12 and RHF-ODC-12 single-point energy for H2O. This performs a simultaneous update of orbitals and cumulants, using DIIS extrapolation. Four-virtual integrals are handled in the AO basis, where integral transformation is avoided. In the next RHF-ODC-12 computation, AO_BASIS=NONE is used, where four-virtual integrals are transformed into MO basis. fci-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
https://psicode.org/psi4manual/1.3.2/testsuite.html:39505,Testability,test,test,39505,"-coverage; 6-31G H2O Test for coverage. scf-occ; force occupations in scf. scf7; Tests SCF gradient in the presence of a dipole field. omp2-4; SCS-OMP2 cc-pVDZ geometry optimization for the H2O molecule. pywrap-all; Intercalls among python wrappers- database, cbs, optimize, energy, etc. Though each call below functions individually, running them all in sequence or mixing up the sequence is aspirational at present. Also aspirational is using the intended types of gradients. rasci-c2-active; 6-31G* C2 Test RASCI Energy Point, testing two different ways of specifying the active space, either with the ACTIVE keyword, or with RAS1, RAS2, RESTRICTED_DOCC, and RESTRICTED_UOCC. cc21; ROHF-EOM-CCSD/DZ analytic gradient lowest \(^{2}A_1\) excited state of H2O+ (B1 excitation). omp3-4; SCS-OMP3 cc-pVDZ geometry optimization for the H2O molecule. dfomp2-4; OMP2 cc-pVDZ energy for the NO molecule. dft-grad-lr2; Tests CAM gradients with and without XC pieces to narrow grid error. dft-vv10; He Dimer VV10 functional test. notes: DFT_VV10_B/C overwrites the NL_.. tuple. mcscf2; TCSCF cc-pVDZ energy of asymmetrically displaced ozone, with Z-matrix input. dft-custom-hybrid; DFT (hybrids) test of implementations in: hybrid_superfuncs.py. cepa4; cc-pvdz H2O Test coupled-pair LCCD against DCFT CEPA0. omp2-2; OMP2 cc-pVDZ energy with ROHF initial guess orbitals for the NO radical. cc33; CC3(UHF)/cc-pVDZ H2O \(R_e\) geom from Olsen et al., JCP 104, 8007 (1996). pywrap-freq-e-sowreap; Finite difference of energies frequency, run in sow/reap mode. fsapt-allterms; This test case shows an example of running and analyzing a standard F-SAPT0/jun-cc-pvdz procedure for HSG-18-dimer from the HSG database. cc51; EOM-CC3/cc-pVTZ on H2O. opt12; SCF cc-pVDZ geometry optimzation of ketene, starting from bent structure. scf-ecp; Water-Argon complex with ECP present; check of energies and forces. nbody-freq; Vibrational and thermo analysis of water trimer (geometry from J. Chem. Theory Comput. 11, 2126-213",MatchSource.WIKI,psi4manual/1.3.2/testsuite.html,psi4,psi4,v1.9.1,https://psicode.org,https://psicode.org/psi4manual/1.3.2/testsuite.html
