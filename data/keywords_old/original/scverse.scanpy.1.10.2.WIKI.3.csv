id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:9206,Deployability,release,release,9206,"anpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT. Contents . MatrixPlot.DEFAULT_CATEGORY_HEIGHT. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT#. MatrixPlot.DEFAULT_CATEGORY_HEIGHT = 0.35[source]#. previous; scanpy.pl.MatrixPlot. next; scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH. Contents; . MatrixPlot.DEFAULT_CATEGORY_HEIGHT. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:7198,Performance,cache,cachedir,7198,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:8439,Security,hash,hashsolo,8439,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT. Contents . MatrixPlot.DEFAULT_CATEGORY_HEIGHT. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT#. MatrixPlot.DEFAULT_CATEGORY_HEIGHT = 0.35[source]#. pre,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:7466,Testability,log,logfile,7466,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:7505,Testability,log,logpath,7505,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:7811,Testability,log,logging,7811,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:7840,Testability,log,logging,7840, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:8121,Deployability,toggle,toggleswitch,8121,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:9205,Deployability,release,release,9205,"rbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH. Contents . MatrixPlot.DEFAULT_CATEGORY_WIDTH. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH#. MatrixPlot.DEFAULT_CATEGORY_WIDTH = 0.37[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT. next; scanpy.pl.MatrixPlot.DEFAULT_COLORMAP. Contents; . MatrixPlot.DEFAULT_CATEGORY_WIDTH. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:7197,Performance,cache,cachedir,7197,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:8438,Security,hash,hashsolo,8438,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH. Contents . MatrixPlot.DEFAULT_CATEGORY_WIDTH. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH#. MatrixPlot.DEFAULT_CATEGORY_WIDTH = 0.37[source]#. previou,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:7465,Testability,log,logfile,7465,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:7504,Testability,log,logpath,7504,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:7810,Testability,log,logging,7810,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:7839,Testability,log,logging,7839, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:8115,Deployability,toggle,toggleswitch,8115,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:9199,Deployability,release,release,9199,".ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_COLORMAP. Contents . MatrixPlot.DEFAULT_COLORMAP. scanpy.pl.MatrixPlot.DEFAULT_COLORMAP#. MatrixPlot.DEFAULT_COLORMAP = 'viridis'[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH. next; scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. Contents; . MatrixPlot.DEFAULT_COLORMAP. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:7191,Performance,cache,cachedir,7191,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:8432,Security,hash,hashsolo,8432,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_COLORMAP. Contents . MatrixPlot.DEFAULT_COLORMAP. scanpy.pl.MatrixPlot.DEFAULT_COLORMAP#. MatrixPlot.DEFAULT_COLORMAP = 'viridis'[source]#. previous; scanpy.pl.Matrix,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:7459,Testability,log,logfile,7459,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:7498,Testability,log,logpath,7498,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:7804,Testability,log,logging,7804,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:7833,Testability,log,logging,7833, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:8125,Deployability,toggle,toggleswitch,8125,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:9209,Deployability,release,release,9209,".writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. Contents . MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE#. MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE = 'Mean expression\nin group'[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_COLORMAP. next; scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR. Contents; . MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:7201,Performance,cache,cachedir,7201,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:8442,Security,hash,hashsolo,8442,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. Contents . MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE#. MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE = 'Mean ,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:7469,Testability,log,logfile,7469,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:7508,Testability,log,logpath,7508,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:7814,Testability,log,logging,7814,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:7843,Testability,log,logging,7843, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:8117,Deployability,toggle,toggleswitch,8117,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:9201,Deployability,release,release,9201,".ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR. Contents . MatrixPlot.DEFAULT_EDGE_COLOR. scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR#. MatrixPlot.DEFAULT_EDGE_COLOR = 'gray'[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. next; scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW. Contents; . MatrixPlot.DEFAULT_EDGE_COLOR. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:7193,Performance,cache,cachedir,7193,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:8434,Security,hash,hashsolo,8434,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR. Contents . MatrixPlot.DEFAULT_EDGE_COLOR. scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR#. MatrixPlot.DEFAULT_EDGE_COLOR = 'gray'[source]#. previous; scanpy.pl.M,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:7461,Testability,log,logfile,7461,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:7500,Testability,log,logpath,7500,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:7806,Testability,log,logging,7806,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:7835,Testability,log,logging,7835, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:8114,Deployability,toggle,toggleswitch,8114,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:9198,Deployability,release,release,9198,"ix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW. Contents . MatrixPlot.DEFAULT_EDGE_LW. scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW#. MatrixPlot.DEFAULT_EDGE_LW = 0.1[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR. next; scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH. Contents; . MatrixPlot.DEFAULT_EDGE_LW. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:7190,Performance,cache,cachedir,7190,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:8431,Security,hash,hashsolo,8431,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW. Contents . MatrixPlot.DEFAULT_EDGE_LW. scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW#. MatrixPlot.DEFAULT_EDGE_LW = 0.1[source]#. previous; scanpy.pl.MatrixPlot.DEFAU,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:7458,Testability,log,logfile,7458,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:7497,Testability,log,logpath,7497,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:7803,Testability,log,logging,7803,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:7832,Testability,log,logging,7832, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:8120,Deployability,toggle,toggleswitch,8120,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:9204,Deployability,release,release,9204,"pyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH. Contents . MatrixPlot.DEFAULT_LEGENDS_WIDTH. scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH#. MatrixPlot.DEFAULT_LEGENDS_WIDTH = 1.5[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW. next; scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX. Contents; . MatrixPlot.DEFAULT_LEGENDS_WIDTH. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:7196,Performance,cache,cachedir,7196,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:8437,Security,hash,hashsolo,8437,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH. Contents . MatrixPlot.DEFAULT_LEGENDS_WIDTH. scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH#. MatrixPlot.DEFAULT_LEGENDS_WIDTH = 1.5[source]#. previous; sc,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:7464,Testability,log,logfile,7464,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:7503,Testability,log,logpath,7503,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:7809,Testability,log,logging,7809,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:7838,Testability,log,logging,7838, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:8118,Deployability,toggle,toggleswitch,8118,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:9202,Deployability,release,release,9202,"yConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX. Contents . MatrixPlot.DEFAULT_SAVE_PREFIX. scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX#. MatrixPlot.DEFAULT_SAVE_PREFIX = 'matrixplot_'[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH. next; scanpy.pl.MatrixPlot.DEFAULT_WSPACE. Contents; . MatrixPlot.DEFAULT_SAVE_PREFIX. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:7194,Performance,cache,cachedir,7194,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:8435,Security,hash,hashsolo,8435,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX. Contents . MatrixPlot.DEFAULT_SAVE_PREFIX. scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX#. MatrixPlot.DEFAULT_SAVE_PREFIX = 'matrixplot_'[source]#. previous; ,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:7462,Testability,log,logfile,7462,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:7501,Testability,log,logpath,7501,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:7807,Testability,log,logging,7807,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:7836,Testability,log,logging,7836, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:8113,Deployability,toggle,toggleswitch,8113,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:9197,Deployability,release,release,9197,"plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_WSPACE. Contents . MatrixPlot.DEFAULT_WSPACE. scanpy.pl.MatrixPlot.DEFAULT_WSPACE#. MatrixPlot.DEFAULT_WSPACE = 0[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX. next; scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES. Contents; . MatrixPlot.DEFAULT_WSPACE. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:7189,Performance,cache,cachedir,7189,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:8430,Security,hash,hashsolo,8430,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_WSPACE. Contents . MatrixPlot.DEFAULT_WSPACE. scanpy.pl.MatrixPlot.DEFAULT_WSPACE#. MatrixPlot.DEFAULT_WSPACE = 0[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_SAV,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:7457,Testability,log,logfile,7457,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:7496,Testability,log,logpath,7496,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:7802,Testability,log,logging,7802,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:7831,Testability,log,logging,7831, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:8105,Deployability,toggle,toggleswitch,8105,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:9189,Deployability,release,release,9189,"npyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.getdoc. Contents . MatrixPlot.getdoc(). scanpy.pl.MatrixPlot.getdoc#. MatrixPlot.getdoc() â str | None[source]#. previous; scanpy.pl.MatrixPlot.get_axes. next; scanpy.pl.MatrixPlot.legend. Contents; . MatrixPlot.getdoc(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:7181,Performance,cache,cachedir,7181,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:8422,Security,hash,hashsolo,8422,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.getdoc. Contents . MatrixPlot.getdoc(). scanpy.pl.MatrixPlot.getdoc#. MatrixPlot.getdoc() â str | None[source]#. previous; scanpy.pl.MatrixPlot.get_axes. next; scanpy.pl.Matr,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:7449,Testability,log,logfile,7449,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:7488,Testability,log,logpath,7488,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:7794,Testability,log,logging,7794,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:7823,Testability,log,logging,7823, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:8107,Deployability,toggle,toggleswitch,8107,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:9191,Deployability,release,release,9191,"ings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.get_axes. Contents . MatrixPlot.get_axes(). scanpy.pl.MatrixPlot.get_axes#. MatrixPlot.get_axes()[source]#. Return type:; dict[str, Axes]. previous; scanpy.pl.MatrixPlot.add_totals. next; scanpy.pl.MatrixPlot.getdoc. Contents; . MatrixPlot.get_axes(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:7183,Performance,cache,cachedir,7183,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:8424,Security,hash,hashsolo,8424,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.get_axes. Contents . MatrixPlot.get_axes(). scanpy.pl.MatrixPlot.get_axes#. MatrixPlot.get_axes()[source]#. Return type:; dict[str, Axes]. previous; scanpy.pl.MatrixPlot.add_",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:7451,Testability,log,logfile,7451,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:7490,Testability,log,logpath,7490,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:7796,Testability,log,logging,7796,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:7825,Testability,log,logging,7825, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:8098,Deployability,toggle,toggleswitch,8098,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:9182,Deployability,release,release,9182,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot. Contents . MatrixPlot. scanpy.pl.MatrixPlot#. class scanpy.pl.MatrixPlot(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, values_df=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Allows the visualization of values using a color map. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are use",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:10149,Integrability,depend,depending,10149,"; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot. Contents . MatrixPlot. scanpy.pl.MatrixPlot#. class scanpy.pl.MatrixPlot(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, values_df=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Allows the visualization of values using a color map. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are used for the grouping; of var names depending on the plot. When var_names is a mapping,; then the var_group_labels and var_group_positions are set. groupby str | Sequence[str]The key of the observation grouping to consider. use_raw bool | None (default: None)Use raw attribute of adata if present. log bool (default: False)Plot on logarithmic axis. num_categories int (default: 7)Only used if groupby observation is not categorical. This value; determines the number of groups into which the groupby observation; should be subdivided. categories_order Sequence[str] | None (default: None)Order in which to show the categories. Note: add_dendrogram or add_totals; can change the categories order. figsize tuple[float, float] | None (default: None)Figure size when multi_panel=True.; Otherwise the rcParam['figure.figsize] value is used.; Format is (width, height). dendrogramIf True or a valid dendrogram key, a dendrogram based on the hierarchical; clustering between the groupby categories is added.; The",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:13045,Modifiability,variab,variable,13045,"ne (default: None)Labels for each of the var_group_positions that want to be highlighted. var_group_rotation float | None (default: None)Label rotation degrees.; By default, labels larger than 4 characters are rotated 90 degrees. layer str | None (default: None)Name of the AnnData object layer that wants to be plotted. By default adata.raw.X is plotted.; If use_raw=False is set, then adata.X is plotted. If layer is set to a valid layer name,; then the layer is plotted. layer takes precedence over use_raw. title str | None (default: None)Title for the figure. expression_cutoffExpression cutoff that is used for binarizing the gene expression and; determining the fraction of cells expressing given genes. A gene is; expressed only if the expression value is greater than this threshold. mean_only_expressedIf True, gene expression is averaged only over the cells; expressing the given genes. standard_scale Literal['var', 'group'] (default: None)Whether or not to standardize that dimension between 0 and 1,; meaning for each variable or group,; subtract the minimum and divide each by its maximum. values_df DataFrame | None (default: None)Optionally, a dataframe with the values to plot can be given. The; index should be the grouby categories and the columns the genes names. kwdsAre passed to matplotlib.pyplot.scatter(). See also. matrixplot()Simpler way to call MatrixPlot but with less options. rank_genes_groups_matrixplot()to plot marker genes identified using the rank_genes_groups() function. Examples; Simple visualization of the average expression of a few genes grouped by; the category âbulk_labelsâ.; import scanpy as sc; adata = sc.datasets.pbmc68k_reduced(); markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; sc.pl.MatrixPlot(adata, markers, groupby='bulk_labels').show(). Same visualization but passing var_names as dict, which adds a grouping of; the genes on top of the image:; markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; sc.pl.MatrixPlot(",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:7174,Performance,cache,cachedir,7174,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:8415,Security,hash,hashsolo,8415,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot. Contents . MatrixPlot. scanpy.pl.MatrixPlot#. class scanpy.pl.MatrixPlot(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, titl",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:7442,Testability,log,logfile,7442,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:7481,Testability,log,logpath,7481,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:7787,Testability,log,logging,7787,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:7816,Testability,log,logging,7816, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:9368,Testability,log,log,9368,"anpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot. Contents . MatrixPlot. scanpy.pl.MatrixPlot#. class scanpy.pl.MatrixPlot(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, values_df=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Allows the visualization of values using a color map. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are used for the grouping; of var names depending on the plot. When var_names is a mapping,; then the var_group_labels and var_group_positions are set. groupby str | Sequence[str]The key of the observation grouping to consider. use_raw bool | None (default: None)Use raw attribute of adata if present. log bool (default: False)Plot on logarithmic axis. num_categories int (default: 7)Only used if groupby ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:10411,Testability,log,log,10411,"size=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, values_df=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Allows the visualization of values using a color map. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are used for the grouping; of var names depending on the plot. When var_names is a mapping,; then the var_group_labels and var_group_positions are set. groupby str | Sequence[str]The key of the observation grouping to consider. use_raw bool | None (default: None)Use raw attribute of adata if present. log bool (default: False)Plot on logarithmic axis. num_categories int (default: 7)Only used if groupby observation is not categorical. This value; determines the number of groups into which the groupby observation; should be subdivided. categories_order Sequence[str] | None (default: None)Order in which to show the categories. Note: add_dendrogram or add_totals; can change the categories order. figsize tuple[float, float] | None (default: None)Figure size when multi_panel=True.; Otherwise the rcParam['figure.figsize] value is used.; Format is (width, height). dendrogramIf True or a valid dendrogram key, a dendrogram based on the hierarchical; clustering between the groupby categories is added.; The dendrogram information is computed using scanpy.tl.dendrogram().; If tl.dendrogram has not been called previously the function is called; with default parameters. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols.; By default var_names refer to the index column of the .var",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:10444,Testability,log,logarithmic,10444,"size=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, values_df=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Allows the visualization of values using a color map. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are used for the grouping; of var names depending on the plot. When var_names is a mapping,; then the var_group_labels and var_group_positions are set. groupby str | Sequence[str]The key of the observation grouping to consider. use_raw bool | None (default: None)Use raw attribute of adata if present. log bool (default: False)Plot on logarithmic axis. num_categories int (default: 7)Only used if groupby observation is not categorical. This value; determines the number of groups into which the groupby observation; should be subdivided. categories_order Sequence[str] | None (default: None)Order in which to show the categories. Note: add_dendrogram or add_totals; can change the categories order. figsize tuple[float, float] | None (default: None)Figure size when multi_panel=True.; Otherwise the rcParam['figure.figsize] value is used.; Format is (width, height). dendrogramIf True or a valid dendrogram key, a dendrogram based on the hierarchical; clustering between the groupby categories is added.; The dendrogram information is computed using scanpy.tl.dendrogram().; If tl.dendrogram has not been called previously the function is called; with default parameters. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols.; By default var_names refer to the index column of the .var",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:8105,Deployability,toggle,toggleswitch,8105,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:9189,Deployability,release,release,9189,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.legend. Contents . MatrixPlot.legend(). scanpy.pl.MatrixPlot.legend#. MatrixPlot.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure legend parameters. Parameters:. show bool | None (default: True)Set to âFalseâ to hide the default plot of the legend. This sets the; legend width to zero which will result in a wider main plot. title str | None (default: 'Expression\\nlevel in group')Legend title. Appears on top of the color bar. Use â\nâ to add line breaks. width float | None (default: 1.5)Width of the legend. The unit is the same as in matplotlib (inches). Return type:; Self. Returns:; Returns self for method chaining. Examples; Set legend title:; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> dp = sc.pl._baseplot_class.Ba",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:7181,Performance,cache,cachedir,7181,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:8422,Security,hash,hashsolo,8422,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.legend. Contents . MatrixPlot.legend(). scanpy.pl.MatrixPlot.legend#. MatrixPlot.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure lege",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:7449,Testability,log,logfile,7449,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:7488,Testability,log,logpath,7488,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:7794,Testability,log,logging,7794,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:7823,Testability,log,logging,7823, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:10191,Testability,log,log,10191,"scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.legend. Contents . MatrixPlot.legend(). scanpy.pl.MatrixPlot.legend#. MatrixPlot.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure legend parameters. Parameters:. show bool | None (default: True)Set to âFalseâ to hide the default plot of the legend. This sets the; legend width to zero which will result in a wider main plot. title str | None (default: 'Expression\\nlevel in group')Legend title. Appears on top of the color bar. Use â\nâ to add line breaks. width float | None (default: 1.5)Width of the legend. The unit is the same as in matplotlib (inches). Return type:; Self. Returns:; Returns self for method chaining. Examples; Set legend title:; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> dp = sc.pl._baseplot_class.BasePlot(adata, markers, groupby='bulk_labels') \; ... .legend(title='log(UMI counts + 1)'); >>> dp.color_legend_title; 'log(UMI counts + 1)'. previous; scanpy.pl.MatrixPlot.getdoc. next; scanpy.pl.MatrixPlot.make_figure. Contents; . MatrixPlot.legend(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:10242,Testability,log,log,10242,"scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.legend. Contents . MatrixPlot.legend(). scanpy.pl.MatrixPlot.legend#. MatrixPlot.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure legend parameters. Parameters:. show bool | None (default: True)Set to âFalseâ to hide the default plot of the legend. This sets the; legend width to zero which will result in a wider main plot. title str | None (default: 'Expression\\nlevel in group')Legend title. Appears on top of the color bar. Use â\nâ to add line breaks. width float | None (default: 1.5)Width of the legend. The unit is the same as in matplotlib (inches). Return type:; Self. Returns:; Returns self for method chaining. Examples; Set legend title:; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> dp = sc.pl._baseplot_class.BasePlot(adata, markers, groupby='bulk_labels') \; ... .legend(title='log(UMI counts + 1)'); >>> dp.color_legend_title; 'log(UMI counts + 1)'. previous; scanpy.pl.MatrixPlot.getdoc. next; scanpy.pl.MatrixPlot.make_figure. Contents; . MatrixPlot.legend(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:8110,Deployability,toggle,toggleswitch,8110,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:9194,Deployability,release,release,9194,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.make_figure. Contents . MatrixPlot.make_figure(). scanpy.pl.MatrixPlot.make_figure#. MatrixPlot.make_figure()[source]#; Renders the image but does not call matplotlib.pyplot.show(). Useful; when several plots are put together into one figure. See also; show(): Renders and shows the plot.; savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> import matplotlib.pyplot as plt; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; >>> fig, (ax0, ax1) = plt.subplots(1, 2); >>> sc.pl.MatrixPlot(adata, markers, groupby='bulk_labels', ax=ax0) \; ... .style(cmap='Blues', edge_color='none').make_figure(); >>> sc.pl.DotPlot(adata, markers, groupby='bulk_labels', ax=ax1).make_figure(). previous; scanpy.pl.MatrixPlot.legend. next; scanpy.pl.MatrixPlot.savefig. Contents; . MatrixPlot.make_figure(). By S",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:7186,Performance,cache,cachedir,7186,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:8427,Security,hash,hashsolo,8427,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.make_figure. Contents . MatrixPlot.make_figure(). scanpy.pl.MatrixPlot.make_figure#. MatrixPlot.make_figure()[source]#; Renders the image but does not call matplotlib.pyplot.,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:7454,Testability,log,logfile,7454,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:7493,Testability,log,logpath,7493,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:7799,Testability,log,logging,7799,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:7828,Testability,log,logging,7828, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:8117,Deployability,toggle,toggleswitch,8117,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:9201,Deployability,release,release,9201,"npy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES. Contents . MatrixPlot.MAX_NUM_CATEGORIES. scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES#. MatrixPlot.MAX_NUM_CATEGORIES = 500[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_WSPACE. next; scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT. Contents; . MatrixPlot.MAX_NUM_CATEGORIES. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:7193,Performance,cache,cachedir,7193,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:8434,Security,hash,hashsolo,8434,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES. Contents . MatrixPlot.MAX_NUM_CATEGORIES. scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES#. MatrixPlot.MAX_NUM_CATEGORIES = 500[source]#. previous; scanpy.pl.Matr,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:7461,Testability,log,logfile,7461,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:7500,Testability,log,logpath,7500,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:7806,Testability,log,logging,7806,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:7835,Testability,log,logging,7835, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:8116,Deployability,toggle,toggleswitch,8116,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:9200,Deployability,release,release,9200," scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT. Contents . MatrixPlot.MIN_FIGURE_HEIGHT. scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT#. MatrixPlot.MIN_FIGURE_HEIGHT = 2.5[source]#. previous; scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES. next; scanpy.pl.MatrixPlot.add_dendrogram. Contents; . MatrixPlot.MIN_FIGURE_HEIGHT. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:7192,Performance,cache,cachedir,7192,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:8433,Security,hash,hashsolo,8433,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT. Contents . MatrixPlot.MIN_FIGURE_HEIGHT. scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT#. MatrixPlot.MIN_FIGURE_HEIGHT = 2.5[source]#. previous; scanpy.pl.MatrixPl,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:7460,Testability,log,logfile,7460,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:7499,Testability,log,logpath,7499,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:7805,Testability,log,logging,7805,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:7834,Testability,log,logging,7834, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:8106,Deployability,toggle,toggleswitch,8106,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:9190,Deployability,release,release,9190,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.savefig. Contents . MatrixPlot.savefig(). scanpy.pl.MatrixPlot.savefig#. MatrixPlot.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current figure. Parameters:. filename strFigure filename. Figure format is taken from the file ending unless; the parameter format is given. bbox_inches str | None (default: 'tight')By default is set to âtightâ to avoid cropping of the legends. kwargsPassed to matplotlib.pyplot.savefig(). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); show(): Renders and shows the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(; ... adata, markers, groupby=""bulk_labels""; ... ).savefig(""plot.pdf""). previous; scanpy.pl.MatrixPlot.make_figure. next; scanpy.",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:7182,Performance,cache,cachedir,7182,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:9624,Safety,avoid,avoid,9624,"sing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.savefig. Contents . MatrixPlot.savefig(). scanpy.pl.MatrixPlot.savefig#. MatrixPlot.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current figure. Parameters:. filename strFigure filename. Figure format is taken from the file ending unless; the parameter format is given. bbox_inches str | None (default: 'tight')By default is set to âtightâ to avoid cropping of the legends. kwargsPassed to matplotlib.pyplot.savefig(). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); show(): Renders and shows the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(; ... adata, markers, groupby=""bulk_labels""; ... ).savefig(""plot.pdf""). previous; scanpy.pl.MatrixPlot.make_figure. next; scanpy.pl.MatrixPlot.show. Contents; . MatrixPlot.savefig(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:8423,Security,hash,hashsolo,8423,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.savefig. Contents . MatrixPlot.savefig(). scanpy.pl.MatrixPlot.savefig#. MatrixPlot.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current figure. Parame",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:7450,Testability,log,logfile,7450,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:7489,Testability,log,logpath,7489,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:7795,Testability,log,logging,7795,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:7824,Testability,log,logging,7824, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:8103,Deployability,toggle,toggleswitch,8103,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:9187,Deployability,release,release,9187,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.show. Contents . MatrixPlot.show(). scanpy.pl.MatrixPlot.show#. MatrixPlot.show(return_axes=None)[source]#; Show the figure. Parameters:. return_axes bool | None (default: None)If true return a dictionary with the figure axes. When return_axes is true; then matplotlib.pyplot.show() is not called. Return type:; dict[str, Axes] | None. Returns:; If return_axes=True: Dict of matplotlib.axes.Axes. The dict key; indicates the type of ax (eg. mainplot_ax). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(adata, markers, groupby=""bulk_labels"").show(). previous; scanpy.pl.MatrixPlot.savefig. next; scanpy.pl.MatrixPlot.style. Cont",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:7179,Performance,cache,cachedir,7179,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:8420,Security,hash,hashsolo,8420,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.show. Contents . MatrixPlot.show(). scanpy.pl.MatrixPlot.show#. MatrixPlot.show(return_axes=None)[source]#; Show the figure. Parameters:. return_axes bool | None (default: No,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:7447,Testability,log,logfile,7447,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:7486,Testability,log,logpath,7486,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:7792,Testability,log,logging,7792,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:7821,Testability,log,logging,7821, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:8104,Deployability,toggle,toggleswitch,8104,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:9188,Deployability,release,release,9188,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.style. Contents . MatrixPlot.style(). scanpy.pl.MatrixPlot.style#. MatrixPlot.style(cmap='viridis', edge_color='gray', edge_lw=0.1)[source]#; Modifies plot visual parameters. Parameters:. cmap str (default: 'viridis')String denoting matplotlib color map. edge_color Union[str, tuple[float, ...], None] (default: 'gray')Edge color between the squares of matrix plot. Default is gray. edge_lw float | None (default: 0.1)Edge line width. Return type:; Self. Returns:; MatrixPlot. Examples; import scanpy as sc. adata = sc.datasets.pbmc68k_reduced(); markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']. Change color map and turn off edges:; (; sc.pl.MatrixPlot(adata, markers, groupby='bulk_labels'); .style(cmap='Blues', edge_color='none'); .show(); ). previous; scanpy.pl.MatrixPlot.show. next; scanpy.pl.MatrixPlot.swap_axes. Contents; . MatrixPlot.style(). ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:7180,Performance,cache,cachedir,7180,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:8421,Security,hash,hashsolo,8421,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.style. Contents . MatrixPlot.style(). scanpy.pl.MatrixPlot.style#. MatrixPlot.style(cmap='viridis', edge_color='gray', edge_lw=0.1)[source]#; Modifies plot visual parameters.",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:7448,Testability,log,logfile,7448,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:7487,Testability,log,logpath,7487,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:7793,Testability,log,logging,7793,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:7822,Testability,log,logging,7822, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:8108,Deployability,toggle,toggleswitch,8108,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:9192,Deployability,release,release,9192,".datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.swap_axes. Contents . MatrixPlot.swap_axes(). scanpy.pl.MatrixPlot.swap_axes#. MatrixPlot.swap_axes(*, swap_axes=True)[source]#; Plots a transposed image.; By default, the x axis contains var_names (e.g. genes) and the y; axis the groupby categories. By setting swap_axes then x are; the groupby categories and y the var_names. Parameters:. swap_axes bool | None (default: True)Boolean to turn on (True) or off (False) âswap_axesâ. Default True. Return type:; Self. Returns:; Returns self for method chaining. previous; scanpy.pl.MatrixPlot.style. next; scanpy.pl.StackedViolin. Contents; . MatrixPlot.swap_axes(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:7184,Performance,cache,cachedir,7184,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:8425,Security,hash,hashsolo,8425,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.swap_axes. Contents . MatrixPlot.swap_axes(). scanpy.pl.MatrixPlot.swap_axes#. MatrixPlot.swap_axes(*, swap_axes=True)[source]#; Plots a transposed image.; By default, the x ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:7452,Testability,log,logfile,7452,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:7491,Testability,log,logpath,7491,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:7797,Testability,log,logging,7797,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:7826,Testability,log,logging,7826, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:8116,Deployability,toggle,toggleswitch,8116,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:9200,Deployability,release,release,9200,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.add_dendrogram. Contents . StackedViolin.add_dendrogram(). scanpy.pl.StackedViolin.add_dendrogram#. StackedViolin.add_dendrogram(*, show=True, dendrogram_key=None, size=0.8)[source]#; Show dendrogram based on the hierarchical clustering between the groupby; categories. Categories are reordered to match the dendrogram order.; The dendrogram information is computed using scanpy.tl.dendrogram().; If sc.tl.dendrogram has not been called previously the function is called; with default parameters.; The dendrogram is by default shown on the right side of the plot or on top; if the axes are swapped. var_names are reordered to produce a more pleasing output if:; The data contains var_groups; the var_groups match the categories. The previous conditions happen by default when using Plot; to show the results from rank_genes_groups() (aka gene markers), by; callin",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:7192,Performance,cache,cachedir,7192,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:8433,Security,hash,hashsolo,8433,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.add_dendrogram. Contents . StackedViolin.add_dendrogram(). scanpy.pl.StackedViolin.add_dendrogram#. StackedViolin.add_dendrogram(*, show=True, dendrogram_key=None, size=0.",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:7460,Testability,log,logfile,7460,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:7499,Testability,log,logpath,7499,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:7805,Testability,log,logging,7805,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:7834,Testability,log,logging,7834, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:8112,Deployability,toggle,toggleswitch,8112,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:9196,Deployability,release,release,9196,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.add_totals. Contents . StackedViolin.add_totals(). scanpy.pl.StackedViolin.add_totals#. StackedViolin.add_totals(*, show=True, sort=None, size=0.8, color=None)[source]#; Show barplot for the number of cells in in groupby category.; The barplot is by default shown on the right side of the plot or on top; if the axes are swapped. Parameters:. show bool | None (default: True)Boolean to turn on (True) or off (False) âadd_totalsâ. sort Optional[Literal['ascending', 'descending']] (default: None)Set to either âascendingâ or âdescendingâ to reorder the categories; by cell number. size float | None (default: 0.8)size of the barplot. Corresponds to width when shown on; the right of the plot, or height when shown on top. The unit is the same; as in matplotlib (inches). color Union[str, tuple[float, ...], Sequence[Union[str, tuple[float, ...]]], None] (default: ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:7188,Performance,cache,cachedir,7188,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:8429,Security,hash,hashsolo,8429,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.add_totals. Contents . StackedViolin.add_totals(). scanpy.pl.StackedViolin.add_totals#. StackedViolin.add_totals(*, show=True, sort=None, size=0.8, color=None)[source]#; S",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:7456,Testability,log,logfile,7456,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:7495,Testability,log,logpath,7495,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:7801,Testability,log,logging,7801,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:7830,Testability,log,logging,7830, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:8125,Deployability,toggle,toggleswitch,8125,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:9209,Deployability,release,release,9209," scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT. Contents . StackedViolin.DEFAULT_CATEGORY_HEIGHT. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT#. StackedViolin.DEFAULT_CATEGORY_HEIGHT = 0.35[source]#. previous; scanpy.pl.StackedViolin. next; scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH. Contents; . StackedViolin.DEFAULT_CATEGORY_HEIGHT. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:7201,Performance,cache,cachedir,7201,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:8442,Security,hash,hashsolo,8442,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT. Contents . StackedViolin.DEFAULT_CATEGORY_HEIGHT. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT#. StackedViolin.DEFAULT_CATEGORY_HEIGHT = 0.35[s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:7469,Testability,log,logfile,7469,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:7508,Testability,log,logpath,7508,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:7814,Testability,log,logging,7814,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:7843,Testability,log,logging,7843, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:8124,Deployability,toggle,toggleswitch,8124,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:9208,Deployability,release,release,9208,"ings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH. Contents . StackedViolin.DEFAULT_CATEGORY_WIDTH. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH#. StackedViolin.DEFAULT_CATEGORY_WIDTH = 0.37[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT. next; scanpy.pl.StackedViolin.DEFAULT_COLORMAP. Contents; . StackedViolin.DEFAULT_CATEGORY_WIDTH. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:7200,Performance,cache,cachedir,7200,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:8441,Security,hash,hashsolo,8441,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH. Contents . StackedViolin.DEFAULT_CATEGORY_WIDTH. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH#. StackedViolin.DEFAULT_CATEGORY_WIDTH = 0.37[sourc,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:7468,Testability,log,logfile,7468,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:7507,Testability,log,logpath,7507,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:7813,Testability,log,logging,7813,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:7842,Testability,log,logging,7842, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:8118,Deployability,toggle,toggleswitch,8118,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:9202,Deployability,release,release,9202,"sity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_COLORMAP. Contents . StackedViolin.DEFAULT_COLORMAP. scanpy.pl.StackedViolin.DEFAULT_COLORMAP#. StackedViolin.DEFAULT_COLORMAP = 'Blues'[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH. next; scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. Contents; . StackedViolin.DEFAULT_COLORMAP. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:7194,Performance,cache,cachedir,7194,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:8435,Security,hash,hashsolo,8435,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_COLORMAP. Contents . StackedViolin.DEFAULT_COLORMAP. scanpy.pl.StackedViolin.DEFAULT_COLORMAP#. StackedViolin.DEFAULT_COLORMAP = 'Blues'[source]#. previous; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:7462,Testability,log,logfile,7462,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:7501,Testability,log,logpath,7501,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:7807,Testability,log,logging,7807,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:7836,Testability,log,logging,7836, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:8128,Deployability,toggle,toggleswitch,8128,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:9212,Deployability,release,release,9212,"y._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. Contents . StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE#. StackedViolin.DEFAULT_COLOR_LEGEND_TITLE = 'Median expression\nin group'[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_COLORMAP. next; scanpy.pl.StackedViolin.DEFAULT_CUT. Contents; . StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:7204,Performance,cache,cachedir,7204,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:8445,Security,hash,hashsolo,8445,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. Contents . StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE#. StackedViolin.DEFAULT_COLOR_LEGEND_TI,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:7472,Testability,log,logfile,7472,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:7511,Testability,log,logpath,7511,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:7817,Testability,log,logging,7817,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:7846,Testability,log,logging,7846, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:8113,Deployability,toggle,toggleswitch,8113,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:9197,Deployability,release,release,9197,"anpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CUT. Contents . StackedViolin.DEFAULT_CUT. scanpy.pl.StackedViolin.DEFAULT_CUT#. StackedViolin.DEFAULT_CUT = 0[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. next; scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM. Contents; . StackedViolin.DEFAULT_CUT. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:7189,Performance,cache,cachedir,7189,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:8430,Security,hash,hashsolo,8430,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CUT. Contents . StackedViolin.DEFAULT_CUT. scanpy.pl.StackedViolin.DEFAULT_CUT#. StackedViolin.DEFAULT_CUT = 0[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:7457,Testability,log,logfile,7457,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:7496,Testability,log,logpath,7496,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:7802,Testability,log,logging,7802,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:7831,Testability,log,logging,7831, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:8122,Deployability,toggle,toggleswitch,8122,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:9206,Deployability,release,release,9206,"nfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM. Contents . StackedViolin.DEFAULT_DENSITY_NORM. scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM#. StackedViolin.DEFAULT_DENSITY_NORM: Literal['area', 'count', 'width'] = 'width'[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_CUT. next; scanpy.pl.StackedViolin.DEFAULT_INNER. Contents; . StackedViolin.DEFAULT_DENSITY_NORM. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:7198,Performance,cache,cachedir,7198,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:8439,Security,hash,hashsolo,8439,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM. Contents . StackedViolin.DEFAULT_DENSITY_NORM. scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM#. StackedViolin.DEFAULT_DENSITY_NORM: Literal['area', 'co",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:7466,Testability,log,logfile,7466,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:7505,Testability,log,logpath,7505,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:7811,Testability,log,logging,7811,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:7840,Testability,log,logging,7840, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:8115,Deployability,toggle,toggleswitch,8115,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:9199,Deployability,release,release,9199,"npy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_INNER. Contents . StackedViolin.DEFAULT_INNER. scanpy.pl.StackedViolin.DEFAULT_INNER#. StackedViolin.DEFAULT_INNER = None[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM. next; scanpy.pl.StackedViolin.DEFAULT_JITTER. Contents; . StackedViolin.DEFAULT_INNER. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:7191,Performance,cache,cachedir,7191,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:8432,Security,hash,hashsolo,8432,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_INNER. Contents . StackedViolin.DEFAULT_INNER. scanpy.pl.StackedViolin.DEFAULT_INNER#. StackedViolin.DEFAULT_INNER = None[source]#. previous; scanpy.pl.StackedViol,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:7459,Testability,log,logfile,7459,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:7498,Testability,log,logpath,7498,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:7804,Testability,log,logging,7804,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:7833,Testability,log,logging,7833, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:8116,Deployability,toggle,toggleswitch,8116,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:9200,Deployability,release,release,9200,"_settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_JITTER. Contents . StackedViolin.DEFAULT_JITTER. scanpy.pl.StackedViolin.DEFAULT_JITTER#. StackedViolin.DEFAULT_JITTER = False[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_INNER. next; scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE. Contents; . StackedViolin.DEFAULT_JITTER. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:7192,Performance,cache,cachedir,7192,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:8433,Security,hash,hashsolo,8433,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_JITTER. Contents . StackedViolin.DEFAULT_JITTER. scanpy.pl.StackedViolin.DEFAULT_JITTER#. StackedViolin.DEFAULT_JITTER = False[source]#. previous; scanpy.pl.Stacke,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:7460,Testability,log,logfile,7460,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:7499,Testability,log,logpath,7499,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:7805,Testability,log,logging,7805,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:7834,Testability,log,logging,7834, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:8121,Deployability,toggle,toggleswitch,8121,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:9205,Deployability,release,release,9205,"erbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE. Contents . StackedViolin.DEFAULT_JITTER_SIZE. scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE#. StackedViolin.DEFAULT_JITTER_SIZE = 1[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_JITTER. next; scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH. Contents; . StackedViolin.DEFAULT_JITTER_SIZE. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:7197,Performance,cache,cachedir,7197,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:8438,Security,hash,hashsolo,8438,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE. Contents . StackedViolin.DEFAULT_JITTER_SIZE. scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE#. StackedViolin.DEFAULT_JITTER_SIZE = 1[source]#. previous; ,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:7465,Testability,log,logfile,7465,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:7504,Testability,log,logpath,7504,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:7810,Testability,log,logging,7810,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:7839,Testability,log,logging,7839, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:8123,Deployability,toggle,toggleswitch,8123,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:9207,Deployability,release,release,9207,"py._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH. Contents . StackedViolin.DEFAULT_LEGENDS_WIDTH. scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH#. StackedViolin.DEFAULT_LEGENDS_WIDTH = 1.5[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE. next; scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH. Contents; . StackedViolin.DEFAULT_LEGENDS_WIDTH. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:7199,Performance,cache,cachedir,7199,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:8440,Security,hash,hashsolo,8440,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH. Contents . StackedViolin.DEFAULT_LEGENDS_WIDTH. scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH#. StackedViolin.DEFAULT_LEGENDS_WIDTH = 1.5[source]#. ,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:7467,Testability,log,logfile,7467,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:7506,Testability,log,logpath,7506,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:7812,Testability,log,logging,7812,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:7841,Testability,log,logging,7841, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:8120,Deployability,toggle,toggleswitch,8120,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:9204,Deployability,release,release,9204,"ity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH. Contents . StackedViolin.DEFAULT_LINE_WIDTH. scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH#. StackedViolin.DEFAULT_LINE_WIDTH = 0.2[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH. next; scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING. Contents; . StackedViolin.DEFAULT_LINE_WIDTH. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:7196,Performance,cache,cachedir,7196,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:8437,Security,hash,hashsolo,8437,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH. Contents . StackedViolin.DEFAULT_LINE_WIDTH. scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH#. StackedViolin.DEFAULT_LINE_WIDTH = 0.2[source]#. previous; sc,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:7464,Testability,log,logfile,7464,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:7503,Testability,log,logpath,7503,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:7809,Testability,log,logging,7809,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:7838,Testability,log,logging,7838, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:8124,Deployability,toggle,toggleswitch,8124,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:9208,Deployability,release,release,9208,"gs.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING. Contents . StackedViolin.DEFAULT_PLOT_X_PADDING. scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING#. StackedViolin.DEFAULT_PLOT_X_PADDING = 0.5[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH. next; scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS. Contents; . StackedViolin.DEFAULT_PLOT_X_PADDING. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:7200,Performance,cache,cachedir,7200,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:8441,Security,hash,hashsolo,8441,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING. Contents . StackedViolin.DEFAULT_PLOT_X_PADDING. scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING#. StackedViolin.DEFAULT_PLOT_X_PADDING = 0.5[source,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:7468,Testability,log,logfile,7468,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:7507,Testability,log,logpath,7507,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:7813,Testability,log,logging,7813,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:7842,Testability,log,logging,7842, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:8126,Deployability,toggle,toggleswitch,8126,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:9210,Deployability,release,release,9210,"g.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS. Contents . StackedViolin.DEFAULT_PLOT_YTICKLABELS. scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS#. StackedViolin.DEFAULT_PLOT_YTICKLABELS = False[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING. next; scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING. Contents; . StackedViolin.DEFAULT_PLOT_YTICKLABELS. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:7202,Performance,cache,cachedir,7202,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:8443,Security,hash,hashsolo,8443,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS. Contents . StackedViolin.DEFAULT_PLOT_YTICKLABELS. scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS#. StackedViolin.DEFAULT_PLOT_YTICKLABELS = Fa,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:7470,Testability,log,logfile,7470,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:7509,Testability,log,logpath,7509,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:7815,Testability,log,logging,7815,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:7844,Testability,log,logging,7844, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:8124,Deployability,toggle,toggleswitch,8124,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:9208,Deployability,release,release,9208,"s.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING. Contents . StackedViolin.DEFAULT_PLOT_Y_PADDING. scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING#. StackedViolin.DEFAULT_PLOT_Y_PADDING = 0.5[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS. next; scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE. Contents; . StackedViolin.DEFAULT_PLOT_Y_PADDING. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:7200,Performance,cache,cachedir,7200,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:8441,Security,hash,hashsolo,8441,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING. Contents . StackedViolin.DEFAULT_PLOT_Y_PADDING. scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING#. StackedViolin.DEFAULT_PLOT_Y_PADDING = 0.5[source,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:7468,Testability,log,logfile,7468,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:7507,Testability,log,logpath,7507,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:7813,Testability,log,logging,7813,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:7842,Testability,log,logging,7842, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:8121,Deployability,toggle,toggleswitch,8121,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:9205,Deployability,release,release,9205," scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE. Contents . StackedViolin.DEFAULT_ROW_PALETTE. scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE#. StackedViolin.DEFAULT_ROW_PALETTE = None[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING. next; scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX. Contents; . StackedViolin.DEFAULT_ROW_PALETTE. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:7197,Performance,cache,cachedir,7197,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:8438,Security,hash,hashsolo,8438,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE. Contents . StackedViolin.DEFAULT_ROW_PALETTE. scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE#. StackedViolin.DEFAULT_ROW_PALETTE = None[source]#. previou,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:7465,Testability,log,logfile,7465,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:7504,Testability,log,logpath,7504,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:7810,Testability,log,logging,7810,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:7839,Testability,log,logging,7839, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:8121,Deployability,toggle,toggleswitch,8121,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:9205,Deployability,release,release,9205,"_settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX. Contents . StackedViolin.DEFAULT_SAVE_PREFIX. scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX#. StackedViolin.DEFAULT_SAVE_PREFIX = 'stacked_violin_'[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE. next; scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT. Contents; . StackedViolin.DEFAULT_SAVE_PREFIX. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:7197,Performance,cache,cachedir,7197,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:8438,Security,hash,hashsolo,8438,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX. Contents . StackedViolin.DEFAULT_SAVE_PREFIX. scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX#. StackedViolin.DEFAULT_SAVE_PREFIX = 'stacked_violin_'[sour,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:7465,Testability,log,logfile,7465,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:7504,Testability,log,logpath,7504,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:7810,Testability,log,logging,7810,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:7839,Testability,log,logging,7839, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:8119,Deployability,toggle,toggleswitch,8119,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:9203,Deployability,release,release,9203,"Config.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT. Contents . StackedViolin.DEFAULT_STRIPPLOT. scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT#. StackedViolin.DEFAULT_STRIPPLOT = False[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX. next; scanpy.pl.StackedViolin.DEFAULT_WSPACE. Contents; . StackedViolin.DEFAULT_STRIPPLOT. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:7195,Performance,cache,cachedir,7195,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:8436,Security,hash,hashsolo,8436,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT. Contents . StackedViolin.DEFAULT_STRIPPLOT. scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT#. StackedViolin.DEFAULT_STRIPPLOT = False[source]#. previous; scan,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:7463,Testability,log,logfile,7463,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:7502,Testability,log,logpath,7502,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:7808,Testability,log,logging,7808,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:7837,Testability,log,logging,7837, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:8116,Deployability,toggle,toggleswitch,8116,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:9200,Deployability,release,release,9200,"scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_WSPACE. Contents . StackedViolin.DEFAULT_WSPACE. scanpy.pl.StackedViolin.DEFAULT_WSPACE#. StackedViolin.DEFAULT_WSPACE = 0[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT. next; scanpy.pl.StackedViolin.DEFAULT_YLIM. Contents; . StackedViolin.DEFAULT_WSPACE. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:7192,Performance,cache,cachedir,7192,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:8433,Security,hash,hashsolo,8433,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_WSPACE. Contents . StackedViolin.DEFAULT_WSPACE. scanpy.pl.StackedViolin.DEFAULT_WSPACE#. StackedViolin.DEFAULT_WSPACE = 0[source]#. previous; scanpy.pl.StackedVio,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:7460,Testability,log,logfile,7460,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:7499,Testability,log,logpath,7499,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:7805,Testability,log,logging,7805,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:7834,Testability,log,logging,7834, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:8114,Deployability,toggle,toggleswitch,8114,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:9198,Deployability,release,release,9198,"ix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_YLIM. Contents . StackedViolin.DEFAULT_YLIM. scanpy.pl.StackedViolin.DEFAULT_YLIM#. StackedViolin.DEFAULT_YLIM = None[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_WSPACE. next; scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES. Contents; . StackedViolin.DEFAULT_YLIM. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:7190,Performance,cache,cachedir,7190,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:8431,Security,hash,hashsolo,8431,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_YLIM. Contents . StackedViolin.DEFAULT_YLIM. scanpy.pl.StackedViolin.DEFAULT_YLIM#. StackedViolin.DEFAULT_YLIM = None[source]#. previous; scanpy.pl.StackedViolin.D,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:7458,Testability,log,logfile,7458,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:7497,Testability,log,logpath,7497,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:7803,Testability,log,logging,7803,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:7832,Testability,log,logging,7832, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:8108,Deployability,toggle,toggleswitch,8108,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:9192,Deployability,release,release,9192,"npy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.getdoc. Contents . StackedViolin.getdoc(). scanpy.pl.StackedViolin.getdoc#. StackedViolin.getdoc() â str | None[source]#. previous; scanpy.pl.StackedViolin.get_axes. next; scanpy.pl.StackedViolin.legend. Contents; . StackedViolin.getdoc(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:7184,Performance,cache,cachedir,7184,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:8425,Security,hash,hashsolo,8425,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.getdoc. Contents . StackedViolin.getdoc(). scanpy.pl.StackedViolin.getdoc#. StackedViolin.getdoc() â str | None[source]#. previous; scanpy.pl.StackedViolin.get_axes. next;,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:7452,Testability,log,logfile,7452,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:7491,Testability,log,logpath,7491,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:7797,Testability,log,logging,7797,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:7826,Testability,log,logging,7826, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:8110,Deployability,toggle,toggleswitch,8110,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:9194,Deployability,release,release,9194,"t_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.get_axes. Contents . StackedViolin.get_axes(). scanpy.pl.StackedViolin.get_axes#. StackedViolin.get_axes()[source]#. Return type:; dict[str, Axes]. previous; scanpy.pl.StackedViolin.add_totals. next; scanpy.pl.StackedViolin.getdoc. Contents; . StackedViolin.get_axes(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:7186,Performance,cache,cachedir,7186,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:8427,Security,hash,hashsolo,8427,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.get_axes. Contents . StackedViolin.get_axes(). scanpy.pl.StackedViolin.get_axes#. StackedViolin.get_axes()[source]#. Return type:; dict[str, Axes]. previous; scanpy.pl.Sta",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:7454,Testability,log,logfile,7454,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:7493,Testability,log,logpath,7493,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:7799,Testability,log,logging,7799,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:7828,Testability,log,logging,7828, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:8101,Deployability,toggle,toggleswitch,8101,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:9185,Deployability,release,release,9185,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin. Contents . StackedViolin. scanpy.pl.StackedViolin#. class scanpy.pl.StackedViolin(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Stacked violin plots.; Makes a compact image composed of individual violin plots; (from violinplot()) stacked on top of each other.; Useful to visualize gene expression per cluster.; Wraps seaborn.violinplot() for AnnData. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as lab",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:10317,Integrability,depend,depending,10317,"anpy.pl.StackedViolin#. class scanpy.pl.StackedViolin(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Stacked violin plots.; Makes a compact image composed of individual violin plots; (from violinplot()) stacked on top of each other.; Useful to visualize gene expression per cluster.; Wraps seaborn.violinplot() for AnnData. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are used for the grouping; of var names depending on the plot. When var_names is a mapping,; then the var_group_labels and var_group_positions are set. groupby str | Sequence[str]The key of the observation grouping to consider. use_raw bool | None (default: None)Use raw attribute of adata if present. log bool (default: False)Plot on logarithmic axis. num_categories int (default: 7)Only used if groupby observation is not categorical. This value; determines the number of groups into which the groupby observation; should be subdivided. categories_order Sequence[str] | None (default: None)Order in which to show the categories. Note: add_dendrogram or add_totals; can change the categories order. figsize tuple[float, float] | None (default: None)Figure size when multi_panel=True.; Otherwise the rcParam['figure.figsize] value is used.; Format is (width, height). dendrogramIf True or a valid dendrogram key, a dendrogram based on the hierarchical; clustering between the groupby categories is added.; The",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:13730,Modifiability,variab,variable,13730,"str | None (default: None)Title for the figure. stripplotAdd a stripplot on top of the violin plot.; See stripplot(). jitterAdd jitter to the stripplot (only when stripplot is True); See stripplot(). sizeSize of the jitter points. orderOrder in which to show the categories. Note: if dendrogram=True; the categories order will be given by the dendrogram and order; will be ignored. density_normThe method used to scale the width of each violin.; If âwidthâ (the default), each violin will have the same width.; If âareaâ, each violin will have the same area.; If âcountâ, a violinâs width corresponds to the number of observations. row_paletteThe row palette determines the colors to use for the stacked violins.; The value should be a valid seaborn or matplotlib palette name; (see color_palette()).; Alternatively, a single color name or hex value can be passed,; e.g. 'red' or '#cc33ff'. standard_scale Optional[Literal['var', 'group']] (default: None)Whether or not to standardize a dimension between 0 and 1,; meaning for each variable or observation,; subtract the minimum and divide each by its maximum. swap_axesBy default, the x axis contains var_names (e.g. genes) and the y axis; the groupby categories. By setting swap_axes then x are the groupby; categories and y the var_names. When swapping; axes var_group_positions are no longer used. kwdsAre passed to violinplot(). See also. stacked_violin()simpler way to call StackedViolin but with less options. violin()to plot marker genes identified using rank_genes_groups(). Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; >>> sc.pl.StackedViolin(adata, markers, groupby='bulk_labels', dendrogram=True) ; <scanpy.plotting._stacked_violin.StackedViolin object at 0x...>. Using var_names as dict:; >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> sc.pl.StackedViolin(adata, markers, groupby='bulk_labels', dendrogram=True",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:7177,Performance,cache,cachedir,7177,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:8418,Security,hash,hashsolo,8418,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin. Contents . StackedViolin. scanpy.pl.StackedViolin#. class scanpy.pl.StackedViolin(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_orde",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:7445,Testability,log,logfile,7445,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:7484,Testability,log,logpath,7484,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:7790,Testability,log,logging,7790,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:7819,Testability,log,logging,7819, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:9383,Testability,log,log,9383,"l.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin. Contents . StackedViolin. scanpy.pl.StackedViolin#. class scanpy.pl.StackedViolin(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Stacked violin plots.; Makes a compact image composed of individual violin plots; (from violinplot()) stacked on top of each other.; Useful to visualize gene expression per cluster.; Wraps seaborn.violinplot() for AnnData. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are used for the grouping; of var names depending on the plot. When var_names is a mapping,; then the var_group_labels and var_group_positions are set. groupby str | Sequence[str]The key of the observation grouping to consider.",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:10579,Testability,log,log,10579,"ne, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Stacked violin plots.; Makes a compact image composed of individual violin plots; (from violinplot()) stacked on top of each other.; Useful to visualize gene expression per cluster.; Wraps seaborn.violinplot() for AnnData. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are used for the grouping; of var names depending on the plot. When var_names is a mapping,; then the var_group_labels and var_group_positions are set. groupby str | Sequence[str]The key of the observation grouping to consider. use_raw bool | None (default: None)Use raw attribute of adata if present. log bool (default: False)Plot on logarithmic axis. num_categories int (default: 7)Only used if groupby observation is not categorical. This value; determines the number of groups into which the groupby observation; should be subdivided. categories_order Sequence[str] | None (default: None)Order in which to show the categories. Note: add_dendrogram or add_totals; can change the categories order. figsize tuple[float, float] | None (default: None)Figure size when multi_panel=True.; Otherwise the rcParam['figure.figsize] value is used.; Format is (width, height). dendrogramIf True or a valid dendrogram key, a dendrogram based on the hierarchical; clustering between the groupby categories is added.; The dendrogram information is computed using scanpy.tl.dendrogram().; If tl.dendrogram has not been called previously the function is called; with default parameters. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols.; By default var_names refer to the index column of the .var",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:10612,Testability,log,logarithmic,10612,"ne, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Stacked violin plots.; Makes a compact image composed of individual violin plots; (from violinplot()) stacked on top of each other.; Useful to visualize gene expression per cluster.; Wraps seaborn.violinplot() for AnnData. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or âbracketsâ are used for the grouping; of var names depending on the plot. When var_names is a mapping,; then the var_group_labels and var_group_positions are set. groupby str | Sequence[str]The key of the observation grouping to consider. use_raw bool | None (default: None)Use raw attribute of adata if present. log bool (default: False)Plot on logarithmic axis. num_categories int (default: 7)Only used if groupby observation is not categorical. This value; determines the number of groups into which the groupby observation; should be subdivided. categories_order Sequence[str] | None (default: None)Order in which to show the categories. Note: add_dendrogram or add_totals; can change the categories order. figsize tuple[float, float] | None (default: None)Figure size when multi_panel=True.; Otherwise the rcParam['figure.figsize] value is used.; Format is (width, height). dendrogramIf True or a valid dendrogram key, a dendrogram based on the hierarchical; clustering between the groupby categories is added.; The dendrogram information is computed using scanpy.tl.dendrogram().; If tl.dendrogram has not been called previously the function is called; with default parameters. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols.; By default var_names refer to the index column of the .var",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:14108,Usability,simpl,simpler,14108,"of each violin.; If âwidthâ (the default), each violin will have the same width.; If âareaâ, each violin will have the same area.; If âcountâ, a violinâs width corresponds to the number of observations. row_paletteThe row palette determines the colors to use for the stacked violins.; The value should be a valid seaborn or matplotlib palette name; (see color_palette()).; Alternatively, a single color name or hex value can be passed,; e.g. 'red' or '#cc33ff'. standard_scale Optional[Literal['var', 'group']] (default: None)Whether or not to standardize a dimension between 0 and 1,; meaning for each variable or observation,; subtract the minimum and divide each by its maximum. swap_axesBy default, the x axis contains var_names (e.g. genes) and the y axis; the groupby categories. By setting swap_axes then x are the groupby; categories and y the var_names. When swapping; axes var_group_positions are no longer used. kwdsAre passed to violinplot(). See also. stacked_violin()simpler way to call StackedViolin but with less options. violin()to plot marker genes identified using rank_genes_groups(). Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; >>> sc.pl.StackedViolin(adata, markers, groupby='bulk_labels', dendrogram=True) ; <scanpy.plotting._stacked_violin.StackedViolin object at 0x...>. Using var_names as dict:; >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> sc.pl.StackedViolin(adata, markers, groupby='bulk_labels', dendrogram=True) ; <scanpy.plotting._stacked_violin.StackedViolin object at 0x...>. Attributes. DEFAULT_CATEGORY_HEIGHT. DEFAULT_CATEGORY_WIDTH. DEFAULT_COLORMAP. DEFAULT_COLOR_LEGEND_TITLE. DEFAULT_CUT. DEFAULT_DENSITY_NORM. DEFAULT_INNER. DEFAULT_JITTER. DEFAULT_JITTER_SIZE. DEFAULT_LEGENDS_WIDTH. DEFAULT_LINE_WIDTH. DEFAULT_PLOT_X_PADDING. DEFAULT_PLOT_YTICKLABELS. DEFAULT_PLOT_Y_PADDING. DEFAULT_ROW_PALETTE. DEFAULT_SAVE_PREFIX. DEFAULT_",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:8108,Deployability,toggle,toggleswitch,8108,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:9192,Deployability,release,release,9192,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.legend. Contents . StackedViolin.legend(). scanpy.pl.StackedViolin.legend#. StackedViolin.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure legend parameters. Parameters:. show bool | None (default: True)Set to âFalseâ to hide the default plot of the legend. This sets the; legend width to zero which will result in a wider main plot. title str | None (default: 'Expression\\nlevel in group')Legend title. Appears on top of the color bar. Use â\nâ to add line breaks. width float | None (default: 1.5)Width of the legend. The unit is the same as in matplotlib (inches). Return type:; Self. Returns:; Returns self for method chaining. Examples; Set legend title:; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> dp = sc.pl._basep",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:7184,Performance,cache,cachedir,7184,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:8425,Security,hash,hashsolo,8425,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.legend. Contents . StackedViolin.legend(). scanpy.pl.StackedViolin.legend#. StackedViolin.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Co",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:7452,Testability,log,logfile,7452,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:7491,Testability,log,logpath,7491,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:7797,Testability,log,logging,7797,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:7826,Testability,log,logging,7826, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:10206,Testability,log,log,10206,"gic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.legend. Contents . StackedViolin.legend(). scanpy.pl.StackedViolin.legend#. StackedViolin.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure legend parameters. Parameters:. show bool | None (default: True)Set to âFalseâ to hide the default plot of the legend. This sets the; legend width to zero which will result in a wider main plot. title str | None (default: 'Expression\\nlevel in group')Legend title. Appears on top of the color bar. Use â\nâ to add line breaks. width float | None (default: 1.5)Width of the legend. The unit is the same as in matplotlib (inches). Return type:; Self. Returns:; Returns self for method chaining. Examples; Set legend title:; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> dp = sc.pl._baseplot_class.BasePlot(adata, markers, groupby='bulk_labels') \; ... .legend(title='log(UMI counts + 1)'); >>> dp.color_legend_title; 'log(UMI counts + 1)'. previous; scanpy.pl.StackedViolin.getdoc. next; scanpy.pl.StackedViolin.make_figure. Contents; . StackedViolin.legend(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:10257,Testability,log,log,10257,"gic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.legend. Contents . StackedViolin.legend(). scanpy.pl.StackedViolin.legend#. StackedViolin.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure legend parameters. Parameters:. show bool | None (default: True)Set to âFalseâ to hide the default plot of the legend. This sets the; legend width to zero which will result in a wider main plot. title str | None (default: 'Expression\\nlevel in group')Legend title. Appears on top of the color bar. Use â\nâ to add line breaks. width float | None (default: 1.5)Width of the legend. The unit is the same as in matplotlib (inches). Return type:; Self. Returns:; Returns self for method chaining. Examples; Set legend title:; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> dp = sc.pl._baseplot_class.BasePlot(adata, markers, groupby='bulk_labels') \; ... .legend(title='log(UMI counts + 1)'); >>> dp.color_legend_title; 'log(UMI counts + 1)'. previous; scanpy.pl.StackedViolin.getdoc. next; scanpy.pl.StackedViolin.make_figure. Contents; . StackedViolin.legend(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:8113,Deployability,toggle,toggleswitch,8113,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:9197,Deployability,release,release,9197,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.make_figure. Contents . StackedViolin.make_figure(). scanpy.pl.StackedViolin.make_figure#. StackedViolin.make_figure()[source]#; Renders the image but does not call matplotlib.pyplot.show(). Useful; when several plots are put together into one figure. See also; show(): Renders and shows the plot.; savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> import matplotlib.pyplot as plt; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; >>> fig, (ax0, ax1) = plt.subplots(1, 2); >>> sc.pl.MatrixPlot(adata, markers, groupby='bulk_labels', ax=ax0) \; ... .style(cmap='Blues', edge_color='none').make_figure(); >>> sc.pl.DotPlot(adata, markers, groupby='bulk_labels', ax=ax1).make_figure(). previous; scanpy.pl.StackedViolin.legend. next; scanpy.pl.StackedViolin.savefig. Contents; . StackedVioli",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:7189,Performance,cache,cachedir,7189,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:8430,Security,hash,hashsolo,8430,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.make_figure. Contents . StackedViolin.make_figure(). scanpy.pl.StackedViolin.make_figure#. StackedViolin.make_figure()[source]#; Renders the image but does not call matplo,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:7457,Testability,log,logfile,7457,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:7496,Testability,log,logpath,7496,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:7802,Testability,log,logging,7802,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:7831,Testability,log,logging,7831, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:8120,Deployability,toggle,toggleswitch,8120,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:9204,Deployability,release,release,9204,"yConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES. Contents . StackedViolin.MAX_NUM_CATEGORIES. scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES#. StackedViolin.MAX_NUM_CATEGORIES = 500[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_YLIM. next; scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT. Contents; . StackedViolin.MAX_NUM_CATEGORIES. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:7196,Performance,cache,cachedir,7196,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:8437,Security,hash,hashsolo,8437,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES. Contents . StackedViolin.MAX_NUM_CATEGORIES. scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES#. StackedViolin.MAX_NUM_CATEGORIES = 500[source]#. previous; sc,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:7464,Testability,log,logfile,7464,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:7503,Testability,log,logpath,7503,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:7809,Testability,log,logging,7809,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:7838,Testability,log,logging,7838, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:8119,Deployability,toggle,toggleswitch,8119,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:9203,Deployability,release,release,9203,"npyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT. Contents . StackedViolin.MIN_FIGURE_HEIGHT. scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT#. StackedViolin.MIN_FIGURE_HEIGHT = 2.5[source]#. previous; scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES. next; scanpy.pl.StackedViolin.add_dendrogram. Contents; . StackedViolin.MIN_FIGURE_HEIGHT. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:7195,Performance,cache,cachedir,7195,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:8436,Security,hash,hashsolo,8436,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT. Contents . StackedViolin.MIN_FIGURE_HEIGHT. scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT#. StackedViolin.MIN_FIGURE_HEIGHT = 2.5[source]#. previous; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:7463,Testability,log,logfile,7463,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:7502,Testability,log,logpath,7502,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:7808,Testability,log,logging,7808,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:7837,Testability,log,logging,7837, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:8109,Deployability,toggle,toggleswitch,8109,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:9193,Deployability,release,release,9193,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.savefig. Contents . StackedViolin.savefig(). scanpy.pl.StackedViolin.savefig#. StackedViolin.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current figure. Parameters:. filename strFigure filename. Figure format is taken from the file ending unless; the parameter format is given. bbox_inches str | None (default: 'tight')By default is set to âtightâ to avoid cropping of the legends. kwargsPassed to matplotlib.pyplot.savefig(). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); show(): Renders and shows the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(; ... adata, markers, groupby=""bulk_labels""; ... ).savefig(""plot.pdf""). previous; scanpy.pl.StackedViolin.make_figure",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:7185,Performance,cache,cachedir,7185,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:9639,Safety,avoid,avoid,9639,"rnal.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.savefig. Contents . StackedViolin.savefig(). scanpy.pl.StackedViolin.savefig#. StackedViolin.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current figure. Parameters:. filename strFigure filename. Figure format is taken from the file ending unless; the parameter format is given. bbox_inches str | None (default: 'tight')By default is set to âtightâ to avoid cropping of the legends. kwargsPassed to matplotlib.pyplot.savefig(). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); show(): Renders and shows the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(; ... adata, markers, groupby=""bulk_labels""; ... ).savefig(""plot.pdf""). previous; scanpy.pl.StackedViolin.make_figure. next; scanpy.pl.StackedViolin.show. Contents; . StackedViolin.savefig(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:8426,Security,hash,hashsolo,8426,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.savefig. Contents . StackedViolin.savefig(). scanpy.pl.StackedViolin.savefig#. StackedViolin.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current fi",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:7453,Testability,log,logfile,7453,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:7492,Testability,log,logpath,7492,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:7798,Testability,log,logging,7798,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:7827,Testability,log,logging,7827, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:8106,Deployability,toggle,toggleswitch,8106,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:9190,Deployability,release,release,9190,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.show. Contents . StackedViolin.show(). scanpy.pl.StackedViolin.show#. StackedViolin.show(return_axes=None)[source]#; Show the figure. Parameters:. return_axes bool | None (default: None)If true return a dictionary with the figure axes. When return_axes is true; then matplotlib.pyplot.show() is not called. Return type:; dict[str, Axes] | None. Returns:; If return_axes=True: Dict of matplotlib.axes.Axes. The dict key; indicates the type of ax (eg. mainplot_ax). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(adata, markers, groupby=""bulk_labels"").show(). previous; scanpy.pl.StackedViolin.savefig. next; scanpy.pl.Stacked",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:7182,Performance,cache,cachedir,7182,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:8423,Security,hash,hashsolo,8423,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.show. Contents . StackedViolin.show(). scanpy.pl.StackedViolin.show#. StackedViolin.show(return_axes=None)[source]#; Show the figure. Parameters:. return_axes bool | None ,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:7450,Testability,log,logfile,7450,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:7489,Testability,log,logpath,7489,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:7795,Testability,log,logging,7795,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:7824,Testability,log,logging,7824, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:8107,Deployability,toggle,toggleswitch,8107,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:9191,Deployability,release,release,9191,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.style. Contents . StackedViolin.style(). scanpy.pl.StackedViolin.style#. StackedViolin.style(*, cmap='Blues', stripplot=False, jitter=False, jitter_size=1, linewidth=0.2, row_palette=None, density_norm='width', yticklabels=False, ylim=None, x_padding=0.5, y_padding=0.5, scale=None)[source]#; Modifies plot visual parameters. Parameters:. cmap str | None (default: 'Blues')String denoting matplotlib color map. stripplot bool | None (default: False)Add a stripplot on top of the violin plot.; See stripplot(). jitter float | bool | None (default: False)Add jitter to the stripplot (only when stripplot is True); See stripplot(). jitter_size int | None (default: 1)Size of the jitter points. linewidth float | None (default: 0.2)linewidth for the violin plots. row_palette str | None (default: None)The row palette determines the colors to use for the stacked viol",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:7183,Performance,cache,cachedir,7183,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:8424,Security,hash,hashsolo,8424,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.style. Contents . StackedViolin.style(). scanpy.pl.StackedViolin.style#. StackedViolin.style(*, cmap='Blues', stripplot=False, jitter=False, jitter_size=1, linewidth=0.2, ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:7451,Testability,log,logfile,7451,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:7490,Testability,log,logpath,7490,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:7796,Testability,log,logging,7796,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:7825,Testability,log,logging,7825, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:8111,Deployability,toggle,toggleswitch,8111,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:9195,Deployability,release,release,9195,"canpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.swap_axes. Contents . StackedViolin.swap_axes(). scanpy.pl.StackedViolin.swap_axes#. StackedViolin.swap_axes(*, swap_axes=True)[source]#; Plots a transposed image.; By default, the x axis contains var_names (e.g. genes) and the y; axis the groupby categories. By setting swap_axes then x are; the groupby categories and y the var_names. Parameters:. swap_axes bool | None (default: True)Boolean to turn on (True) or off (False) âswap_axesâ. Default True. Return type:; Self. Returns:; Returns self for method chaining. previous; scanpy.pl.StackedViolin.style. next; scanpy.pl.highest_expr_genes. Contents; . StackedViolin.swap_axes(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:7187,Performance,cache,cachedir,7187,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:8428,Security,hash,hashsolo,8428,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.swap_axes. Contents . StackedViolin.swap_axes(). scanpy.pl.StackedViolin.swap_axes#. StackedViolin.swap_axes(*, swap_axes=True)[source]#; Plots a transposed image.; By def",MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:7455,Testability,log,logfile,7455,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:7494,Testability,log,logpath,7494,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:7800,Testability,log,logging,7800,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html
https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:7829,Testability,log,logging,7829, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:8104,Deployability,toggle,toggleswitch,8104,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:9188,Deployability,release,release,9188,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.cyclone. Contents . cyclone(). scanpy.external.tl.cyclone#. scanpy.external.tl.cyclone(adata, marker_pairs=None, *, iterations=1000, min_iter=100, min_pairs=50)[source]#; Assigns scores and predicted class to observations [Scialdone et al., 2015] [Fechtner, 2018].; Calculates scores for each observation and each phase and assigns prediction; based on marker pairs indentified by sandbag().; This reproduces the approach of Scialdone et al. [2015] in the implementation of; Fechtner [2018]. Parameters:. adata AnnDataThe annotated data matrix. marker_pairs Mapping[str, Collection[tuple[str, str]]] | None (default: None)Mapping of categories to lists of marker pairs.; See sandbag() output. iterations int (default: 1000)An integer scalar specifying the number of; iterations for random sampling to obtain a cycle score. min_iter int (default: 100)An integer scalar ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:7180,Performance,cache,cachedir,7180,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:9444,Safety,predict,predicted,9444,"rnal.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.cyclone. Contents . cyclone(). scanpy.external.tl.cyclone#. scanpy.external.tl.cyclone(adata, marker_pairs=None, *, iterations=1000, min_iter=100, min_pairs=50)[source]#; Assigns scores and predicted class to observations [Scialdone et al., 2015] [Fechtner, 2018].; Calculates scores for each observation and each phase and assigns prediction; based on marker pairs indentified by sandbag().; This reproduces the approach of Scialdone et al. [2015] in the implementation of; Fechtner [2018]. Parameters:. adata AnnDataThe annotated data matrix. marker_pairs Mapping[str, Collection[tuple[str, str]]] | None (default: None)Mapping of categories to lists of marker pairs.; See sandbag() output. iterations int (default: 1000)An integer scalar specifying the number of; iterations for random sampling to obtain a cycle score. min_iter int (default: 100)An integer scalar specifying the minimum number of iterations; for score estimation. min_pairs int (default: 50)An integer scalar specifying the minimum number of pairs; for score estimation. Return type:; DataFrame. Returns:; A DataFrame with samples as index and categories as columns; with scores for each ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:9586,Safety,predict,prediction,9586,"external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.cyclone. Contents . cyclone(). scanpy.external.tl.cyclone#. scanpy.external.tl.cyclone(adata, marker_pairs=None, *, iterations=1000, min_iter=100, min_pairs=50)[source]#; Assigns scores and predicted class to observations [Scialdone et al., 2015] [Fechtner, 2018].; Calculates scores for each observation and each phase and assigns prediction; based on marker pairs indentified by sandbag().; This reproduces the approach of Scialdone et al. [2015] in the implementation of; Fechtner [2018]. Parameters:. adata AnnDataThe annotated data matrix. marker_pairs Mapping[str, Collection[tuple[str, str]]] | None (default: None)Mapping of categories to lists of marker pairs.; See sandbag() output. iterations int (default: 1000)An integer scalar specifying the number of; iterations for random sampling to obtain a cycle score. min_iter int (default: 100)An integer scalar specifying the minimum number of iterations; for score estimation. min_pairs int (default: 50)An integer scalar specifying the minimum number of pairs; for score estimation. Return type:; DataFrame. Returns:; A DataFrame with samples as index and categories as columns; with scores for each category for each sample and a additional column with; the name of the max scoring category for each sample.; If marker_pairs contains only the cell cycle categories G1,",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:8421,Security,hash,hashsolo,8421,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.cyclone. Contents . cyclone(). scanpy.external.tl.cyclone#. scanpy.external.tl.cyclone(adata, marker_pairs=None, *, iterations=1000, min_iter=100, min_pairs=50)[source]#; Assig",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:7448,Testability,log,logfile,7448,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:7487,Testability,log,logpath,7487,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:7793,Testability,log,logging,7793,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:7822,Testability,log,logging,7822, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.cyclone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:11768,Availability,avail,available,11768,"nt | None (default: 1000)Minimum number of principal components to use. Specify None to use; pre-computed components. The higher the value the better to capture 85% of the; variance. n_jobs int (default: -2)Nearest Neighbors will be computed in parallel using n_jobs. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates .obsm, .obsp and .uns with the following:. X_harmony - ndarray (obsm, dtype float)force directed layout. harmony_aff - spmatrix (obsp, dtype float)affinity matrix. harmony_aff_aug - spmatrix (obsp, dtype float)augmented affinity matrix. harmony_timepoint_var - str (uns)The name of the variable passed as tp. harmony_timepoint_connections - ndarray (uns, dtype str)The links between time points. Example; >>> from itertools import product; >>> import pandas as pd; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce. Load AnnData; A sample with real data is available here.; Random data sets of three time points with two replicates each:; >>> adata_ref = sc.datasets.pbmc3k(); >>> start = [596, 615, 1682, 1663, 1409, 1432]; >>> adata = AnnData.concatenate(; ... *(adata_ref[i : i + 1000] for i in start),; ... join=""outer"",; ... batch_key=""sample"",; ... batch_categories=[f""sa{i}_Rep{j}"" for i, j in product((1, 2, 3), (1, 2))],; ... ); >>> time_points = adata.obs[""sample""].str.split(""_"", expand=True)[0]; >>> adata.obs[""time_points""] = pd.Categorical(; ... time_points, categories=['sa1', 'sa2', 'sa3']; ... ). Normalize and filter for highly expressed genes; >>> sc.pp.normalize_total(adata, target_sum=10000); >>> sc.pp.log1p(adata); >>> sc.pp.highly_variable_genes(adata, n_top_genes=1000, subset=True). Run harmony_timeseries; >>> sce.tl.harmony_timeseries(adata, tp=""time_points"", n_components=500). Plot time points:; >>> sce.pl.harmony_timeseries(adata). For further demonstration of Harmony visualizations please follow the notebook;",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:8115,Deployability,toggle,toggleswitch,8115,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:9199,Deployability,release,release,9199,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.harmony_timeseries. Contents . harmony_timeseries(). scanpy.external.tl.harmony_timeseries#. scanpy.external.tl.harmony_timeseries(adata, tp, *, n_neighbors=30, n_components=1000, n_jobs=-2, copy=False)[source]#; Harmony time series for data visualization with augmented affinity matrix; at discrete time points [Nowotschin et al., 2019].; Harmony time series is a framework for data visualization, trajectory; detection and interpretation for scRNA-seq data measured at discrete; time points. Harmony constructs an augmented affinity matrix by augmenting; the kNN graph affinity matrix with mutually nearest neighbors between; successive time points. This augmented affinity matrix forms the basis for; generated a force directed layout for visualization and also serves as input; for computing the diffusion operator which can be used for trajectory; detection using",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:11161,Deployability,update,updates,11161,"ote; More information and bug reports here. Parameters:. adata AnnDataAnnotated data matrix of shape n_obs Ã n_vars. Rows correspond to; cells and columns to genes. Rows represent two or more time points,; where replicates of the same time point are consecutive in order. tp strkey name of observation annotation .obs representing time points. Time; points should be categorical of dtype=category. The unique categories for; the categorical will be used as the time points to construct the timepoint; connections. n_neighbors int (default: 30)Number of nearest neighbors for graph construction. n_components int | None (default: 1000)Minimum number of principal components to use. Specify None to use; pre-computed components. The higher the value the better to capture 85% of the; variance. n_jobs int (default: -2)Nearest Neighbors will be computed in parallel using n_jobs. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates .obsm, .obsp and .uns with the following:. X_harmony - ndarray (obsm, dtype float)force directed layout. harmony_aff - spmatrix (obsp, dtype float)affinity matrix. harmony_aff_aug - spmatrix (obsp, dtype float)augmented affinity matrix. harmony_timepoint_var - str (uns)The name of the variable passed as tp. harmony_timepoint_connections - ndarray (uns, dtype str)The links between time points. Example; >>> from itertools import product; >>> import pandas as pd; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce. Load AnnData; A sample with real data is available here.; Random data sets of three time points with two replicates each:; >>> adata_ref = sc.datasets.pbmc3k(); >>> start = [596, 615, 1682, 1663, 1409, 1432]; >>> adata = AnnData.concatenate(; ... *(adata_ref[i : i + 1000] for i in start),; ... join=""outer"",; ... batch_key=""sample"",; ... batch_categories=[f""sa{i}_Rep{j}"" for i, j in product((1, 2, 3), (1, 2))],; ...",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:11455,Modifiability,variab,variable,11455,"ation annotation .obs representing time points. Time; points should be categorical of dtype=category. The unique categories for; the categorical will be used as the time points to construct the timepoint; connections. n_neighbors int (default: 30)Number of nearest neighbors for graph construction. n_components int | None (default: 1000)Minimum number of principal components to use. Specify None to use; pre-computed components. The higher the value the better to capture 85% of the; variance. n_jobs int (default: -2)Nearest Neighbors will be computed in parallel using n_jobs. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates .obsm, .obsp and .uns with the following:. X_harmony - ndarray (obsm, dtype float)force directed layout. harmony_aff - spmatrix (obsp, dtype float)affinity matrix. harmony_aff_aug - spmatrix (obsp, dtype float)augmented affinity matrix. harmony_timepoint_var - str (uns)The name of the variable passed as tp. harmony_timepoint_connections - ndarray (uns, dtype str)The links between time points. Example; >>> from itertools import product; >>> import pandas as pd; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce. Load AnnData; A sample with real data is available here.; Random data sets of three time points with two replicates each:; >>> adata_ref = sc.datasets.pbmc3k(); >>> start = [596, 615, 1682, 1663, 1409, 1432]; >>> adata = AnnData.concatenate(; ... *(adata_ref[i : i + 1000] for i in start),; ... join=""outer"",; ... batch_key=""sample"",; ... batch_categories=[f""sa{i}_Rep{j}"" for i, j in product((1, 2, 3), (1, 2))],; ... ); >>> time_points = adata.obs[""sample""].str.split(""_"", expand=True)[0]; >>> adata.obs[""time_points""] = pd.Categorical(; ... time_points, categories=['sa1', 'sa2', 'sa3']; ... ). Normalize and filter for highly expressed genes; >>> sc.pp.normalize_total(adata, target_sum=10000); >>> sc.pp.log1p",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:7191,Performance,cache,cachedir,7191,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:9676,Safety,detect,detection,9676,"canpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.harmony_timeseries. Contents . harmony_timeseries(). scanpy.external.tl.harmony_timeseries#. scanpy.external.tl.harmony_timeseries(adata, tp, *, n_neighbors=30, n_components=1000, n_jobs=-2, copy=False)[source]#; Harmony time series for data visualization with augmented affinity matrix; at discrete time points [Nowotschin et al., 2019].; Harmony time series is a framework for data visualization, trajectory; detection and interpretation for scRNA-seq data measured at discrete; time points. Harmony constructs an augmented affinity matrix by augmenting; the kNN graph affinity matrix with mutually nearest neighbors between; successive time points. This augmented affinity matrix forms the basis for; generated a force directed layout for visualization and also serves as input; for computing the diffusion operator which can be used for trajectory; detection using Palantir. Note; More information and bug reports here. Parameters:. adata AnnDataAnnotated data matrix of shape n_obs Ã n_vars. Rows correspond to; cells and columns to genes. Rows represent two or more time points,; where replicates of the same time point are consecutive in order. tp strkey name of observation annotation .obs representing time points. Time; points should be categorical of dtype=category. The unique categories for; the categorical will be used as the time points to construct the timepoint; connections. n_neighbors int (defau",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:10118,Safety,detect,detection,10118,"xternal.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.harmony_timeseries. Contents . harmony_timeseries(). scanpy.external.tl.harmony_timeseries#. scanpy.external.tl.harmony_timeseries(adata, tp, *, n_neighbors=30, n_components=1000, n_jobs=-2, copy=False)[source]#; Harmony time series for data visualization with augmented affinity matrix; at discrete time points [Nowotschin et al., 2019].; Harmony time series is a framework for data visualization, trajectory; detection and interpretation for scRNA-seq data measured at discrete; time points. Harmony constructs an augmented affinity matrix by augmenting; the kNN graph affinity matrix with mutually nearest neighbors between; successive time points. This augmented affinity matrix forms the basis for; generated a force directed layout for visualization and also serves as input; for computing the diffusion operator which can be used for trajectory; detection using Palantir. Note; More information and bug reports here. Parameters:. adata AnnDataAnnotated data matrix of shape n_obs Ã n_vars. Rows correspond to; cells and columns to genes. Rows represent two or more time points,; where replicates of the same time point are consecutive in order. tp strkey name of observation annotation .obs representing time points. Time; points should be categorical of dtype=category. The unique categories for; the categorical will be used as the time points to construct the timepoint; connections. n_neighbors int (default: 30)Number of nearest neighbors for graph construction. n_components int | None (default: 1000)Minimum number of principal components to use. Specify None to use; pre-computed components. The higher the value the better to capture 85% of the; variance. n_jobs int (default: -2)Nearest Neighbors will be computed in parallel using n_jobs. copy boo",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:8432,Security,hash,hashsolo,8432,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.harmony_timeseries. Contents . harmony_timeseries(). scanpy.external.tl.harmony_timeseries#. scanpy.external.tl.harmony_timeseries(adata, tp, *, n_neighbors=30, n_components=10",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:7459,Testability,log,logfile,7459,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:7498,Testability,log,logpath,7498,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:7804,Testability,log,logging,7804,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:7833,Testability,log,logging,7833, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:12816,Usability,guid,guide,12816,"ad of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates .obsm, .obsp and .uns with the following:. X_harmony - ndarray (obsm, dtype float)force directed layout. harmony_aff - spmatrix (obsp, dtype float)affinity matrix. harmony_aff_aug - spmatrix (obsp, dtype float)augmented affinity matrix. harmony_timepoint_var - str (uns)The name of the variable passed as tp. harmony_timepoint_connections - ndarray (uns, dtype str)The links between time points. Example; >>> from itertools import product; >>> import pandas as pd; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce. Load AnnData; A sample with real data is available here.; Random data sets of three time points with two replicates each:; >>> adata_ref = sc.datasets.pbmc3k(); >>> start = [596, 615, 1682, 1663, 1409, 1432]; >>> adata = AnnData.concatenate(; ... *(adata_ref[i : i + 1000] for i in start),; ... join=""outer"",; ... batch_key=""sample"",; ... batch_categories=[f""sa{i}_Rep{j}"" for i, j in product((1, 2, 3), (1, 2))],; ... ); >>> time_points = adata.obs[""sample""].str.split(""_"", expand=True)[0]; >>> adata.obs[""time_points""] = pd.Categorical(; ... time_points, categories=['sa1', 'sa2', 'sa3']; ... ). Normalize and filter for highly expressed genes; >>> sc.pp.normalize_total(adata, target_sum=10000); >>> sc.pp.log1p(adata); >>> sc.pp.highly_variable_genes(adata, n_top_genes=1000, subset=True). Run harmony_timeseries; >>> sce.tl.harmony_timeseries(adata, tp=""time_points"", n_components=500). Plot time points:; >>> sce.pl.harmony_timeseries(adata). For further demonstration of Harmony visualizations please follow the notebook; Harmony_sample_notebook.ipynb.; It provides a comprehensive guide to draw gene expression trends,; amongst other things. previous; scanpy.external.tl.phenograph. next; scanpy.external.tl.wishbone. Contents; . harmony_timeseries(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:12050,Availability,avail,available,12050,"antir.utils.run_magic_imputation. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields:. Diffusion maps,used for magic imputation, and to generate multi-scale data matrix,. X_palantir_diff_comp - ndarray (obsm, dtype float)Array of Diffusion components. palantir_EigenValues - ndarray (uns, dtype float)Array of corresponding eigen values. palantir_diff_op - spmatrix (obsp, dtype float)The diffusion operator matrix. Multi scale space results,used to build tsne on diffusion components, and to compute branch probabilities; and waypoints,. X_palantir_multiscale - ndarray (obsm, dtype float)Multi scale data matrix. MAGIC imputation,used for plotting gene expression on tsne, and gene expression trends,. palantir_imp - ndarray (layers, dtype float)Imputed data matrix (MAGIC imputation). Example; >>> import scanpy.external as sce; >>> import scanpy as sc. A sample data is available here.; Load sample data; >>> adata = sc.read_csv(filename=""Palantir/data/marrow_sample_scseq_counts.csv.gz""). Cleanup and normalize; >>> sc.pp.filter_cells(adata, min_counts=1000); >>> sc.pp.filter_genes(adata, min_counts=10); >>> sc.pp.normalize_per_cell(adata); >>> sc.pp.log1p(adata). Data preprocessing; Palantir builds diffusion maps using one of two optional inputs:; Principal component analysis; >>> sc.pp.pca(adata, n_comps=300). or,; Nearist neighbors graph; >>> sc.pp.neighbors(adata, knn=30). Diffusion maps; Palantir determines the diffusion maps of the data as an estimate of the low; dimensional phenotypic manifold of the data.; >>> sce.tl.palantir(adata, n_components=5, knn=30). if pre-computed distances are to be used,; >>> sce.tl.palantir(; ... adata,; ... n_components=5,; ... knn=30,; ... use_adjacency_matrix=True,; ... distances_key=""distances"",; ... ). Visualizing Palantir results; tSNE visualization; important for Palantir!; Palantir constructs the tSNE map in",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:14086,Availability,down,downstream,14086,"mponent analysis; >>> sc.pp.pca(adata, n_comps=300). or,; Nearist neighbors graph; >>> sc.pp.neighbors(adata, knn=30). Diffusion maps; Palantir determines the diffusion maps of the data as an estimate of the low; dimensional phenotypic manifold of the data.; >>> sce.tl.palantir(adata, n_components=5, knn=30). if pre-computed distances are to be used,; >>> sce.tl.palantir(; ... adata,; ... n_components=5,; ... knn=30,; ... use_adjacency_matrix=True,; ... distances_key=""distances"",; ... ). Visualizing Palantir results; tSNE visualization; important for Palantir!; Palantir constructs the tSNE map in the embedded space since these maps better; represent the differentiation trajectories.; >>> sc.tl.tsne(adata, n_pcs=2, use_rep='X_palantir_multiscale', perplexity=150). tsne by cell size; >>> sc.pl.tsne(adata, color=""n_counts""). Imputed gene expression visualized on tSNE maps; >>> sc.pl.tsne(; ... adata,; ... gene_symbols=['CD34', 'MPO', 'GATA1', 'IRF8'],; ... layer='palantir_imp',; ... color=['CD34', 'MPO', 'GATA1', 'IRF8']; ... ). Running Palantir; Palantir can be run by specifying an approximate early cell. While Palantir; automatically determines the terminal states, they can also be specified using the; termine_states parameter.; >>> start_cell = 'Run5_164698952452459'; >>> pr_res = sce.tl.palantir_results(; ... adata,; ... early_cell=start_cell,; ... ms_data='X_palantir_multiscale',; ... num_waypoints=500,; ... ). Note; A start_cell must be defined for every data set. The start cell for; this dataset was chosen based on high expression of CD34. At this point the returned Palantir object pr_res can be used for all downstream; analysis and plotting. Please consult this notebook; Palantir_sample_notebook.ipynb.; It provides a comprehensive guide to draw gene expression trends, amongst other; things. previous; scanpy.external.tl.phate. next; scanpy.external.tl.trimap. Contents; . palantir(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:8105,Deployability,toggle,toggleswitch,8105,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:9189,Deployability,release,release,9189,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir. Contents . palantir(). scanpy.external.tl.palantir#. scanpy.external.tl.palantir(adata, *, n_components=10, knn=30, alpha=0, use_adjacency_matrix=False, distances_key=None, n_eigs=None, impute_data=True, n_steps=3, copy=False)[source]#; Run Diffusion maps using the adaptive anisotropic kernel [Setty et al., 2019].; Palantir is an algorithm to align cells along differentiation trajectories.; Palantir models differentiation as a stochastic process where stem cells; differentiate to terminally differentiated cells by a series of steps through; a low dimensional phenotypic manifold. Palantir effectively captures the; continuity in cell states and the stochasticity in cell fate determination.; Palantir has been designed to work with multidimensional single cell data; from diverse technologies such as Mass cytometry and single cell RNA-seq. Note; More ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:11221,Deployability,update,updates,11221,"efault: 10)Number of diffusion components. knn int (default: 30)Number of nearest neighbors for graph construction. alpha float (default: 0)Normalization parameter for the diffusion operator. use_adjacency_matrix bool (default: False)Use adaptive anisotropic adjacency matrix, instead of PCA projections; (default) to compute diffusion components. distances_key str | None (default: None)With use_adjacency_matrix=True, use the indicated distances key for .obsp.; If None, 'distances'. n_eigs int | None (default: None)Number of eigen vectors to use. If None specified, the number of eigen; vectors will be determined using eigen gap. Passed to; palantir.utils.determine_multiscale_space. impute_data bool (default: True)Impute data using MAGIC. n_steps int (default: 3)Number of steps in the diffusion operator. Passed to; palantir.utils.run_magic_imputation. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields:. Diffusion maps,used for magic imputation, and to generate multi-scale data matrix,. X_palantir_diff_comp - ndarray (obsm, dtype float)Array of Diffusion components. palantir_EigenValues - ndarray (uns, dtype float)Array of corresponding eigen values. palantir_diff_op - spmatrix (obsp, dtype float)The diffusion operator matrix. Multi scale space results,used to build tsne on diffusion components, and to compute branch probabilities; and waypoints,. X_palantir_multiscale - ndarray (obsm, dtype float)Multi scale data matrix. MAGIC imputation,used for plotting gene expression on tsne, and gene expression trends,. palantir_imp - ndarray (layers, dtype float)Imputed data matrix (MAGIC imputation). Example; >>> import scanpy.external as sce; >>> import scanpy as sc. A sample data is available here.; Load sample data; >>> adata = sc.read_csv(filename=""Palantir/data/marrow_sample_scseq_counts.csv.gz""). Cleanup and normalize; >>> sc.pp.filter_cells(adata",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:9531,Energy Efficiency,adapt,adaptive,9531,"; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir. Contents . palantir(). scanpy.external.tl.palantir#. scanpy.external.tl.palantir(adata, *, n_components=10, knn=30, alpha=0, use_adjacency_matrix=False, distances_key=None, n_eigs=None, impute_data=True, n_steps=3, copy=False)[source]#; Run Diffusion maps using the adaptive anisotropic kernel [Setty et al., 2019].; Palantir is an algorithm to align cells along differentiation trajectories.; Palantir models differentiation as a stochastic process where stem cells; differentiate to terminally differentiated cells by a series of steps through; a low dimensional phenotypic manifold. Palantir effectively captures the; continuity in cell states and the stochasticity in cell fate determination.; Palantir has been designed to work with multidimensional single cell data; from diverse technologies such as Mass cytometry and single cell RNA-seq. Note; More information and bug reports here. Parameters:. adata AnnDataAn AnnData object. n_components int (default: 10)Number of diffusion components. knn int (default: 30)Number of nearest neighbors for graph construction. alpha float (default: 0)Normalization parameter for the diffusion operator. use_adjacency_matrix bool (default: False)",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:10459,Energy Efficiency,adapt,adaptive,10459,")[source]#; Run Diffusion maps using the adaptive anisotropic kernel [Setty et al., 2019].; Palantir is an algorithm to align cells along differentiation trajectories.; Palantir models differentiation as a stochastic process where stem cells; differentiate to terminally differentiated cells by a series of steps through; a low dimensional phenotypic manifold. Palantir effectively captures the; continuity in cell states and the stochasticity in cell fate determination.; Palantir has been designed to work with multidimensional single cell data; from diverse technologies such as Mass cytometry and single cell RNA-seq. Note; More information and bug reports here. Parameters:. adata AnnDataAn AnnData object. n_components int (default: 10)Number of diffusion components. knn int (default: 30)Number of nearest neighbors for graph construction. alpha float (default: 0)Normalization parameter for the diffusion operator. use_adjacency_matrix bool (default: False)Use adaptive anisotropic adjacency matrix, instead of PCA projections; (default) to compute diffusion components. distances_key str | None (default: None)With use_adjacency_matrix=True, use the indicated distances key for .obsp.; If None, 'distances'. n_eigs int | None (default: None)Number of eigen vectors to use. If None specified, the number of eigen; vectors will be determined using eigen gap. Passed to; palantir.utils.determine_multiscale_space. impute_data bool (default: True)Impute data using MAGIC. n_steps int (default: 3)Number of steps in the diffusion operator. Passed to; palantir.utils.run_magic_imputation. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields:. Diffusion maps,used for magic imputation, and to generate multi-scale data matrix,. X_palantir_diff_comp - ndarray (obsm, dtype float)Array of Diffusion components. palantir_EigenValues - ndarray (uns, dtype float)Array of corr",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:9531,Modifiability,adapt,adaptive,9531,"; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir. Contents . palantir(). scanpy.external.tl.palantir#. scanpy.external.tl.palantir(adata, *, n_components=10, knn=30, alpha=0, use_adjacency_matrix=False, distances_key=None, n_eigs=None, impute_data=True, n_steps=3, copy=False)[source]#; Run Diffusion maps using the adaptive anisotropic kernel [Setty et al., 2019].; Palantir is an algorithm to align cells along differentiation trajectories.; Palantir models differentiation as a stochastic process where stem cells; differentiate to terminally differentiated cells by a series of steps through; a low dimensional phenotypic manifold. Palantir effectively captures the; continuity in cell states and the stochasticity in cell fate determination.; Palantir has been designed to work with multidimensional single cell data; from diverse technologies such as Mass cytometry and single cell RNA-seq. Note; More information and bug reports here. Parameters:. adata AnnDataAn AnnData object. n_components int (default: 10)Number of diffusion components. knn int (default: 30)Number of nearest neighbors for graph construction. alpha float (default: 0)Normalization parameter for the diffusion operator. use_adjacency_matrix bool (default: False)",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:10459,Modifiability,adapt,adaptive,10459,")[source]#; Run Diffusion maps using the adaptive anisotropic kernel [Setty et al., 2019].; Palantir is an algorithm to align cells along differentiation trajectories.; Palantir models differentiation as a stochastic process where stem cells; differentiate to terminally differentiated cells by a series of steps through; a low dimensional phenotypic manifold. Palantir effectively captures the; continuity in cell states and the stochasticity in cell fate determination.; Palantir has been designed to work with multidimensional single cell data; from diverse technologies such as Mass cytometry and single cell RNA-seq. Note; More information and bug reports here. Parameters:. adata AnnDataAn AnnData object. n_components int (default: 10)Number of diffusion components. knn int (default: 30)Number of nearest neighbors for graph construction. alpha float (default: 0)Normalization parameter for the diffusion operator. use_adjacency_matrix bool (default: False)Use adaptive anisotropic adjacency matrix, instead of PCA projections; (default) to compute diffusion components. distances_key str | None (default: None)With use_adjacency_matrix=True, use the indicated distances key for .obsp.; If None, 'distances'. n_eigs int | None (default: None)Number of eigen vectors to use. If None specified, the number of eigen; vectors will be determined using eigen gap. Passed to; palantir.utils.determine_multiscale_space. impute_data bool (default: True)Impute data using MAGIC. n_steps int (default: 3)Number of steps in the diffusion operator. Passed to; palantir.utils.run_magic_imputation. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields:. Diffusion maps,used for magic imputation, and to generate multi-scale data matrix,. X_palantir_diff_comp - ndarray (obsm, dtype float)Array of Diffusion components. palantir_EigenValues - ndarray (uns, dtype float)Array of corr",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:11904,Modifiability,layers,layers,11904," bool (default: True)Impute data using MAGIC. n_steps int (default: 3)Number of steps in the diffusion operator. Passed to; palantir.utils.run_magic_imputation. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields:. Diffusion maps,used for magic imputation, and to generate multi-scale data matrix,. X_palantir_diff_comp - ndarray (obsm, dtype float)Array of Diffusion components. palantir_EigenValues - ndarray (uns, dtype float)Array of corresponding eigen values. palantir_diff_op - spmatrix (obsp, dtype float)The diffusion operator matrix. Multi scale space results,used to build tsne on diffusion components, and to compute branch probabilities; and waypoints,. X_palantir_multiscale - ndarray (obsm, dtype float)Multi scale data matrix. MAGIC imputation,used for plotting gene expression on tsne, and gene expression trends,. palantir_imp - ndarray (layers, dtype float)Imputed data matrix (MAGIC imputation). Example; >>> import scanpy.external as sce; >>> import scanpy as sc. A sample data is available here.; Load sample data; >>> adata = sc.read_csv(filename=""Palantir/data/marrow_sample_scseq_counts.csv.gz""). Cleanup and normalize; >>> sc.pp.filter_cells(adata, min_counts=1000); >>> sc.pp.filter_genes(adata, min_counts=10); >>> sc.pp.normalize_per_cell(adata); >>> sc.pp.log1p(adata). Data preprocessing; Palantir builds diffusion maps using one of two optional inputs:; Principal component analysis; >>> sc.pp.pca(adata, n_comps=300). or,; Nearist neighbors graph; >>> sc.pp.neighbors(adata, knn=30). Diffusion maps; Palantir determines the diffusion maps of the data as an estimate of the low; dimensional phenotypic manifold of the data.; >>> sce.tl.palantir(adata, n_components=5, knn=30). if pre-computed distances are to be used,; >>> sce.tl.palantir(; ... adata,; ... n_components=5,; ... knn=30,; ... use_adjacency_matrix=True,; ... distances_key=""di",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:7181,Performance,cache,cachedir,7181,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:8422,Security,hash,hashsolo,8422,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir. Contents . palantir(). scanpy.external.tl.palantir#. scanpy.external.tl.palantir(adata, *, n_components=10, knn=30, alpha=0, use_adjacency_matrix=False, distances_key",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:7449,Testability,log,logfile,7449,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:7488,Testability,log,logpath,7488,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:7794,Testability,log,logging,7794,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:7823,Testability,log,logging,7823, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:14212,Usability,guid,guide,14212,"mponent analysis; >>> sc.pp.pca(adata, n_comps=300). or,; Nearist neighbors graph; >>> sc.pp.neighbors(adata, knn=30). Diffusion maps; Palantir determines the diffusion maps of the data as an estimate of the low; dimensional phenotypic manifold of the data.; >>> sce.tl.palantir(adata, n_components=5, knn=30). if pre-computed distances are to be used,; >>> sce.tl.palantir(; ... adata,; ... n_components=5,; ... knn=30,; ... use_adjacency_matrix=True,; ... distances_key=""distances"",; ... ). Visualizing Palantir results; tSNE visualization; important for Palantir!; Palantir constructs the tSNE map in the embedded space since these maps better; represent the differentiation trajectories.; >>> sc.tl.tsne(adata, n_pcs=2, use_rep='X_palantir_multiscale', perplexity=150). tsne by cell size; >>> sc.pl.tsne(adata, color=""n_counts""). Imputed gene expression visualized on tSNE maps; >>> sc.pl.tsne(; ... adata,; ... gene_symbols=['CD34', 'MPO', 'GATA1', 'IRF8'],; ... layer='palantir_imp',; ... color=['CD34', 'MPO', 'GATA1', 'IRF8']; ... ). Running Palantir; Palantir can be run by specifying an approximate early cell. While Palantir; automatically determines the terminal states, they can also be specified using the; termine_states parameter.; >>> start_cell = 'Run5_164698952452459'; >>> pr_res = sce.tl.palantir_results(; ... adata,; ... early_cell=start_cell,; ... ms_data='X_palantir_multiscale',; ... num_waypoints=500,; ... ). Note; A start_cell must be defined for every data set. The start cell for; this dataset was chosen based on high expression of CD34. At this point the returned Palantir object pr_res can be used for all downstream; analysis and plotting. Please consult this notebook; Palantir_sample_notebook.ipynb.; It provides a comprehensive guide to draw gene expression trends, amongst other; things. previous; scanpy.external.tl.phate. next; scanpy.external.tl.trimap. Contents; . palantir(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:8113,Deployability,toggle,toggleswitch,8113,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:9197,Deployability,release,release,9197,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir_results. Contents . palantir_results(). scanpy.external.tl.palantir_results#. scanpy.external.tl.palantir_results(adata, early_cell, *, ms_data='X_palantir_multiscale', terminal_states=None, knn=30, num_waypoints=1200, n_jobs=-1, scale_components=True, use_early_cell_as_start=False, max_iterations=25)[source]#; Running Palantir; A convenience function that wraps palantir.core.run_palantir to compute branch; probabilities and waypoints. Parameters:. adata AnnDataAn AnnData object. early_cell strStart cell for pseudotime construction. ms_data str (default: 'X_palantir_multiscale')Palantir multi scale data matrix,. terminal_states list | None (default: None)List of user defined terminal states. knn int (default: 30)Number of nearest neighbors for graph construction. num_waypoints int (default: 1200)Number of waypoints to sample. n_jobs int (default: ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:9631,Integrability,wrap,wraps,9631,".external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir_results. Contents . palantir_results(). scanpy.external.tl.palantir_results#. scanpy.external.tl.palantir_results(adata, early_cell, *, ms_data='X_palantir_multiscale', terminal_states=None, knn=30, num_waypoints=1200, n_jobs=-1, scale_components=True, use_early_cell_as_start=False, max_iterations=25)[source]#; Running Palantir; A convenience function that wraps palantir.core.run_palantir to compute branch; probabilities and waypoints. Parameters:. adata AnnDataAn AnnData object. early_cell strStart cell for pseudotime construction. ms_data str (default: 'X_palantir_multiscale')Palantir multi scale data matrix,. terminal_states list | None (default: None)List of user defined terminal states. knn int (default: 30)Number of nearest neighbors for graph construction. num_waypoints int (default: 1200)Number of waypoints to sample. n_jobs int (default: -1)Number of jobs for parallel processing. scale_components bool (default: True)Transform features by scaling each feature to a given range. Consult the; documentation for sklearn.preprocessing.minmax_scale. use_early_cell_as_start bool (default: False)Use early_cell as start_cell, instead of determining it from the boundary; cells closest to the defined early_cell. max_iter",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:7189,Performance,cache,cachedir,7189,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:8430,Security,hash,hashsolo,8430,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir_results. Contents . palantir_results(). scanpy.external.tl.palantir_results#. scanpy.external.tl.palantir_results(adata, early_cell, *, ms_data='X_palantir_multiscale'",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:7457,Testability,log,logfile,7457,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:7496,Testability,log,logpath,7496,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:7802,Testability,log,logging,7802,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:7831,Testability,log,logging,7831, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.palantir_results.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:8102,Deployability,toggle,toggleswitch,8102,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:9186,Deployability,release,release,9186,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phate. Contents . phate(). scanpy.external.tl.phate#. scanpy.external.tl.phate(adata, n_components=2, *, k=5, a=15, n_landmark=2000, t='auto', gamma=1.0, n_pca=100, knn_dist='euclidean', mds_dist='euclidean', mds='metric', n_jobs=None, random_state=None, verbose=None, copy=False, **kwargs)[source]#; PHATE [Moon et al., 2019].; Potential of Heat-diffusion for Affinity-based Trajectory Embedding (PHATE); embeds high dimensional single-cell data into two or three dimensions for; visualization of biological progressions.; For more information and access to the object-oriented interface, read the; PHATE documentation. For; tutorials, bug reports, and R/MATLAB implementations, visit the PHATE; GitHub page. For help; using PHATE, go here. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)number of dimensions in which the data will be e",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:12198,Deployability,update,updates,12198,"s neighborhoods to be calculated in; log(n_samples) time. knn_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for building kNN graph. mds_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for MDS. mds Literal['classic', 'metric', 'nonmetric'] (default: 'metric')Selects which MDS algorithm is used for dimensionality reduction. n_jobs int | None (default: None)The number of jobs to use for the computation.; If None, sc.settings.n_jobs is used.; If -1 all CPUs are used. If 1 is given, no parallel computing code is; used at all, which is useful for debugging.; For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for; n_jobs = -2, all CPUs but one are used. random_state Union[int, RandomState, None] (default: None)Random seed. Defaults to the global numpy random number generator. verbose bool | int | None (default: None)If True or an int/Verbosity â¥ 2/hint, print status messages.; If None, sc.settings.verbosity is used. copy bool (default: False)Return a copy instead of writing to adata. kwargsAdditional arguments to phate.PHATE. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields. X_phatenp.ndarray, (adata.obs, shape=[n_samples, n_components], dtype float)PHATE coordinates of data. Examples; >>> from anndata import AnnData; >>> import scanpy.external as sce; >>> import phate; >>> tree_data, tree_clusters = phate.tree.gen_dla(; ... n_dim=100,; ... n_branch=20,; ... branch_length=100,; ... ); >>> tree_data.shape; (2000, 100); >>> adata = AnnData(tree_data); >>> sce.tl.phate(adata, k=5, a=20, t=150); >>> adata.obsm['X_phate'].shape; (2000, 2); >>> sce.pl.phate(adata). previous; Tools: TL. next; scanpy.external.tl.palantir. Contents; . phate(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:10399,Energy Efficiency,power,power,10399,"st='euclidean', mds_dist='euclidean', mds='metric', n_jobs=None, random_state=None, verbose=None, copy=False, **kwargs)[source]#; PHATE [Moon et al., 2019].; Potential of Heat-diffusion for Affinity-based Trajectory Embedding (PHATE); embeds high dimensional single-cell data into two or three dimensions for; visualization of biological progressions.; For more information and access to the object-oriented interface, read the; PHATE documentation. For; tutorials, bug reports, and R/MATLAB implementations, visit the PHATE; GitHub page. For help; using PHATE, go here. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)number of dimensions in which the data will be embedded. k int (default: 5)number of nearest neighbors on which to build kernel. a int (default: 15)sets decay rate of kernel tails.; If None, alpha decaying kernel is not used. n_landmark int (default: 2000)number of landmarks to use in fast PHATE. t int | str (default: 'auto')power to which the diffusion operator is powered; sets the level of diffusion. If âautoâ, t is selected; according to the knee point in the Von Neumann Entropy of; the diffusion operator. gamma float (default: 1.0)Informational distance constant between -1 and 1.; gamma=1 gives the PHATE log potential, gamma=0 gives; a square root potential. n_pca int (default: 100)Number of principal components to use for calculating; neighborhoods. For extremely large datasets, using; n_pca < 20 allows neighborhoods to be calculated in; log(n_samples) time. knn_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for building kNN graph. mds_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for MDS. mds Literal['classic', 'metric', 'nonmetric'] (default: 'metric')Selects which MDS algorithm is used for dimensionality reduction. n_jobs int | ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:10440,Energy Efficiency,power,powered,10440,"st='euclidean', mds_dist='euclidean', mds='metric', n_jobs=None, random_state=None, verbose=None, copy=False, **kwargs)[source]#; PHATE [Moon et al., 2019].; Potential of Heat-diffusion for Affinity-based Trajectory Embedding (PHATE); embeds high dimensional single-cell data into two or three dimensions for; visualization of biological progressions.; For more information and access to the object-oriented interface, read the; PHATE documentation. For; tutorials, bug reports, and R/MATLAB implementations, visit the PHATE; GitHub page. For help; using PHATE, go here. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)number of dimensions in which the data will be embedded. k int (default: 5)number of nearest neighbors on which to build kernel. a int (default: 15)sets decay rate of kernel tails.; If None, alpha decaying kernel is not used. n_landmark int (default: 2000)number of landmarks to use in fast PHATE. t int | str (default: 'auto')power to which the diffusion operator is powered; sets the level of diffusion. If âautoâ, t is selected; according to the knee point in the Von Neumann Entropy of; the diffusion operator. gamma float (default: 1.0)Informational distance constant between -1 and 1.; gamma=1 gives the PHATE log potential, gamma=0 gives; a square root potential. n_pca int (default: 100)Number of principal components to use for calculating; neighborhoods. For extremely large datasets, using; n_pca < 20 allows neighborhoods to be calculated in; log(n_samples) time. knn_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for building kNN graph. mds_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for MDS. mds Literal['classic', 'metric', 'nonmetric'] (default: 'metric')Selects which MDS algorithm is used for dimensionality reduction. n_jobs int | ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:9831,Integrability,interface,interface,9831,"ng: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phate. Contents . phate(). scanpy.external.tl.phate#. scanpy.external.tl.phate(adata, n_components=2, *, k=5, a=15, n_landmark=2000, t='auto', gamma=1.0, n_pca=100, knn_dist='euclidean', mds_dist='euclidean', mds='metric', n_jobs=None, random_state=None, verbose=None, copy=False, **kwargs)[source]#; PHATE [Moon et al., 2019].; Potential of Heat-diffusion for Affinity-based Trajectory Embedding (PHATE); embeds high dimensional single-cell data into two or three dimensions for; visualization of biological progressions.; For more information and access to the object-oriented interface, read the; PHATE documentation. For; tutorials, bug reports, and R/MATLAB implementations, visit the PHATE; GitHub page. For help; using PHATE, go here. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)number of dimensions in which the data will be embedded. k int (default: 5)number of nearest neighbors on which to build kernel. a int (default: 15)sets decay rate of kernel tails.; If None, alpha decaying kernel is not used. n_landmark int (default: 2000)number of landmarks to use in fast PHATE. t int | str (default: 'auto')power to which the diffusion operator is powered; sets the level of diffusion. If âautoâ, t is selected; according to the knee point in the Von Neumann Entropy of; the diffusion operator. gamma float (default: 1.0)Informational distance constant between -1 and 1.; gamma=1 gives the PHATE log potential, gamma=0 gives; a square root potential. n_pca int (default: 100)Number of principal components to use for calculating; n",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:11965,Integrability,message,messages,11965,"s neighborhoods to be calculated in; log(n_samples) time. knn_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for building kNN graph. mds_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for MDS. mds Literal['classic', 'metric', 'nonmetric'] (default: 'metric')Selects which MDS algorithm is used for dimensionality reduction. n_jobs int | None (default: None)The number of jobs to use for the computation.; If None, sc.settings.n_jobs is used.; If -1 all CPUs are used. If 1 is given, no parallel computing code is; used at all, which is useful for debugging.; For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for; n_jobs = -2, all CPUs but one are used. random_state Union[int, RandomState, None] (default: None)Random seed. Defaults to the global numpy random number generator. verbose bool | int | None (default: None)If True or an int/Verbosity â¥ 2/hint, print status messages.; If None, sc.settings.verbosity is used. copy bool (default: False)Return a copy instead of writing to adata. kwargsAdditional arguments to phate.PHATE. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields. X_phatenp.ndarray, (adata.obs, shape=[n_samples, n_components], dtype float)PHATE coordinates of data. Examples; >>> from anndata import AnnData; >>> import scanpy.external as sce; >>> import phate; >>> tree_data, tree_clusters = phate.tree.gen_dla(; ... n_dim=100,; ... n_branch=20,; ... branch_length=100,; ... ); >>> tree_data.shape; (2000, 100); >>> adata = AnnData(tree_data); >>> sce.tl.phate(adata, k=5, a=20, t=150); >>> adata.obsm['X_phate'].shape; (2000, 2); >>> sce.pl.phate(adata). previous; Tools: TL. next; scanpy.external.tl.palantir. Contents; . phate(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:7178,Performance,cache,cachedir,7178,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:8419,Security,hash,hashsolo,8419,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phate. Contents . phate(). scanpy.external.tl.phate#. scanpy.external.tl.phate(adata, n_components=2, *, k=5, a=15, n_landmark=2000, t='auto', gamma=1.0, n_pca=100, knn_dist='e",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:9801,Security,access,access,9801,"ng: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phate. Contents . phate(). scanpy.external.tl.phate#. scanpy.external.tl.phate(adata, n_components=2, *, k=5, a=15, n_landmark=2000, t='auto', gamma=1.0, n_pca=100, knn_dist='euclidean', mds_dist='euclidean', mds='metric', n_jobs=None, random_state=None, verbose=None, copy=False, **kwargs)[source]#; PHATE [Moon et al., 2019].; Potential of Heat-diffusion for Affinity-based Trajectory Embedding (PHATE); embeds high dimensional single-cell data into two or three dimensions for; visualization of biological progressions.; For more information and access to the object-oriented interface, read the; PHATE documentation. For; tutorials, bug reports, and R/MATLAB implementations, visit the PHATE; GitHub page. For help; using PHATE, go here. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)number of dimensions in which the data will be embedded. k int (default: 5)number of nearest neighbors on which to build kernel. a int (default: 15)sets decay rate of kernel tails.; If None, alpha decaying kernel is not used. n_landmark int (default: 2000)number of landmarks to use in fast PHATE. t int | str (default: 'auto')power to which the diffusion operator is powered; sets the level of diffusion. If âautoâ, t is selected; according to the knee point in the Von Neumann Entropy of; the diffusion operator. gamma float (default: 1.0)Informational distance constant between -1 and 1.; gamma=1 gives the PHATE log potential, gamma=0 gives; a square root potential. n_pca int (default: 100)Number of principal components to use for calculating; n",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:7446,Testability,log,logfile,7446,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:7485,Testability,log,logpath,7485,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:7791,Testability,log,logging,7791,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:7820,Testability,log,logging,7820, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:10688,Testability,log,log,10688,"o two or three dimensions for; visualization of biological progressions.; For more information and access to the object-oriented interface, read the; PHATE documentation. For; tutorials, bug reports, and R/MATLAB implementations, visit the PHATE; GitHub page. For help; using PHATE, go here. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)number of dimensions in which the data will be embedded. k int (default: 5)number of nearest neighbors on which to build kernel. a int (default: 15)sets decay rate of kernel tails.; If None, alpha decaying kernel is not used. n_landmark int (default: 2000)number of landmarks to use in fast PHATE. t int | str (default: 'auto')power to which the diffusion operator is powered; sets the level of diffusion. If âautoâ, t is selected; according to the knee point in the Von Neumann Entropy of; the diffusion operator. gamma float (default: 1.0)Informational distance constant between -1 and 1.; gamma=1 gives the PHATE log potential, gamma=0 gives; a square root potential. n_pca int (default: 100)Number of principal components to use for calculating; neighborhoods. For extremely large datasets, using; n_pca < 20 allows neighborhoods to be calculated in; log(n_samples) time. knn_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for building kNN graph. mds_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for MDS. mds Literal['classic', 'metric', 'nonmetric'] (default: 'metric')Selects which MDS algorithm is used for dimensionality reduction. n_jobs int | None (default: None)The number of jobs to use for the computation.; If None, sc.settings.n_jobs is used.; If -1 all CPUs are used. If 1 is given, no parallel computing code is; used at all, which is useful for debugging.; For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:10927,Testability,log,log,10927,"g reports, and R/MATLAB implementations, visit the PHATE; GitHub page. For help; using PHATE, go here. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)number of dimensions in which the data will be embedded. k int (default: 5)number of nearest neighbors on which to build kernel. a int (default: 15)sets decay rate of kernel tails.; If None, alpha decaying kernel is not used. n_landmark int (default: 2000)number of landmarks to use in fast PHATE. t int | str (default: 'auto')power to which the diffusion operator is powered; sets the level of diffusion. If âautoâ, t is selected; according to the knee point in the Von Neumann Entropy of; the diffusion operator. gamma float (default: 1.0)Informational distance constant between -1 and 1.; gamma=1 gives the PHATE log potential, gamma=0 gives; a square root potential. n_pca int (default: 100)Number of principal components to use for calculating; neighborhoods. For extremely large datasets, using; n_pca < 20 allows neighborhoods to be calculated in; log(n_samples) time. knn_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for building kNN graph. mds_dist str (default: 'euclidean')recommended values: âeuclideanâ and âcosineâ; Any metric from scipy.spatial.distance can be used; distance metric for MDS. mds Literal['classic', 'metric', 'nonmetric'] (default: 'metric')Selects which MDS algorithm is used for dimensionality reduction. n_jobs int | None (default: None)The number of jobs to use for the computation.; If None, sc.settings.n_jobs is used.; If -1 all CPUs are used. If 1 is given, no parallel computing code is; used at all, which is useful for debugging.; For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for; n_jobs = -2, all CPUs but one are used. random_state Union[int, RandomState, None] (default: None)Random seed. Defaults to the global numpy random number generator. verbose bool | int ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phate.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:12276,Availability,avail,available,12276,"cosine'] (default: 'euclidean')Distance metric to define nearest neighbors. Note that performance will be; slower for correlation and cosine. n_jobs int (default: -1)Nearest Neighbors and Jaccard coefficients will be computed in parallel using; n_jobs. If 1 is given, no parallelism is used. If set to -1, all CPUs are used.; For n_jobs below -1, n_cpus + 1 + n_jobs are used. q_tol float (default: 0.001)Tolerance, i.e. precision, for monitoring modularity optimization. louvain_time_limit int (default: 2000)Maximum number of seconds to run modularity optimization. If exceeded the best; result so far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an iteration in which there was no; improvement. use_weights bool (default: True)Use vertices in the Leiden computation. seed int | None (default: None)Leiden initialization of the optimization. copy bool (default: False)Return a copy or write to adata. kargs AnyAdditional arguments passed to find_partition() and the; constructor of the partition_type. Return type:; tuple[ndarray | None, spmatrix, float | None] | None. Returns:; Depending on copy, returns or updates adata with the following fields:. communities - ndarray (obs, dtype int)integer array of ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:8107,Deployability,toggle,toggleswitch,8107,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:9191,Deployability,release,release,9191,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phenograph. Contents . phenograph(). scanpy.external.tl.phenograph#. scanpy.external.tl.phenograph(data, clustering_algo='louvain', *, k=30, directed=False, prune=False, min_cluster_size=10, jaccard=True, primary_metric='euclidean', n_jobs=-1, q_tol=0.001, louvain_time_limit=2000, nn_method='kdtree', partition_type=None, resolution_parameter=1, n_iterations=-1, use_weights=True, seed=None, copy=False, **kargs)[source]#; PhenoGraph clustering [Levine et al., 2015].; PhenoGraph is a clustering method designed for high-dimensional single-cell; data. It works by creating a graph (ânetworkâ) representing phenotypic similarities; between cells and then identifying communities in this graph. It supports both; Louvain and Leiden algorithms for community detection. Note; More information and bug reports here. Parameters:. data AnnData | ndarray | spmatrixAnnData, o",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:13208,Deployability,update,updates,13208,"(default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an iteration in which there was no; improvement. use_weights bool (default: True)Use vertices in the Leiden computation. seed int | None (default: None)Leiden initialization of the optimization. copy bool (default: False)Return a copy or write to adata. kargs AnyAdditional arguments passed to find_partition() and the; constructor of the partition_type. Return type:; tuple[ndarray | None, spmatrix, float | None] | None. Returns:; Depending on copy, returns or updates adata with the following fields:. communities - ndarray (obs, dtype int)integer array of community assignments for each row in data. graph - spmatrix (obsp, dtype float)the graph that was used for clustering. Q - float (uns, dtype float)the modularity score for communities on graph. Example; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> import numpy as np; >>> import pandas as pd. With annotated data as input:; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.normalize_per_cell(adata). Then do PCA:; >>> sc.pp.pca(adata, n_comps=100). Compute phenograph clusters:; Louvain community detection; >>> sce.tl.phenograph(adata, clustering_algo=""louvain"", k=30). Leiden community detection; >>> sce.tl.phenograph(adata, clustering_algo=""leiden"", k=30). Return only Graph object; >>> sce.tl.phenograph(adata, clustering_algo=None, k=30). Now to show phenograph on tSNE (for example):; Compute tSNE:; >>> sc.tl.tsne(adata, random_state=7). Plot phen",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:11740,Energy Efficiency,monitor,monitoring,11740,"prune bool (default: False)prune=False, symmetrize by taking the average between the graph and its; transpose. prune=True, symmetrize by taking the product between the graph; and its transpose. min_cluster_size int (default: 10)Cells that end up in a cluster smaller than min_cluster_size are considered; outliers and are assigned to -1 in the cluster labels. jaccard bool (default: True)If True, use Jaccard metric between k-neighborhoods to build graph. If; False, use a Gaussian kernel. primary_metric Literal['euclidean', 'manhattan', 'correlation', 'cosine'] (default: 'euclidean')Distance metric to define nearest neighbors. Note that performance will be; slower for correlation and cosine. n_jobs int (default: -1)Nearest Neighbors and Jaccard coefficients will be computed in parallel using; n_jobs. If 1 is given, no parallelism is used. If set to -1, all CPUs are used.; For n_jobs below -1, n_cpus + 1 + n_jobs are used. q_tol float (default: 0.001)Tolerance, i.e. precision, for monitoring modularity optimization. louvain_time_limit int (default: 2000)Maximum number of seconds to run modularity optimization. If exceeded the best; result so far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an it",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:7183,Performance,cache,cachedir,7183,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:11390,Performance,perform,performance,11390,"orithm for clustering. k int (default: 30)Number of nearest neighbors to use in first step of graph construction. directed bool (default: False)Whether to use a symmetric (default) or asymmetric ('directed') graph.; The graph construction process produces a directed graph, which is symmetrized; by one of two methods (see prune below). prune bool (default: False)prune=False, symmetrize by taking the average between the graph and its; transpose. prune=True, symmetrize by taking the product between the graph; and its transpose. min_cluster_size int (default: 10)Cells that end up in a cluster smaller than min_cluster_size are considered; outliers and are assigned to -1 in the cluster labels. jaccard bool (default: True)If True, use Jaccard metric between k-neighborhoods to build graph. If; False, use a Gaussian kernel. primary_metric Literal['euclidean', 'manhattan', 'correlation', 'cosine'] (default: 'euclidean')Distance metric to define nearest neighbors. Note that performance will be; slower for correlation and cosine. n_jobs int (default: -1)Nearest Neighbors and Jaccard coefficients will be computed in parallel using; n_jobs. If 1 is given, no parallelism is used. If set to -1, all CPUs are used.; For n_jobs below -1, n_cpus + 1 + n_jobs are used. q_tol float (default: 0.001)Tolerance, i.e. precision, for monitoring modularity optimization. louvain_time_limit int (default: 2000)Maximum number of seconds to run modularity optimization. If exceeded the best; result so far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:11762,Performance,optimiz,optimization,11762,"prune bool (default: False)prune=False, symmetrize by taking the average between the graph and its; transpose. prune=True, symmetrize by taking the product between the graph; and its transpose. min_cluster_size int (default: 10)Cells that end up in a cluster smaller than min_cluster_size are considered; outliers and are assigned to -1 in the cluster labels. jaccard bool (default: True)If True, use Jaccard metric between k-neighborhoods to build graph. If; False, use a Gaussian kernel. primary_metric Literal['euclidean', 'manhattan', 'correlation', 'cosine'] (default: 'euclidean')Distance metric to define nearest neighbors. Note that performance will be; slower for correlation and cosine. n_jobs int (default: -1)Nearest Neighbors and Jaccard coefficients will be computed in parallel using; n_jobs. If 1 is given, no parallelism is used. If set to -1, all CPUs are used.; For n_jobs below -1, n_cpus + 1 + n_jobs are used. q_tol float (default: 0.001)Tolerance, i.e. precision, for monitoring modularity optimization. louvain_time_limit int (default: 2000)Maximum number of seconds to run modularity optimization. If exceeded the best; result so far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an it",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:11858,Performance,optimiz,optimization,11858,"etween the graph and its; transpose. prune=True, symmetrize by taking the product between the graph; and its transpose. min_cluster_size int (default: 10)Cells that end up in a cluster smaller than min_cluster_size are considered; outliers and are assigned to -1 in the cluster labels. jaccard bool (default: True)If True, use Jaccard metric between k-neighborhoods to build graph. If; False, use a Gaussian kernel. primary_metric Literal['euclidean', 'manhattan', 'correlation', 'cosine'] (default: 'euclidean')Distance metric to define nearest neighbors. Note that performance will be; slower for correlation and cosine. n_jobs int (default: -1)Nearest Neighbors and Jaccard coefficients will be computed in parallel using; n_jobs. If 1 is given, no parallelism is used. If set to -1, all CPUs are used.; For n_jobs below -1, n_cpus + 1 + n_jobs are used. q_tol float (default: 0.001)Tolerance, i.e. precision, for monitoring modularity optimization. louvain_time_limit int (default: 2000)Maximum number of seconds to run modularity optimization. If exceeded the best; result so far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an iteration in which there was no; improvement. use_weights bool (default: Tr",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:12128,Performance,perform,performs,12128,"r labels. jaccard bool (default: True)If True, use Jaccard metric between k-neighborhoods to build graph. If; False, use a Gaussian kernel. primary_metric Literal['euclidean', 'manhattan', 'correlation', 'cosine'] (default: 'euclidean')Distance metric to define nearest neighbors. Note that performance will be; slower for correlation and cosine. n_jobs int (default: -1)Nearest Neighbors and Jaccard coefficients will be computed in parallel using; n_jobs. If 1 is given, no parallelism is used. If set to -1, all CPUs are used.; For n_jobs below -1, n_cpus + 1 + n_jobs are used. q_tol float (default: 0.001)Tolerance, i.e. precision, for monitoring modularity optimization. louvain_time_limit int (default: 2000)Maximum number of seconds to run modularity optimization. If exceeded the best; result so far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an iteration in which there was no; improvement. use_weights bool (default: True)Use vertices in the Leiden computation. seed int | None (default: None)Leiden initialization of the optimization. copy bool (default: False)Return a copy or write to adata. kargs AnyAdditional arguments passed to find_partition() and the; constructor of the partition_type.",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:12926,Performance,optimiz,optimization,12926,"o far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an iteration in which there was no; improvement. use_weights bool (default: True)Use vertices in the Leiden computation. seed int | None (default: None)Leiden initialization of the optimization. copy bool (default: False)Return a copy or write to adata. kargs AnyAdditional arguments passed to find_partition() and the; constructor of the partition_type. Return type:; tuple[ndarray | None, spmatrix, float | None] | None. Returns:; Depending on copy, returns or updates adata with the following fields:. communities - ndarray (obs, dtype int)integer array of community assignments for each row in data. graph - spmatrix (obsp, dtype float)the graph that was used for clustering. Q - float (uns, dtype float)the modularity score for communities on graph. Example; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> import numpy as np; >>> import pandas as pd. With annotated data as input:; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.normalize_per_cell(adata). Then do PCA:; >>> sc.pp.pca(adata, n_comps=100). Compute phenograph clusters:; Louvain community detection; >>> sce.tl.phenograph(adata, clustering_a",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:10013,Safety,detect,detection,10013,".exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phenograph. Contents . phenograph(). scanpy.external.tl.phenograph#. scanpy.external.tl.phenograph(data, clustering_algo='louvain', *, k=30, directed=False, prune=False, min_cluster_size=10, jaccard=True, primary_metric='euclidean', n_jobs=-1, q_tol=0.001, louvain_time_limit=2000, nn_method='kdtree', partition_type=None, resolution_parameter=1, n_iterations=-1, use_weights=True, seed=None, copy=False, **kargs)[source]#; PhenoGraph clustering [Levine et al., 2015].; PhenoGraph is a clustering method designed for high-dimensional single-cell; data. It works by creating a graph (ânetworkâ) representing phenotypic similarities; between cells and then identifying communities in this graph. It supports both; Louvain and Leiden algorithms for community detection. Note; More information and bug reports here. Parameters:. data AnnData | ndarray | spmatrixAnnData, or Array of data to cluster, or sparse matrix of k-nearest neighbor; graph. If ndarray, n-by-d array of n cells in d dimensions. if sparse matrix,; n-by-n adjacency matrix. clustering_algo Optional[Literal['louvain', 'leiden']] (default: 'louvain')Choose between 'Louvain' or 'Leiden' algorithm for clustering. k int (default: 30)Number of nearest neighbors to use in first step of graph construction. directed bool (default: False)Whether to use a symmetric (default) or asymmetric ('directed') graph.; The graph construction process produces a directed graph, which is symmetrized; by one of two methods (see prune below). prune bool (default: False)prune=False, symmetrize by taking the average between the graph and its; transpose. prune=True, symmetrize by taking the product between the graph; and its transpose. min_cluster_size int (default: 10)Cells that",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:13850,Safety,detect,detection,13850,"ces in the Leiden computation. seed int | None (default: None)Leiden initialization of the optimization. copy bool (default: False)Return a copy or write to adata. kargs AnyAdditional arguments passed to find_partition() and the; constructor of the partition_type. Return type:; tuple[ndarray | None, spmatrix, float | None] | None. Returns:; Depending on copy, returns or updates adata with the following fields:. communities - ndarray (obs, dtype int)integer array of community assignments for each row in data. graph - spmatrix (obsp, dtype float)the graph that was used for clustering. Q - float (uns, dtype float)the modularity score for communities on graph. Example; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> import numpy as np; >>> import pandas as pd. With annotated data as input:; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.normalize_per_cell(adata). Then do PCA:; >>> sc.pp.pca(adata, n_comps=100). Compute phenograph clusters:; Louvain community detection; >>> sce.tl.phenograph(adata, clustering_algo=""louvain"", k=30). Leiden community detection; >>> sce.tl.phenograph(adata, clustering_algo=""leiden"", k=30). Return only Graph object; >>> sce.tl.phenograph(adata, clustering_algo=None, k=30). Now to show phenograph on tSNE (for example):; Compute tSNE:; >>> sc.tl.tsne(adata, random_state=7). Plot phenograph clusters on tSNE:; >>> sc.pl.tsne(; ... adata, color = [""pheno_louvain"", ""pheno_leiden""], s = 100,; ... palette = sc.pl.palettes.vega_20_scanpy, legend_fontsize = 10; ... ). Cluster and cluster centroids for input Numpy ndarray; >>> df = np.random.rand(1000, 40); >>> dframe = pd.DataFrame(df); >>> dframe.index, dframe.columns = (map(str, dframe.index), map(str, dframe.columns)); >>> adata = AnnData(dframe); >>> sc.pp.pca(adata, n_comps=20); >>> sce.tl.phenograph(adata, clustering_algo=""leiden"", k=50); >>> sc.tl.tsne(adata, random_state=1); >>> sc.pl.tsne(; ... adata, color=['pheno_leiden'], s=100,; ... palette=sc",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:13941,Safety,detect,detection,13941,"opy bool (default: False)Return a copy or write to adata. kargs AnyAdditional arguments passed to find_partition() and the; constructor of the partition_type. Return type:; tuple[ndarray | None, spmatrix, float | None] | None. Returns:; Depending on copy, returns or updates adata with the following fields:. communities - ndarray (obs, dtype int)integer array of community assignments for each row in data. graph - spmatrix (obsp, dtype float)the graph that was used for clustering. Q - float (uns, dtype float)the modularity score for communities on graph. Example; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> import numpy as np; >>> import pandas as pd. With annotated data as input:; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.normalize_per_cell(adata). Then do PCA:; >>> sc.pp.pca(adata, n_comps=100). Compute phenograph clusters:; Louvain community detection; >>> sce.tl.phenograph(adata, clustering_algo=""louvain"", k=30). Leiden community detection; >>> sce.tl.phenograph(adata, clustering_algo=""leiden"", k=30). Return only Graph object; >>> sce.tl.phenograph(adata, clustering_algo=None, k=30). Now to show phenograph on tSNE (for example):; Compute tSNE:; >>> sc.tl.tsne(adata, random_state=7). Plot phenograph clusters on tSNE:; >>> sc.pl.tsne(; ... adata, color = [""pheno_louvain"", ""pheno_leiden""], s = 100,; ... palette = sc.pl.palettes.vega_20_scanpy, legend_fontsize = 10; ... ). Cluster and cluster centroids for input Numpy ndarray; >>> df = np.random.rand(1000, 40); >>> dframe = pd.DataFrame(df); >>> dframe.index, dframe.columns = (map(str, dframe.index), map(str, dframe.columns)); >>> adata = AnnData(dframe); >>> sc.pp.pca(adata, n_comps=20); >>> sce.tl.phenograph(adata, clustering_algo=""leiden"", k=50); >>> sc.tl.tsne(adata, random_state=1); >>> sc.pl.tsne(; ... adata, color=['pheno_leiden'], s=100,; ... palette=sc.pl.palettes.vega_20_scanpy, legend_fontsize=10; ... ). previous; scanpy.external.tl.sam. next; scanpy.exte",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:8424,Security,hash,hashsolo,8424,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phenograph. Contents . phenograph(). scanpy.external.tl.phenograph#. scanpy.external.tl.phenograph(data, clustering_algo='louvain', *, k=30, directed=False, prune=False, min_cl",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:7451,Testability,log,logfile,7451,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:7490,Testability,log,logpath,7490,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:7796,Testability,log,logging,7796,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:7825,Testability,log,logging,7825, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.phenograph.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:14277,Availability,avail,available,14277,"with key âconnectivitiesâ containing the kNN adjacency; matrix output by SAM. If built-in scanpy dimensionality reduction; methods are to be used using the SAM-output AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user interface written with; Plotly and ipythonwidgets for interactively exploring and annotating; the scRNAseq data and running SAM.; Dependencies can be installed with Anaconda by following the instructions in; the self-assembling-manifold Github README:; atarashansky/self-assembling-manifold; In a Jupyter notebook, execute the following to launch the interface:; >>> from samalg.gui import SAMGUI; >>> sam_gui = SAMGUI(sam_obj) # sam_obj is your SAM object; >>> sam_gui.SamPlot. This can also be enabled in Jupyer Lab by following the instructions in the; self-assembling-manifold README. previous",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:8100,Deployability,toggle,toggleswitch,8100,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:9184,Deployability,release,release,9184,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.sam. Contents . sam(). scanpy.external.tl.sam#. scanpy.external.tl.sam(adata, *, max_iter=10, num_norm_avg=50, k=20, distance='correlation', standardization='StandardScaler', weight_pcs=False, sparse_pca=False, n_pcs=150, n_genes=3000, projection='umap', inplace=True, verbose=True)[source]#; Self-Assembling Manifolds single-cell RNA sequencing analysis tool [Tarashansky et al., 2019].; SAM iteratively rescales the input gene expression matrix to emphasize; genes that are spatially variable along the intrinsic manifold of the data.; It outputs the gene weights, nearest neighbor matrix, and a 2D projection.; The AnnData input should contain unstandardized, non-negative values.; Preferably, the data should be log-normalized and no genes should be filtered out. Parameters:. k int (default: 20)The number of nearest neighbors to identify for each cell. distance ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:14813,Deployability,install,installed,14813," AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user interface written with; Plotly and ipythonwidgets for interactively exploring and annotating; the scRNAseq data and running SAM.; Dependencies can be installed with Anaconda by following the instructions in; the self-assembling-manifold Github README:; atarashansky/self-assembling-manifold; In a Jupyter notebook, execute the following to launch the interface:; >>> from samalg.gui import SAMGUI; >>> sam_gui = SAMGUI(sam_obj) # sam_obj is your SAM object; >>> sam_gui.SamPlot. This can also be enabled in Jupyer Lab by following the instructions in the; self-assembling-manifold README. previous; scanpy.external.tl.trimap. next; scanpy.external.tl.phenograph. Contents; . sam(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:14663,Integrability,interface,interface,14663," AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user interface written with; Plotly and ipythonwidgets for interactively exploring and annotating; the scRNAseq data and running SAM.; Dependencies can be installed with Anaconda by following the instructions in; the self-assembling-manifold Github README:; atarashansky/self-assembling-manifold; In a Jupyter notebook, execute the following to launch the interface:; >>> from samalg.gui import SAMGUI; >>> sam_gui = SAMGUI(sam_obj) # sam_obj is your SAM object; >>> sam_gui.SamPlot. This can also be enabled in Jupyer Lab by following the instructions in the; self-assembling-manifold README. previous; scanpy.external.tl.trimap. next; scanpy.external.tl.phenograph. Contents; . sam(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:15014,Integrability,interface,interface,15014," AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user interface written with; Plotly and ipythonwidgets for interactively exploring and annotating; the scRNAseq data and running SAM.; Dependencies can be installed with Anaconda by following the instructions in; the self-assembling-manifold Github README:; atarashansky/self-assembling-manifold; In a Jupyter notebook, execute the following to launch the interface:; >>> from samalg.gui import SAMGUI; >>> sam_gui = SAMGUI(sam_obj) # sam_obj is your SAM object; >>> sam_gui.SamPlot. This can also be enabled in Jupyer Lab by following the instructions in the; self-assembling-manifold README. previous; scanpy.external.tl.trimap. next; scanpy.external.tl.phenograph. Contents; . sam(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:9736,Modifiability,variab,variable,9736,".palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.sam. Contents . sam(). scanpy.external.tl.sam#. scanpy.external.tl.sam(adata, *, max_iter=10, num_norm_avg=50, k=20, distance='correlation', standardization='StandardScaler', weight_pcs=False, sparse_pca=False, n_pcs=150, n_genes=3000, projection='umap', inplace=True, verbose=True)[source]#; Self-Assembling Manifolds single-cell RNA sequencing analysis tool [Tarashansky et al., 2019].; SAM iteratively rescales the input gene expression matrix to emphasize; genes that are spatially variable along the intrinsic manifold of the data.; It outputs the gene weights, nearest neighbor matrix, and a 2D projection.; The AnnData input should contain unstandardized, non-negative values.; Preferably, the data should be log-normalized and no genes should be filtered out. Parameters:. k int (default: 20)The number of nearest neighbors to identify for each cell. distance str (default: 'correlation')The distance metric to use when identifying nearest neighbors.; Can be any of the distance metrics supported by; pdist(). max_iter int (default: 10)The maximum number of iterations SAM will run. projection Literal['umap', 'tsne', 'None'] (default: 'umap')If âtsneâ, generates a t-SNE embedding. If âumapâ, generates a UMAP; embedding. If âNoneâ, no embedding will be generated. standardization Literal['Normalizer', 'StandardScaler', 'None'] (default: 'StandardScaler')If âNormalizerâ, use sklearn.preprocessing.Normalizer, which; normalizes expression data prior to",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:13625,Modifiability,layers,layers,13625,"ace bool (default: True)Set fields in adata if True. Otherwise, returns a copy. verbose bool (default: True)If True, displays SAM log statements. Return type:; SAM | tuple[SAM, AnnData]. Returns:; sam_obj if inplace is True or (sam_obj,AnnData) otherwise. adata - AnnData; .var['weights']SAM weights for each gene. .var['spatial_dispersions']Spatial dispersions for each gene (these are used to compute the; SAM weights). .uns['sam']Dictionary of SAM-specific outputs, such as the parameters; used for preprocessing (âpreprocess_argsâ) and running; (ârun_argsâ) SAM. .uns['neighbors']A dictionary with key âconnectivitiesâ containing the kNN adjacency; matrix output by SAM. If built-in scanpy dimensionality reduction; methods are to be used using the SAM-output AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:13701,Modifiability,layers,layers,13701,"ult: True)If True, displays SAM log statements. Return type:; SAM | tuple[SAM, AnnData]. Returns:; sam_obj if inplace is True or (sam_obj,AnnData) otherwise. adata - AnnData; .var['weights']SAM weights for each gene. .var['spatial_dispersions']Spatial dispersions for each gene (these are used to compute the; SAM weights). .uns['sam']Dictionary of SAM-specific outputs, such as the parameters; used for preprocessing (âpreprocess_argsâ) and running; (ârun_argsâ) SAM. .uns['neighbors']A dictionary with key âconnectivitiesâ containing the kNN adjacency; matrix output by SAM. If built-in scanpy dimensionality reduction; methods are to be used using the SAM-output AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user interface written with; Plotly and ipythonwidgets for interactively exploring and annotating; the",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:7176,Performance,cache,cachedir,7176,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:8417,Security,hash,hashsolo,8417,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.sam. Contents . sam(). scanpy.external.tl.sam#. scanpy.external.tl.sam(adata, *, max_iter=10, num_norm_avg=50, k=20, distance='correlation', standardization='StandardScaler', w",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:7444,Testability,log,logfile,7444,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:7483,Testability,log,logpath,7483,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:7789,Testability,log,logging,7789,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:7818,Testability,log,logging,7818, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:9966,Testability,log,log-normalized,9966,"rnal.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.sam. Contents . sam(). scanpy.external.tl.sam#. scanpy.external.tl.sam(adata, *, max_iter=10, num_norm_avg=50, k=20, distance='correlation', standardization='StandardScaler', weight_pcs=False, sparse_pca=False, n_pcs=150, n_genes=3000, projection='umap', inplace=True, verbose=True)[source]#; Self-Assembling Manifolds single-cell RNA sequencing analysis tool [Tarashansky et al., 2019].; SAM iteratively rescales the input gene expression matrix to emphasize; genes that are spatially variable along the intrinsic manifold of the data.; It outputs the gene weights, nearest neighbor matrix, and a 2D projection.; The AnnData input should contain unstandardized, non-negative values.; Preferably, the data should be log-normalized and no genes should be filtered out. Parameters:. k int (default: 20)The number of nearest neighbors to identify for each cell. distance str (default: 'correlation')The distance metric to use when identifying nearest neighbors.; Can be any of the distance metrics supported by; pdist(). max_iter int (default: 10)The maximum number of iterations SAM will run. projection Literal['umap', 'tsne', 'None'] (default: 'umap')If âtsneâ, generates a t-SNE embedding. If âumapâ, generates a UMAP; embedding. If âNoneâ, no embedding will be generated. standardization Literal['Normalizer', 'StandardScaler', 'None'] (default: 'StandardScaler')If âNormalizerâ, use sklearn.preprocessing.Normalizer, which; normalizes expression data prior to PCA such that each cell has; unit L2 norm. If âStandardScalerâ, use; sklearn.preprocessing.StandardScaler, which normalizes expression; data prior to PCA such that each gene has zero mean and unit; variance. Otherwise, do not normalize the expression data. We; r",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:12792,Testability,log,log,12792,"ary dense copy of the sparse data.; However, this implementation is slower and so is only worth using when; memory constraints become noticeable. n_pcs int | None (default: 150)Determines the number of top principal components selected at each; iteration of the SAM algorithm. If None, this number is chosen; automatically based on the size of the dataset. If weight_pcs is; set to True, this parameter primarily affects the runtime of the SAM; algorithm (more PCs = longer runtime). n_genes int | None (default: 3000)Determines the number of top SAM-weighted genes to use at each iteration; of the SAM algorithm. If None, this number is chosen automatically; based on the size of the dataset. This parameter primarily affects; the runtime of the SAM algorithm (more genes = longer runtime). For; extremely homogeneous datasets, decreasing n_genes may improve; clustering resolution. inplace bool (default: True)Set fields in adata if True. Otherwise, returns a copy. verbose bool (default: True)If True, displays SAM log statements. Return type:; SAM | tuple[SAM, AnnData]. Returns:; sam_obj if inplace is True or (sam_obj,AnnData) otherwise. adata - AnnData; .var['weights']SAM weights for each gene. .var['spatial_dispersions']Spatial dispersions for each gene (these are used to compute the; SAM weights). .uns['sam']Dictionary of SAM-specific outputs, such as the parameters; used for preprocessing (âpreprocess_argsâ) and running; (ârun_argsâ) SAM. .uns['neighbors']A dictionary with key âconnectivitiesâ containing the kNN adjacency; matrix output by SAM. If built-in scanpy dimensionality reduction; methods are to be used using the SAM-output AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:14169,Testability,log,log-normalized,14169,"âpreprocess_argsâ) and running; (ârun_argsâ) SAM. .uns['neighbors']A dictionary with key âconnectivitiesâ containing the kNN adjacency; matrix output by SAM. If built-in scanpy dimensionality reduction; methods are to be used using the SAM-output AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user interface written with; Plotly and ipythonwidgets for interactively exploring and annotating; the scRNAseq data and running SAM.; Dependencies can be installed with Anaconda by following the instructions in; the self-assembling-manifold Github README:; atarashansky/self-assembling-manifold; In a Jupyter notebook, execute the following to launch the interface:; >>> from samalg.gui import SAMGUI; >>> sam_gui = SAMGUI(sam_obj) # sam_obj is your SAM object; >>> sam_gui.SamPlot. This can also be enabled in Jupyer La",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sam.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:8104,Deployability,toggle,toggleswitch,8104,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sandbag.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:9188,Deployability,release,release,9188,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.sandbag. Contents . sandbag(). scanpy.external.tl.sandbag#. scanpy.external.tl.sandbag(adata, annotation=None, *, fraction=0.65, filter_genes=None, filter_samples=None)[source]#; Calculate marker pairs of genes [Fechtner, 2018, Scialdone et al., 2015].; Calculates the pairs of genes serving as marker pairs for each phase,; based on a matrix of gene counts and an annotation of known phases.; This reproduces the approach of Scialdone et al. [2015] in the implementation of; Fechtner [2018].; More information and bug reports here. Parameters:. adata AnnDataThe annotated data matrix. annotation Mapping[str, Collection[Union[str, int, bool]]] | None (default: None)Mapping from category to genes, e.g. {'phase': [Gene1, ...]}.; Defaults to data.vars['category']. fraction float (default: 0.65)Fraction of cells per category where marker criteria must be satisfied. f",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sandbag.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:7180,Performance,cache,cachedir,7180,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sandbag.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:8421,Security,hash,hashsolo,8421,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.sandbag. Contents . sandbag(). scanpy.external.tl.sandbag#. scanpy.external.tl.sandbag(adata, annotation=None, *, fraction=0.65, filter_genes=None, filter_samples=None)[source]",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sandbag.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:7448,Testability,log,logfile,7448,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sandbag.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:7487,Testability,log,logpath,7487,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sandbag.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:7793,Testability,log,logging,7793,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sandbag.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:7822,Testability,log,logging,7822, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.sandbag.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:8103,Deployability,toggle,toggleswitch,8103,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:9187,Deployability,release,release,9187,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.trimap. Contents . trimap(). scanpy.external.tl.trimap#. scanpy.external.tl.trimap(adata, n_components=2, *, n_inliers=10, n_outliers=5, n_random=5, metric='euclidean', weight_adj=500.0, lr=1000.0, n_iters=400, verbose=None, copy=False)[source]#; TriMap: Large-scale Dimensionality Reduction Using Triplets [Amid and Warmuth, 2019].; TriMap is a dimensionality reduction method that uses triplet constraints; to form a low-dimensional embedding of a set of points. The triplet; constraints are of the form âpoint i is closer to point j than point kâ.; The triplets are sampled from the high-dimensional representation of the; points and a weighting scheme is used to reflect the importance of each; triplet.; TriMap provides a significantly better global view of the data than the; other dimensionality reduction methods such t-SNE, LargeVis, and UMAP.; The global str",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:11288,Deployability,update,updates,11288,"The triplets are sampled from the high-dimensional representation of the; points and a weighting scheme is used to reflect the importance of each; triplet.; TriMap provides a significantly better global view of the data than the; other dimensionality reduction methods such t-SNE, LargeVis, and UMAP.; The global structure includes relative distances of the clusters, multiple; scales in the data, and the existence of possible outliers. We define a; global score to quantify the quality of an embedding in reflecting the; global structure of the data. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)Number of dimensions of the embedding. n_inliers int (default: 10)Number of inlier points for triplet constraints. n_outliers int (default: 5)Number of outlier points for triplet constraints. n_random int (default: 5)Number of random triplet constraints per point. metric Literal['angular', 'euclidean', 'hamming', 'manhattan'] (default: 'euclidean')Distance measure: âangularâ, âeuclideanâ, âhammingâ, âmanhattanâ. weight_adj float (default: 500.0)Adjusting the weights using a non-linear transformation. lr float (default: 1000.0)Learning rate. n_iters int (default: 400)Number of iterations. verbose bool | int | None (default: None)If True, print the progress report.; If None, sc.settings.verbosity is used. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields. X_trimapndarray, (obsm, shape=(n_samples, n_components), dtype float)TriMap coordinates of data. Example; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> pbmc = sc.datasets.pbmc68k_reduced(); >>> pbmc = sce.tl.trimap(pbmc, copy=True); >>> sce.pl.trimap(pbmc, color=['bulk_labels'], s=10). previous; scanpy.external.tl.palantir. next; scanpy.external.tl.sam. Contents; . trimap(). By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:7179,Performance,cache,cachedir,7179,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:8420,Security,hash,hashsolo,8420,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.trimap. Contents . trimap(). scanpy.external.tl.trimap#. scanpy.external.tl.trimap(adata, n_components=2, *, n_inliers=10, n_outliers=5, n_random=5, metric='euclidean', weight_",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:7447,Testability,log,logfile,7447,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:7486,Testability,log,logpath,7486,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:7792,Testability,log,logging,7792,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:7821,Testability,log,logging,7821, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.trimap.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:8105,Deployability,toggle,toggleswitch,8105,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.wishbone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:9189,Deployability,release,release,9189,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.wishbone. Contents . wishbone(). scanpy.external.tl.wishbone#. scanpy.external.tl.wishbone(adata, start_cell, *, branch=True, k=15, components=(1, 2, 3), num_waypoints=250)[source]#; Wishbone identifies bifurcating developmental trajectories from single-cell data; [Setty et al., 2016].; Wishbone is an algorithm for positioning single cells along bifurcating; developmental trajectories with high resolution. Wishbone uses multi-dimensional; single-cell data, such as mass cytometry or RNA-Seq data, as input and orders cells; according to their developmental progression, and it pinpoints bifurcation points; by labeling each cell as pre-bifurcation or as one of two post-bifurcation cell; fates. Note; More information and bug reports here. Parameters:. adata AnnDataAnnotated data matrix. start_cell strDesired start cell from obs_names. branch bool (default: True",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.wishbone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:7181,Performance,cache,cachedir,7181,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.wishbone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:8422,Security,hash,hashsolo,8422,"tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.wishbone. Contents . wishbone(). scanpy.external.tl.wishbone#. scanpy.external.tl.wishbone(adata, start_cell, *, branch=True, k=15, components=(1, 2, 3), num_waypoints=250)[sou",MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.wishbone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:7449,Testability,log,logfile,7449,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.wishbone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:7488,Testability,log,logpath,7488,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.wishbone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:7794,Testability,log,logging,7794,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.wishbone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html
https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:7823,Testability,log,logging,7823, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/external/generated/scanpy.external.tl.wishbone.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:9901,Availability,avail,available,9901,".external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering 3k PBMCs (legacy workflow). Contents . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seuratâs guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seuratâs authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_pa",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10016,Availability,down,download,10016,"anpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering 3k PBMCs (legacy workflow). Contents . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seuratâs guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seuratâs authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10443,Availability,down,download,10443,"ighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seuratâs guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seuratâs authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg1",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10522,Availability,down,download,10522,"BMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seuratâs guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seuratâs authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # u",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10795,Availability,error,errors,10795,"ed and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more co",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:21174,Availability,recover,recovered,21174,"n-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; B cells. 3; CD8A; CD8 T cells. 4; GNLY, NKG7; NK cells. 5; FCGR3A, MS4A7; FCGR3A+ Monocytes. 6; FCER1A, CST3; Dendritic Cells. 7; PPBP; Megakaryocytes. Let us also define a list of marker genes for later reference. marker_genes = [; *[""IL7R"", ""CD79A"", ""MS4A1"", ""CD8A"", ""CD8B"", ""LYZ"", ""CD14""],; *[""LGALS3"", ""S100A8"", ""GNLY"", ""NKG7"", ""KLRB1""],; *[""FCGR3A"", ""MS4A7"", ""FCER1A"", ""CST3"", ""PPBP""],; ]. Reload the object that has been save with the Wilcoxon Rank-Sum test result. adata = sc.read(results_file). Show the 10 top ranked genes per cluster 0, 1, â¦, 7 in a dataframe. pd.DataFrame(adata.uns[""rank_genes_groups""][""names""]).head(5). 0; 1; 2; 3; 4; 5; 6; 7. 0; RPS12; CD74; LST1; NKG7; CCL5; LYZ; HLA-DPA1; PF4. 1; LDHB; CD79A; FCER1G; GZMB; NKG7; S100A9; HLA-DPB1; SDPR. 2; RPS25; HLA-DRA; AIF1; GNLY; CST7; S100A",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:25414,Availability,down,down,25414,", legend_loc=""on data"", title="""", frameon=False, save="".pdf""; ). WARNING: saving figure to file figures/umap.pdf. Now that we annotated the cell types, let us visualize the marker genes. sc.pl.dotplot(adata, marker_genes, groupby=""leiden"");. There is also a very compact violin plot. sc.pl.stacked_violin(adata, marker_genes, groupby=""leiden"");. During the course of this analysis, the AnnData accumlated the following annotations. adata. AnnData object with n_obs Ã n_vars = 2638 Ã 1838; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'leiden'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'mean', 'std'; uns: 'hvg', 'leiden', 'leiden_colors', 'log1p', 'neighbors', 'pca', 'rank_genes_groups', 'umap'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'connectivities', 'distances'. # `compression='gzip'` saves disk space, and slightly slows down writing and subsequent reading; adata.write(results_file, compression=""gzip""). Get a rough overview of the file using h5ls, which has many options - for more details see here. The file format might still be subject to further optimization in the future. All reading functions will remain backwards-compatible, though.; If you want to share this file with people who merely want to use it for visualization, a simple way to reduce the file size is by removing the dense scaled and corrected data matrix. The file still contains the raw data used in the visualizations in adata.raw. adata.raw.to_adata().write(""./write/pbmc3k_withoutX.h5ad""). previous; Preprocessing and clustering. next; Integrating data using ingest and BBKNN. Contents; . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:8133,Deployability,toggle,toggleswitch,8133,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:9217,Deployability,release,release,9217,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering 3k PBMCs (legacy workflow). Contents . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seuratâs guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seuratâs authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomic",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:12944,Energy Efficiency,efficient,efficiently,12944,"ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that yield the highest fraction of counts in each single cell, across all cells. sc.pl.highest_expr_genes(adata, n_top=20). normalizing counts per cell; finished (0:00:00). Basic filtering:. sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). filtered out 19024 genes that are detected in less than 3 cells. Letâs assemble some information about mitochondrial genes, which are important for quality control.; Citing from âSimple Single Cellâ workflows (Lun, McCarthy & Marioni, 2017):. High proportions are indicative of poor-quality cells (Islam et al. 2014; Ilicic et al. 2016), possibly because of loss of cytoplasmic RNA from perforated cells. The reasoning is that mitochondria are larger than individual transcript molecules and less likely to escape through tears in the cell membrane. With pp.calculate_qc_metrics, we can compute many metrics very efficiently. # annotate the group of mitochondrial genes as ""mt""; adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(; adata, qc_vars=[""mt""], percent_top=None, log1p=False, inplace=True; ). A violin plot of some of the computed quality measures:. the number of genes expressed in the count matrix; the total counts per cell; the percentage of counts in mitochondrial genes. sc.pl.violin(; adata,; [""n_genes_by_counts"", ""total_counts"", ""pct_counts_mt""],; jitter=0.4,; multi_panel=True,; ). Remove cells that have too many mitochondrial genes expressed or too many total counts:. sc.pl.scatter(adata, x=""total_counts"", y=""pct_counts_mt""); sc.pl.scatter(adata, x=""total_counts"", y=""n_genes_by_counts""). Actually do the filtering by slicing the AnnData object. adata = adata[adata.obs.n_genes_by_counts < 2500, :]; adata = adata[adata.obs.pct_counts_mt < 5, :].copy(). Total-count normalize (library-size correct) the data matrix \(\mathbf{X}\) to 10",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:20055,Energy Efficiency,reduce,reduce,20055,"'leiden', the cluster labels (adata.obs, categorical) (0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:20268,Energy Efficiency,power,powerful,20268,"er genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:25842,Energy Efficiency,reduce,reduce,25842,"gend_loc=""on data"", title="""", frameon=False, save="".pdf""; ). WARNING: saving figure to file figures/umap.pdf. Now that we annotated the cell types, let us visualize the marker genes. sc.pl.dotplot(adata, marker_genes, groupby=""leiden"");. There is also a very compact violin plot. sc.pl.stacked_violin(adata, marker_genes, groupby=""leiden"");. During the course of this analysis, the AnnData accumlated the following annotations. adata. AnnData object with n_obs Ã n_vars = 2638 Ã 1838; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'leiden'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'mean', 'std'; uns: 'hvg', 'leiden', 'leiden_colors', 'log1p', 'neighbors', 'pca', 'rank_genes_groups', 'umap'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'connectivities', 'distances'. # `compression='gzip'` saves disk space, and slightly slows down writing and subsequent reading; adata.write(results_file, compression=""gzip""). Get a rough overview of the file using h5ls, which has many options - for more details see here. The file format might still be subject to further optimization in the future. All reading functions will remain backwards-compatible, though.; If you want to share this file with people who merely want to use it for visualization, a simple way to reduce the file size is by removing the dense scaled and corrected data matrix. The file still contains the raw data used in the visualizations in adata.raw. adata.raw.to_adata().write(""./write/pbmc3k_withoutX.h5ad""). previous; Preprocessing and clustering. next; Integrating data using ingest and BBKNN. Contents; . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:11561,Modifiability,variab,variable,11561,"yter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata.var_names_make_unique() # this is unnecessary if using `var_names='gene_ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that yield the highest fraction of counts in each single cell, across all cells. sc.pl.highest_expr_genes(adata, n_top=20). normalizing counts per cell; finished (0:00:00). Basic filtering:. sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). filtered out 19024 genes that are detected in less than 3 cells. Letâs assemble some information about mitochondrial genes, which are important for quality control.; Citing from âSimple Single Cellâ workflows (Lun, McCarthy & Marioni, 2017):. High pro",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:11577,Modifiability,variab,variables-axis,11577,"yter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata.var_names_make_unique() # this is unnecessary if using `var_names='gene_ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that yield the highest fraction of counts in each single cell, across all cells. sc.pl.highest_expr_genes(adata, n_top=20). normalizing counts per cell; finished (0:00:00). Basic filtering:. sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). filtered out 19024 genes that are detected in less than 3 cells. Letâs assemble some information about mitochondrial genes, which are important for quality control.; Citing from âSimple Single Cellâ workflows (Lun, McCarthy & Marioni, 2017):. High pro",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:14145,Modifiability,variab,variable,14145,"alse, inplace=True; ). A violin plot of some of the computed quality measures:. the number of genes expressed in the count matrix; the total counts per cell; the percentage of counts in mitochondrial genes. sc.pl.violin(; adata,; [""n_genes_by_counts"", ""total_counts"", ""pct_counts_mt""],; jitter=0.4,; multi_panel=True,; ). Remove cells that have too many mitochondrial genes expressed or too many total counts:. sc.pl.scatter(adata, x=""total_counts"", y=""pct_counts_mt""); sc.pl.scatter(adata, x=""total_counts"", y=""n_genes_by_counts""). Actually do the filtering by slicing the AnnData object. adata = adata[adata.obs.n_genes_by_counts < 2500, :]; adata = adata[adata.obs.pct_counts_mt < 5, :].copy(). Total-count normalize (library-size correct) the data matrix \(\mathbf{X}\) to 10,000 reads per cell, so that counts become comparable among cells. sc.pp.normalize_total(adata, target_sum=1e4). normalizing counts per cell; finished (0:00:00). Logarithmize the data:. sc.pp.log1p(adata). Identify highly-variable genes. sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5). extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). sc.pl.highly_variable_genes(adata). Set the .raw attribute of the AnnData object to the normalized and logarithmized raw gene expression for later use in differential testing and visualizations of gene expression. This simply freezes the state of the AnnData object. Note; You can get back an AnnData of the object in .raw by calling .raw.to_adata(). adata.raw = adata. Note; If you donât proceed below with correcting the data with sc.pp.regress_out and scaling it via sc.pp.scale, you can also get away without using .raw at all.; The result of the previous highly-variable-genes detection is stored as an annotation in .var.highly_variable and auto-detected by PCA an",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:14258,Modifiability,variab,variable,14258,"per cell; the percentage of counts in mitochondrial genes. sc.pl.violin(; adata,; [""n_genes_by_counts"", ""total_counts"", ""pct_counts_mt""],; jitter=0.4,; multi_panel=True,; ). Remove cells that have too many mitochondrial genes expressed or too many total counts:. sc.pl.scatter(adata, x=""total_counts"", y=""pct_counts_mt""); sc.pl.scatter(adata, x=""total_counts"", y=""n_genes_by_counts""). Actually do the filtering by slicing the AnnData object. adata = adata[adata.obs.n_genes_by_counts < 2500, :]; adata = adata[adata.obs.pct_counts_mt < 5, :].copy(). Total-count normalize (library-size correct) the data matrix \(\mathbf{X}\) to 10,000 reads per cell, so that counts become comparable among cells. sc.pp.normalize_total(adata, target_sum=1e4). normalizing counts per cell; finished (0:00:00). Logarithmize the data:. sc.pp.log1p(adata). Identify highly-variable genes. sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5). extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). sc.pl.highly_variable_genes(adata). Set the .raw attribute of the AnnData object to the normalized and logarithmized raw gene expression for later use in differential testing and visualizations of gene expression. This simply freezes the state of the AnnData object. Note; You can get back an AnnData of the object in .raw by calling .raw.to_adata(). adata.raw = adata. Note; If you donât proceed below with correcting the data with sc.pp.regress_out and scaling it via sc.pp.scale, you can also get away without using .raw at all.; The result of the previous highly-variable-genes detection is stored as an annotation in .var.highly_variable and auto-detected by PCA and hence, sc.pp.neighbors and subsequent manifold/graph tools. In that case, the step actually do the filtering below is unnecessary, too. Actually do",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:15041,Modifiability,variab,variable-genes,15041,"nts per cell; finished (0:00:00). Logarithmize the data:. sc.pp.log1p(adata). Identify highly-variable genes. sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5). extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). sc.pl.highly_variable_genes(adata). Set the .raw attribute of the AnnData object to the normalized and logarithmized raw gene expression for later use in differential testing and visualizations of gene expression. This simply freezes the state of the AnnData object. Note; You can get back an AnnData of the object in .raw by calling .raw.to_adata(). adata.raw = adata. Note; If you donât proceed below with correcting the data with sc.pp.regress_out and scaling it via sc.pp.scale, you can also get away without using .raw at all.; The result of the previous highly-variable-genes detection is stored as an annotation in .var.highly_variable and auto-detected by PCA and hence, sc.pp.neighbors and subsequent manifold/graph tools. In that case, the step actually do the filtering below is unnecessary, too. Actually do the filtering. adata = adata[:, adata.var.highly_variable]. Regress out effects of total counts per cell and the percentage of mitochondrial genes expressed. Scale the data to unit variance. sc.pp.regress_out(adata, [""total_counts"", ""pct_counts_mt""]). regressing out ['total_counts', 'pct_counts_mt']; sparse input is densified and may lead to high memory use; finished (0:00:02). Scale each gene to unit variance. Clip values exceeding standard deviation 10. sc.pp.scale(adata, max_value=10). Principal component analysis#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:7209,Performance,cache,cachedir,7209,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:11600,Performance,cache,cache,11600,"yter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata.var_names_make_unique() # this is unnecessary if using `var_names='gene_ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that yield the highest fraction of counts in each single cell, across all cells. sc.pl.highest_expr_genes(adata, n_top=20). normalizing counts per cell; finished (0:00:00). Basic filtering:. sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). filtered out 19024 genes that are detected in less than 3 cells. Letâs assemble some information about mitochondrial genes, which are important for quality control.; Citing from âSimple Single Cellâ workflows (Lun, McCarthy & Marioni, 2017):. High pro",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:11622,Performance,cache,cache,11622,"yter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata.var_names_make_unique() # this is unnecessary if using `var_names='gene_ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that yield the highest fraction of counts in each single cell, across all cells. sc.pl.highest_expr_genes(adata, n_top=20). normalizing counts per cell; finished (0:00:00). Basic filtering:. sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). filtered out 19024 genes that are detected in less than 3 cells. Letâs assemble some information about mitochondrial genes, which are important for quality control.; Citing from âSimple Single Cellâ workflows (Lun, McCarthy & Marioni, 2017):. High pro",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:11684,Performance,cache,cache,11684," view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata.var_names_make_unique() # this is unnecessary if using `var_names='gene_ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that yield the highest fraction of counts in each single cell, across all cells. sc.pl.highest_expr_genes(adata, n_top=20). normalizing counts per cell; finished (0:00:00). Basic filtering:. sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). filtered out 19024 genes that are detected in less than 3 cells. Letâs assemble some information about mitochondrial genes, which are important for quality control.; Citing from âSimple Single Cellâ workflows (Lun, McCarthy & Marioni, 2017):. High proportions are indicative of poor-quality cells (Islam et al. 2014; Ilicic et al. 2016), possibly because of loss of cytoplasmi",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:11695,Performance,cache,cache,11695," view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata.var_names_make_unique() # this is unnecessary if using `var_names='gene_ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that yield the highest fraction of counts in each single cell, across all cells. sc.pl.highest_expr_genes(adata, n_top=20). normalizing counts per cell; finished (0:00:00). Basic filtering:. sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). filtered out 19024 genes that are detected in less than 3 cells. Letâs assemble some information about mitochondrial genes, which are important for quality control.; Citing from âSimple Single Cellâ workflows (Lun, McCarthy & Marioni, 2017):. High proportions are indicative of poor-quality cells (Islam et al. 2014; Ilicic et al. 2016), possibly because of loss of cytoplasmi",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:18703,Performance,optimiz,optimizing,18703,"see below. It is potentially more faithful to the global connectivity of the manifold than tSNE, i.e., it better preserves trajectories. In some ocassions, you might still observe disconnected clusters and similar connectivity violations. They can usually be remedied by running:; sc.tl.paga(adata); sc.pl.paga(adata, plot=False) # remove `plot=False` if you want to see the coarse-grained graph; sc.tl.umap(adata, init_pos='paga'). sc.tl.umap(adata). computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:03). sc.pl.umap(adata, color=[""CST3"", ""NKG7"", ""PPBP""]). As we set the .raw attribute of adata, the previous plots showed the ârawâ (normalized, logarithmized, but uncorrected) gene expression. You can also plot the scaled and corrected gene expression by explicitly stating that you donât want to use .raw. sc.pl.umap(adata, color=[""CST3"", ""NKG7"", ""PPBP""], use_raw=False). Clustering the neighborhood graph#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) by Traag et al. (2018). Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. sc.tl.leiden(; adata,; resolution=0.9,; random_state=0,; flavor=""igraph"",; n_iterations=2,; directed=False,; ). running Leiden clustering; finished: found 8 clusters and added; 'leiden', the cluster labels (adata.obs, categorical) (0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25,",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:25645,Performance,optimiz,optimization,25645,"gend_loc=""on data"", title="""", frameon=False, save="".pdf""; ). WARNING: saving figure to file figures/umap.pdf. Now that we annotated the cell types, let us visualize the marker genes. sc.pl.dotplot(adata, marker_genes, groupby=""leiden"");. There is also a very compact violin plot. sc.pl.stacked_violin(adata, marker_genes, groupby=""leiden"");. During the course of this analysis, the AnnData accumlated the following annotations. adata. AnnData object with n_obs Ã n_vars = 2638 Ã 1838; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'leiden'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'mean', 'std'; uns: 'hvg', 'leiden', 'leiden_colors', 'log1p', 'neighbors', 'pca', 'rank_genes_groups', 'umap'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'connectivities', 'distances'. # `compression='gzip'` saves disk space, and slightly slows down writing and subsequent reading; adata.write(results_file, compression=""gzip""). Get a rough overview of the file using h5ls, which has many options - for more details see here. The file format might still be subject to further optimization in the future. All reading functions will remain backwards-compatible, though.; If you want to share this file with people who merely want to use it for visualization, a simple way to reduce the file size is by removing the dense scaled and corrected data matrix. The file still contains the raw data used in the visualizations in adata.raw. adata.raw.to_adata().write(""./write/pbmc3k_withoutX.h5ad""). previous; Preprocessing and clustering. next; Integrating data using ingest and BBKNN. Contents; . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:12365,Safety,detect,detected,12365,"th its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata.var_names_make_unique() # this is unnecessary if using `var_names='gene_ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that yield the highest fraction of counts in each single cell, across all cells. sc.pl.highest_expr_genes(adata, n_top=20). normalizing counts per cell; finished (0:00:00). Basic filtering:. sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). filtered out 19024 genes that are detected in less than 3 cells. Letâs assemble some information about mitochondrial genes, which are important for quality control.; Citing from âSimple Single Cellâ workflows (Lun, McCarthy & Marioni, 2017):. High proportions are indicative of poor-quality cells (Islam et al. 2014; Ilicic et al. 2016), possibly because of loss of cytoplasmic RNA from perforated cells. The reasoning is that mitochondria are larger than individual transcript molecules and less likely to escape through tears in the cell membrane. With pp.calculate_qc_metrics, we can compute many metrics very efficiently. # annotate the group of mitochondrial genes as ""mt""; adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(; adata, qc_vars=[""mt""], percent_top=None, log1p=False, inplace=True; ). A violin plot of some of the computed quality measures:. the number of genes expressed in the count matrix; the total counts per cell; the percentage of counts in mitochondrial genes. sc.pl.violin",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:15056,Safety,detect,detection,15056,"nts per cell; finished (0:00:00). Logarithmize the data:. sc.pp.log1p(adata). Identify highly-variable genes. sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5). extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). sc.pl.highly_variable_genes(adata). Set the .raw attribute of the AnnData object to the normalized and logarithmized raw gene expression for later use in differential testing and visualizations of gene expression. This simply freezes the state of the AnnData object. Note; You can get back an AnnData of the object in .raw by calling .raw.to_adata(). adata.raw = adata. Note; If you donât proceed below with correcting the data with sc.pp.regress_out and scaling it via sc.pp.scale, you can also get away without using .raw at all.; The result of the previous highly-variable-genes detection is stored as an annotation in .var.highly_variable and auto-detected by PCA and hence, sc.pp.neighbors and subsequent manifold/graph tools. In that case, the step actually do the filtering below is unnecessary, too. Actually do the filtering. adata = adata[:, adata.var.highly_variable]. Regress out effects of total counts per cell and the percentage of mitochondrial genes expressed. Scale the data to unit variance. sc.pp.regress_out(adata, [""total_counts"", ""pct_counts_mt""]). regressing out ['total_counts', 'pct_counts_mt']; sparse input is densified and may lead to high memory use; finished (0:00:02). Scale each gene to unit variance. Clip values exceeding standard deviation 10. sc.pp.scale(adata, max_value=10). Principal component analysis#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:15126,Safety,detect,detected,15126," Identify highly-variable genes. sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5). extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). sc.pl.highly_variable_genes(adata). Set the .raw attribute of the AnnData object to the normalized and logarithmized raw gene expression for later use in differential testing and visualizations of gene expression. This simply freezes the state of the AnnData object. Note; You can get back an AnnData of the object in .raw by calling .raw.to_adata(). adata.raw = adata. Note; If you donât proceed below with correcting the data with sc.pp.regress_out and scaling it via sc.pp.scale, you can also get away without using .raw at all.; The result of the previous highly-variable-genes detection is stored as an annotation in .var.highly_variable and auto-detected by PCA and hence, sc.pp.neighbors and subsequent manifold/graph tools. In that case, the step actually do the filtering below is unnecessary, too. Actually do the filtering. adata = adata[:, adata.var.highly_variable]. Regress out effects of total counts per cell and the percentage of mitochondrial genes expressed. Scale the data to unit variance. sc.pp.regress_out(adata, [""total_counts"", ""pct_counts_mt""]). regressing out ['total_counts', 'pct_counts_mt']; sparse input is densified and may lead to high memory use; finished (0:00:02). Scale each gene to unit variance. Clip values exceeding standard deviation 10. sc.pp.scale(adata, max_value=10). Principal component analysis#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:01:01). We can make a scatter plot in the PCA coordinates, but we will not use",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:18684,Safety,detect,detection,18684,"see below. It is potentially more faithful to the global connectivity of the manifold than tSNE, i.e., it better preserves trajectories. In some ocassions, you might still observe disconnected clusters and similar connectivity violations. They can usually be remedied by running:; sc.tl.paga(adata); sc.pl.paga(adata, plot=False) # remove `plot=False` if you want to see the coarse-grained graph; sc.tl.umap(adata, init_pos='paga'). sc.tl.umap(adata). computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:03). sc.pl.umap(adata, color=[""CST3"", ""NKG7"", ""PPBP""]). As we set the .raw attribute of adata, the previous plots showed the ârawâ (normalized, logarithmized, but uncorrected) gene expression. You can also plot the scaled and corrected gene expression by explicitly stating that you donât want to use .raw. sc.pl.umap(adata, color=[""CST3"", ""NKG7"", ""PPBP""], use_raw=False). Clustering the neighborhood graph#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) by Traag et al. (2018). Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. sc.tl.leiden(; adata,; resolution=0.9,; random_state=0,; flavor=""igraph"",; n_iterations=2,; directed=False,; ). running Leiden clustering; finished: found 8 clusters and added; 'leiden', the cluster labels (adata.obs, categorical) (0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25,",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:21174,Safety,recover,recovered,21174,"n-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; B cells. 3; CD8A; CD8 T cells. 4; GNLY, NKG7; NK cells. 5; FCGR3A, MS4A7; FCGR3A+ Monocytes. 6; FCER1A, CST3; Dendritic Cells. 7; PPBP; Megakaryocytes. Let us also define a list of marker genes for later reference. marker_genes = [; *[""IL7R"", ""CD79A"", ""MS4A1"", ""CD8A"", ""CD8B"", ""LYZ"", ""CD14""],; *[""LGALS3"", ""S100A8"", ""GNLY"", ""NKG7"", ""KLRB1""],; *[""FCGR3A"", ""MS4A7"", ""FCER1A"", ""CST3"", ""PPBP""],; ]. Reload the object that has been save with the Wilcoxon Rank-Sum test result. adata = sc.read(results_file). Show the 10 top ranked genes per cluster 0, 1, â¦, 7 in a dataframe. pd.DataFrame(adata.uns[""rank_genes_groups""][""names""]).head(5). 0; 1; 2; 3; 4; 5; 6; 7. 0; RPS12; CD74; LST1; NKG7; CCL5; LYZ; HLA-DPA1; PF4. 1; LDHB; CD79A; FCER1G; GZMB; NKG7; S100A9; HLA-DPB1; SDPR. 2; RPS25; HLA-DRA; AIF1; GNLY; CST7; S100A",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:8450,Security,hash,hashsolo,8450,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering 3k PBMCs (legacy workflow). Contents . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering t,MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:7477,Testability,log,logfile,7477,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:7516,Testability,log,logpath,7516,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:7822,Testability,log,logging,7822,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:7851,Testability,log,logging,7851, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10845,Testability,log,logging,10845,"ist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:14577,Testability,log,logarithmized,14577,"unts_mt""); sc.pl.scatter(adata, x=""total_counts"", y=""n_genes_by_counts""). Actually do the filtering by slicing the AnnData object. adata = adata[adata.obs.n_genes_by_counts < 2500, :]; adata = adata[adata.obs.pct_counts_mt < 5, :].copy(). Total-count normalize (library-size correct) the data matrix \(\mathbf{X}\) to 10,000 reads per cell, so that counts become comparable among cells. sc.pp.normalize_total(adata, target_sum=1e4). normalizing counts per cell; finished (0:00:00). Logarithmize the data:. sc.pp.log1p(adata). Identify highly-variable genes. sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5). extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). sc.pl.highly_variable_genes(adata). Set the .raw attribute of the AnnData object to the normalized and logarithmized raw gene expression for later use in differential testing and visualizations of gene expression. This simply freezes the state of the AnnData object. Note; You can get back an AnnData of the object in .raw by calling .raw.to_adata(). adata.raw = adata. Note; If you donât proceed below with correcting the data with sc.pp.regress_out and scaling it via sc.pp.scale, you can also get away without using .raw at all.; The result of the previous highly-variable-genes detection is stored as an annotation in .var.highly_variable and auto-detected by PCA and hence, sc.pp.neighbors and subsequent manifold/graph tools. In that case, the step actually do the filtering below is unnecessary, too. Actually do the filtering. adata = adata[:, adata.var.highly_variable]. Regress out effects of total counts per cell and the percentage of mitochondrial genes expressed. Scale the data to unit variance. sc.pp.regress_out(adata, [""total_counts"", ""pct_counts_mt""]). regressing out ['total_counts', 'pct_counts_mt']; sparse ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:14641,Testability,test,testing,14641,"unts_mt""); sc.pl.scatter(adata, x=""total_counts"", y=""n_genes_by_counts""). Actually do the filtering by slicing the AnnData object. adata = adata[adata.obs.n_genes_by_counts < 2500, :]; adata = adata[adata.obs.pct_counts_mt < 5, :].copy(). Total-count normalize (library-size correct) the data matrix \(\mathbf{X}\) to 10,000 reads per cell, so that counts become comparable among cells. sc.pp.normalize_total(adata, target_sum=1e4). normalizing counts per cell; finished (0:00:00). Logarithmize the data:. sc.pp.log1p(adata). Identify highly-variable genes. sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5). extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). sc.pl.highly_variable_genes(adata). Set the .raw attribute of the AnnData object to the normalized and logarithmized raw gene expression for later use in differential testing and visualizations of gene expression. This simply freezes the state of the AnnData object. Note; You can get back an AnnData of the object in .raw by calling .raw.to_adata(). adata.raw = adata. Note; If you donât proceed below with correcting the data with sc.pp.regress_out and scaling it via sc.pp.scale, you can also get away without using .raw at all.; The result of the previous highly-variable-genes detection is stored as an annotation in .var.highly_variable and auto-detected by PCA and hence, sc.pp.neighbors and subsequent manifold/graph tools. In that case, the step actually do the filtering below is unnecessary, too. Actually do the filtering. adata = adata[:, adata.var.highly_variable]. Regress out effects of total counts per cell and the percentage of mitochondrial genes expressed. Scale the data to unit variance. sc.pp.regress_out(adata, [""total_counts"", ""pct_counts_mt""]). regressing out ['total_counts', 'pct_counts_mt']; sparse ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:16560,Testability,log,log,16560,"sing out ['total_counts', 'pct_counts_mt']; sparse input is densified and may lead to high memory use; finished (0:00:02). Scale each gene to unit variance. Clip values exceeding standard deviation 10. sc.pp.scale(adata, max_value=10). Principal component analysis#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:01:01). We can make a scatter plot in the PCA coordinates, but we will not use that later on. sc.pl.pca(adata, color=""CST3""). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function sc.tl.louvain() or tSNE sc.tl.tsne(). In our experience, often a rough estimate of the number of PCs does fine. sc.pl.pca_variance_ratio(adata, log=True). Save the result. adata.write(results_file). adata. AnnData object with n_obs Ã n_vars = 2638 Ã 1838; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'mean', 'std'; uns: 'log1p', 'hvg', 'pca'; obsm: 'X_pca'; varm: 'PCs'. Computing the neighborhood graph#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. You might simply use default values here. For the sake of reproducing Seuratâs results, letâs take the following values. sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40). computing neighbors; using 'X_pca' with n_pcs = 40; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:01). Embedding the neighborhood g",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:18318,Testability,log,logarithmized,18318,"). computing neighbors; using 'X_pca' with n_pcs = 40; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:01). Embedding the neighborhood graph#; We suggest embedding the graph in two dimensions using UMAP (McInnes et al., 2018), see below. It is potentially more faithful to the global connectivity of the manifold than tSNE, i.e., it better preserves trajectories. In some ocassions, you might still observe disconnected clusters and similar connectivity violations. They can usually be remedied by running:; sc.tl.paga(adata); sc.pl.paga(adata, plot=False) # remove `plot=False` if you want to see the coarse-grained graph; sc.tl.umap(adata, init_pos='paga'). sc.tl.umap(adata). computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:03). sc.pl.umap(adata, color=[""CST3"", ""NKG7"", ""PPBP""]). As we set the .raw attribute of adata, the previous plots showed the ârawâ (normalized, logarithmized, but uncorrected) gene expression. You can also plot the scaled and corrected gene expression by explicitly stating that you donât want to use .raw. sc.pl.umap(adata, color=[""CST3"", ""NKG7"", ""PPBP""], use_raw=False). Clustering the neighborhood graph#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) by Traag et al. (2018). Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. sc.tl.leiden(; adata,; resolution=0.9,; random_state=0,; flavor=""igraph"",; n_iterations=2,; directed=False,; ). running Leiden clustering; finished: found 8 clusters and added; 'leiden', the cluster labels (adata.obs, categorical) (0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker gen",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:19537,Testability,test,test,19537,"""NKG7"", ""PPBP""], use_raw=False). Clustering the neighborhood graph#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) by Traag et al. (2018). Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. sc.tl.leiden(; adata,; resolution=0.9,; random_state=0,; flavor=""igraph"",; n_iterations=2,; directed=False,; ). running Leiden clustering; finished: found 8 clusters and added; 'leiden', the cluster labels (adata.obs, categorical) (0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:19594,Testability,test,test,19594,"aph#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) by Traag et al. (2018). Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. sc.tl.leiden(; adata,; resolution=0.9,; random_state=0,; flavor=""igraph"",; n_iterations=2,; directed=False,; ). running Leiden clustering; finished: found 8 clusters and added; 'leiden', the cluster labels (adata.obs, categorical) (0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alte",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:19837,Testability,log,logfoldchanges,19837,"ich we already computed in the previous section. sc.tl.leiden(; adata,; resolution=0.9,; random_state=0,; flavor=""igraph"",; n_iterations=2,; directed=False,; ). running Leiden clustering; finished: found 8 clusters and added; 'leiden', the cluster labels (adata.obs, categorical) (0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:20128,Testability,test,test,20128,"0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:20290,Testability,test,testing,20290,"er genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:20610,Testability,log,logistic,20610,"""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; B cells. 3; CD8A; CD8 T cells. 4; GNLY, NKG7; NK cells. 5; FCGR3A, MS4A7; FCGR3A+ Monocytes. 6; FCER1A, CST3; Dendritic Cells. 7; PPBP; Megakaryocytes. Let us also define a list of marker genes for later reference. marker_genes = [; *[""IL7R"", ""CD79A"", ""MS4A1"", ""CD8A"", ""CD8B"", ""LYZ"", ""CD14""],; *[""",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:20801,Testability,test,tests,20801,"dexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; B cells. 3; CD8A; CD8 T cells. 4; GNLY, NKG7; NK cells. 5; FCGR3A, MS4A7; FCGR3A+ Monocytes. 6; FCER1A, CST3; Dendritic Cells. 7; PPBP; Megakaryocytes. Let us also define a list of marker genes for later reference. marker_genes = [; *[""IL7R"", ""CD79A"", ""MS4A1"", ""CD8A"", ""CD8B"", ""LYZ"", ""CD14""],; *[""LGALS3"", ""S100A8"", ""GNLY"", ""NKG7"", ""KLRB1""],; *[""FCGR3A"", ""MS4A7"", ""FCER1A"", ""CST3"", ""PPBP""],; ]. Reload the object that has been save with the Wilcoxon Rank-Sum",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:20911,Testability,log,logreg,20911,"vals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; B cells. 3; CD8A; CD8 T cells. 4; GNLY, NKG7; NK cells. 5; FCGR3A, MS4A7; FCGR3A+ Monocytes. 6; FCER1A, CST3; Dendritic Cells. 7; PPBP; Megakaryocytes. Let us also define a list of marker genes for later reference. marker_genes = [; *[""IL7R"", ""CD79A"", ""MS4A1"", ""CD8A"", ""CD8B"", ""LYZ"", ""CD14""],; *[""LGALS3"", ""S100A8"", ""GNLY"", ""NKG7"", ""KLRB1""],; *[""FCGR3A"", ""MS4A7"", ""FCER1A"", ""CST3"", ""PPBP""],; ]. Reload the object that has been save with the Wilcoxon Rank-Sum test result. adata = sc.read(results_file). Show the 10 top ranked genes per cluster 0, 1, â¦, 7 in a dataframe. pd.DataFrame(adata.uns[""rank_gen",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:21087,Testability,test,test,21087,"n-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; B cells. 3; CD8A; CD8 T cells. 4; GNLY, NKG7; NK cells. 5; FCGR3A, MS4A7; FCGR3A+ Monocytes. 6; FCER1A, CST3; Dendritic Cells. 7; PPBP; Megakaryocytes. Let us also define a list of marker genes for later reference. marker_genes = [; *[""IL7R"", ""CD79A"", ""MS4A1"", ""CD8A"", ""CD8B"", ""LYZ"", ""CD14""],; *[""LGALS3"", ""S100A8"", ""GNLY"", ""NKG7"", ""KLRB1""],; *[""FCGR3A"", ""MS4A7"", ""FCER1A"", ""CST3"", ""PPBP""],; ]. Reload the object that has been save with the Wilcoxon Rank-Sum test result. adata = sc.read(results_file). Show the 10 top ranked genes per cluster 0, 1, â¦, 7 in a dataframe. pd.DataFrame(adata.uns[""rank_genes_groups""][""names""]).head(5). 0; 1; 2; 3; 4; 5; 6; 7. 0; RPS12; CD74; LST1; NKG7; CCL5; LYZ; HLA-DPA1; PF4. 1; LDHB; CD79A; FCER1G; GZMB; NKG7; S100A9; HLA-DPB1; SDPR. 2; RPS25; HLA-DRA; AIF1; GNLY; CST7; S100A",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:21760,Testability,test,test,21760,", we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; B cells. 3; CD8A; CD8 T cells. 4; GNLY, NKG7; NK cells. 5; FCGR3A, MS4A7; FCGR3A+ Monocytes. 6; FCER1A, CST3; Dendritic Cells. 7; PPBP; Megakaryocytes. Let us also define a list of marker genes for later reference. marker_genes = [; *[""IL7R"", ""CD79A"", ""MS4A1"", ""CD8A"", ""CD8B"", ""LYZ"", ""CD14""],; *[""LGALS3"", ""S100A8"", ""GNLY"", ""NKG7"", ""KLRB1""],; *[""FCGR3A"", ""MS4A7"", ""FCER1A"", ""CST3"", ""PPBP""],; ]. Reload the object that has been save with the Wilcoxon Rank-Sum test result. adata = sc.read(results_file). Show the 10 top ranked genes per cluster 0, 1, â¦, 7 in a dataframe. pd.DataFrame(adata.uns[""rank_genes_groups""][""names""]).head(5). 0; 1; 2; 3; 4; 5; 6; 7. 0; RPS12; CD74; LST1; NKG7; CCL5; LYZ; HLA-DPA1; PF4. 1; LDHB; CD79A; FCER1G; GZMB; NKG7; S100A9; HLA-DPB1; SDPR. 2; RPS25; HLA-DRA; AIF1; GNLY; CST7; S100A8; HLA-DRA; GNG11. 3; RPS27; CD79B; COTL1; CTSW; B2M; TYROBP; HLA-DRB1; PPBP. 4; RPS6; HLA-DPB1; FCGR3A; PRF1; GZMA; FTL; CD74; NRGN. Get a table with the scores and groups. result = adata.uns[""rank_genes_groups""]; groups = result[""names""].dtype.names; pd.DataFrame(; {; group + ""_"" + key[:1]: result[key][group]; for group in groups; for key in [""names"", ""pvals""]; }; ).head(5). 0_n; 0_p; 1_n; 1_p; 2_n; 2_p; 3_n; 3_p; 4_n; 4_p; 5_n; 5_p; 6_n; 6_p; 7_n; 7_p. 0; RPS12; 4.164150e-226; CD74; 2.487145e-183; LST1; 4.980059e-88; NKG7; 3.591782e-93; CCL5; 4.054732e-126; LYZ; 2.844372e-249; HLA-DPA1; 5.422417e-21; PF4; 4.7",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:9665,Usability,guid,guided,9665,"canpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering 3k PBMCs (legacy workflow). Contents . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seuratâs guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seuratâs authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:11062,Usability,learn,learn,11062,"eates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more comprehensive introduction to AnnData. adata.var_names_make_unique() # this is unnecessary if using `var_names='gene_ids'` in `sc.read_10x_mtx`. adata. AnnData object with n_obs Ã n_vars = 2700 Ã 32738; var: 'gene_ids'. Preprocessing#; Show those genes that",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:14693,Usability,simpl,simply,14693," the AnnData object. adata = adata[adata.obs.n_genes_by_counts < 2500, :]; adata = adata[adata.obs.pct_counts_mt < 5, :].copy(). Total-count normalize (library-size correct) the data matrix \(\mathbf{X}\) to 10,000 reads per cell, so that counts become comparable among cells. sc.pp.normalize_total(adata, target_sum=1e4). normalizing counts per cell; finished (0:00:00). Logarithmize the data:. sc.pp.log1p(adata). Identify highly-variable genes. sc.pp.highly_variable_genes(adata, min_mean=0.0125, max_mean=3, min_disp=0.5). extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). sc.pl.highly_variable_genes(adata). Set the .raw attribute of the AnnData object to the normalized and logarithmized raw gene expression for later use in differential testing and visualizations of gene expression. This simply freezes the state of the AnnData object. Note; You can get back an AnnData of the object in .raw by calling .raw.to_adata(). adata.raw = adata. Note; If you donât proceed below with correcting the data with sc.pp.regress_out and scaling it via sc.pp.scale, you can also get away without using .raw at all.; The result of the previous highly-variable-genes detection is stored as an annotation in .var.highly_variable and auto-detected by PCA and hence, sc.pp.neighbors and subsequent manifold/graph tools. In that case, the step actually do the filtering below is unnecessary, too. Actually do the filtering. adata = adata[:, adata.var.highly_variable]. Regress out effects of total counts per cell and the percentage of mitochondrial genes expressed. Scale the data to unit variance. sc.pp.regress_out(adata, [""total_counts"", ""pct_counts_mt""]). regressing out ['total_counts', 'pct_counts_mt']; sparse input is densified and may lead to high memory use; finished (0:00:02). Scale each gene to unit variance. Clip ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:17147,Usability,simpl,simply,17147,"ata, color=""CST3""). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function sc.tl.louvain() or tSNE sc.tl.tsne(). In our experience, often a rough estimate of the number of PCs does fine. sc.pl.pca_variance_ratio(adata, log=True). Save the result. adata.write(results_file). adata. AnnData object with n_obs Ã n_vars = 2638 Ã 1838; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'mean', 'std'; uns: 'log1p', 'hvg', 'pca'; obsm: 'X_pca'; varm: 'PCs'. Computing the neighborhood graph#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. You might simply use default values here. For the sake of reproducing Seuratâs results, letâs take the following values. sc.pp.neighbors(adata, n_neighbors=10, n_pcs=40). computing neighbors; using 'X_pca' with n_pcs = 40; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:01). Embedding the neighborhood graph#; We suggest embedding the graph in two dimensions using UMAP (McInnes et al., 2018), see below. It is potentially more faithful to the global connectivity of the manifold than tSNE, i.e., it better preserves trajectories. In some ocassions, you might still observe disconnected clusters and similar connectivity violations. They can usually be remedied by running:; sc.tl.paga(adata); sc.pl.paga(adata, plot=False) # remove `plot=False` if you want to see the coarse-grained graph; sc.tl.umap(adata, init_pos='paga'). sc.tl.umap(adata). computing UMAP; finished: added; 'X_umap', UMAP coordinates (a",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:19491,Usability,simpl,simplest,19491,"""NKG7"", ""PPBP""], use_raw=False). Clustering the neighborhood graph#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) by Traag et al. (2018). Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. sc.tl.leiden(; adata,; resolution=0.9,; random_state=0,; flavor=""igraph"",; n_iterations=2,; directed=False,; ). running Leiden clustering; finished: found 8 clusters and added; 'leiden', the cluster labels (adata.obs, categorical) (0:00:00). Plot the clusters, which agree quite well with the result of Seurat. sc.pl.umap(adata, color=[""leiden"", ""CST3"", ""NKG7""]). Save the result. adata.write(results_file). Finding marker genes#; Let us compute a ranking for the highly differential genes in each cluster. For this, by default, the .raw attribute of AnnData is used in case it has been initialized before. The simplest and fastest method to do so is the t-test. sc.tl.rank_genes_groups(adata, ""leiden"", method=""t-test""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00). sc.settings.verbosity = 2 # reduce the verbosity. The result of a Wilcoxon rank-sum (Mann-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:25828,Usability,simpl,simple,25828,"gend_loc=""on data"", title="""", frameon=False, save="".pdf""; ). WARNING: saving figure to file figures/umap.pdf. Now that we annotated the cell types, let us visualize the marker genes. sc.pl.dotplot(adata, marker_genes, groupby=""leiden"");. There is also a very compact violin plot. sc.pl.stacked_violin(adata, marker_genes, groupby=""leiden"");. During the course of this analysis, the AnnData accumlated the following annotations. adata. AnnData object with n_obs Ã n_vars = 2638 Ã 1838; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'leiden'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'mean', 'std'; uns: 'hvg', 'leiden', 'leiden_colors', 'log1p', 'neighbors', 'pca', 'rank_genes_groups', 'umap'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'connectivities', 'distances'. # `compression='gzip'` saves disk space, and slightly slows down writing and subsequent reading; adata.write(results_file, compression=""gzip""). Get a rough overview of the file using h5ls, which has many options - for more details see here. The file format might still be subject to further optimization in the future. All reading functions will remain backwards-compatible, though.; If you want to share this file with people who merely want to use it for visualization, a simple way to reduce the file size is by removing the dense scaled and corrected data matrix. The file still contains the raw data used in the visualizations in adata.raw. adata.raw.to_adata().write(""./write/pbmc3k_withoutX.h5ad""). previous; Preprocessing and clustering. next; Integrating data using ingest and BBKNN. Contents; . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/basics/clustering-2017.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:13375,Availability,down,downstream,13375,"counts_mt. sc.pl.scatter(adata, ""total_counts"", ""n_genes_by_counts"", color=""pct_counts_mt""). Based on the QC metric plots, one could now remove cells that have too many mitochondrial genes expressed or too many total counts by setting manual or automatic thresholds. However, sometimes what appears to be poor QC metrics can be driven by real biology so we suggest starting with a very permissive filtering strategy and revisiting it at a later point. We therefore now only filter cells with less than 100 genes expressed and genes that are detected in less than 3 cells.; Additionally, it is important to note that for datasets with multiple batches, quality control should be performed for each sample individually as quality control thresholds can very substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:15983,Availability,down,downside,15983,"ce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen flavor. sc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key=""sample""). sc.pl.highly_variable_genes(adata). Dimensionality Reduction#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function leiden() or tsne(). In our experience, there does not seem to be signifigant downside to overestimating the numer of principal components. sc.pl.pca_variance_ratio(adata, n_pcs=50, log=True). You can also plot the principal components to see if there are any potentially undesired features (e.g. batch, QC metrics) driving signifigant variation in this dataset. In this case, there isnât anything too alarming, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data co",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:19243,Availability,avail,available,19243,"unts"", ""pct_counts_mt"", ""log1p_n_genes_by_counts""],; wspace=0.5,; ncols=2,; ). Manual cell-type annotation#. Note; This section of the tutorial is expanded upon using prior knowledge resources like automated assignment and gene enrichment in the scverse tutorial here. Cell type annotation is laborous and repetitive task, one which typically requires multiple rounds of subclustering and re-annotation. Itâs difficult to show the entirety of the process in this tutorial, but we aim to show how the tools scanpy provides assist in this process.; We have now reached a point where we have obtained a set of cells with decent quality, and we can proceed to their annotation to known cell types. Typically, this is done using genes that are exclusively expressed by a given cell type, or in other words these genes are the marker genes of the cell types, and are thus used to distinguish the heterogeneous groups of cells in our data. Previous efforts have collected and curated various marker genes into available resources, such as CellMarker, TF-Marker, and PanglaoDB. The cellxgene gene expression tool can also be quite useful to see which cell types a gene has been expressed in across many existing datasets.; Commonly and classically, cell type annotation uses those marker genes subsequent to the grouping of the cells into clusters. So, letâs generate a set of clustering solutions which we can then use to annotate our cell types. Here, we will use the Leiden clustering algorithm which will extract cell communities from our nearest neighbours graph. for res in [0.02, 0.5, 2.0]:; sc.tl.leiden(; adata, key_added=f""leiden_res_{res:4.2f}"", resolution=res, flavor=""igraph""; ). Notably, the number of clusters that we define is largely arbitrary, and so is the resolution parameter that we use to control for it. As such, the number of clusters is ultimately bound to the stable and biologically-meaningful groups that we can ultimately distringuish, typically done by experts in the correspond",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:8107,Deployability,toggle,toggleswitch,8107,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:9191,Deployability,release,release,9191,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering. Contents . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Clustering; Re-assess quality control and cell filtering; Manual cell-type annotation; Marker gene set; Differentially-expressed Genes as Markers. Preprocessing and clustering#. # Core scverse libraries; import scanpy as sc; import anndata as ad. # Data retrieval; import pooch. sc.settings.set_figure_params(dpi=50, facecolor=""white""). The data used in this basic preprocessing and clustering tutorial was collected from bone marrow mononuclear cells of healthy human donors and was part of openproblemâs NeurIPS 2021 benchmarking dataset [Luecken et al., 2021]. The samples used in this tutorial were measured using the 10X Multiome Gene Expression and Chromatin Accessability kit.; We are re",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17211,Deployability,integrat,integrate,17211,"C metrics) driving signifigant variation in this dataset. In this case, there isnât anything too alarming, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; co",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17265,Deployability,integrat,integration,17265,"C metrics) driving signifigant variation in this dataset. In this case, there isnât anything too alarming, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; co",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17339,Deployability,integrat,integration,17339,"g, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; color=[""leiden"", ""log1p_total_counts"", ""pct_counts_mt"", ""log1p_n_genes_by_counts""],; wspace=0.5,; ncols=2,",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:14980,Energy Efficiency,reduce,reduce,14980," out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes the data to a âsize factorâ such as the median count depth in the dataset, ten thousand (CP10k) or one million (CPM, counts per million). The size factor for count depth scaling can be controlled via target_sum in pp.normalize_total. We are applying median count depth normalization with log1p transformation (AKA log1PF). # Saving count data; adata.layers[""counts""] = adata.X.copy(). # Normalizing to median total counts; sc.pp.normalize_total(adata); # Logarithmize the data; sc.pp.log1p(adata). Feature selection#; As a next step, we want to reduce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen flavor. sc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key=""sample""). sc.pl.highly_variable_genes(adata). Dimensionality Reduction#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function leiden() or tsne(). In our experience, there does not seem to be signifigant downside to over",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:20894,Energy Efficiency,adapt,adapted,20894,"efine is largely arbitrary, and so is the resolution parameter that we use to control for it. As such, the number of clusters is ultimately bound to the stable and biologically-meaningful groups that we can ultimately distringuish, typically done by experts in the corresponding field or by using expert-curated prior knowledge in the form of markers. sc.pl.umap(; adata,; color=[""leiden_res_0.02"", ""leiden_res_0.50"", ""leiden_res_2.00""],; legend_loc=""on data"",; ). sc.pl.umap(; adata,; color=[""leiden_res_0.02"", ""leiden_res_0.50"", ""leiden_res_2.00""],; legend_loc=""on data"",; ). Though UMAPs should not be over-interpreted, here we can already see that in the highest resolution our data is over-clustered, while the lowest resolution is likely grouping cells which belong to distinct cell identities. Marker gene set#; Letâs define a set of marker genes for the main cell types that we expect to see in this dataset. These were adapted from Single Cell Best Practices annotation chapter, for a more detailed overview and best practices in cell type annotation, we refer the user to it. marker_genes = {; ""CD14+ Mono"": [""FCN1"", ""CD14""],; ""CD16+ Mono"": [""TCF7L2"", ""FCGR3A"", ""LYN""],; # Note: DMXL2 should be negative; ""cDC2"": [""CST3"", ""COTL1"", ""LYZ"", ""DMXL2"", ""CLEC10A"", ""FCER1A""],; ""Erythroblast"": [""MKI67"", ""HBA1"", ""HBB""],; # Note HBM and GYPA are negative markers; ""Proerythroblast"": [""CDK6"", ""SYNGR1"", ""HBM"", ""GYPA""],; ""NK"": [""GNLY"", ""NKG7"", ""CD247"", ""FCER1G"", ""TYROBP"", ""KLRG1"", ""FCGR3A""],; ""ILC"": [""ID2"", ""PLCG2"", ""GNLY"", ""SYNE1""],; ""Naive CD20+ B"": [""MS4A1"", ""IL4R"", ""IGHD"", ""FCRL1"", ""IGHM""],; # Note IGHD and IGHM are negative markers; ""B cells"": [; ""MS4A1"",; ""ITGB1"",; ""COL4A4"",; ""PRDM1"",; ""IRF4"",; ""PAX5"",; ""BCL11A"",; ""BLK"",; ""IGHD"",; ""IGHM"",; ],; ""Plasma cells"": [""MZB1"", ""HSP90B1"", ""FNDC3B"", ""PRDM1"", ""IGKC"", ""JCHAIN""],; # Note PAX5 is a negative marker; ""Plasmablast"": [""XBP1"", ""PRDM1"", ""PAX5""],; ""CD4+ T"": [""CD4"", ""IL7R"", ""TRBC2""],; ""CD8+ T"": [""CD8A"", ""CD8B"", ""GZMK"", ""GZMA"", ""CCL5"", ""GZMB""",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:25022,Energy Efficiency,power,powerful,25022,"sing key=dendrogram_leiden_res_0.50). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently. We can then use these genes to figure out what cell types weâre looking at. For example, Cluster 7 is expressing NKG7 and GNLY, suggesting these are NK cells.; To create your own plots, or use a more automated approach, the differentially expressed genes can be extracted in a convenient format with scanpy.get.rank_genes_groups_df(). sc.get.rank_genes_groups_df(adata, group=""7"").head(5). names; scores; logfoldchanges; pvals; pvals_adj. 0; NKG7; 35.376785; 6.544684; 3.885326e-274; 9.102153e-270. 1; KLRD1; 33.815022; 5.840619; 1.186288e-250; 1.389558e-246. 2; GNLY; 33.775005; 7.383827; 4.592379e-250; 3.586189e-246. 3; CST7; 33.003643; 5.238780; 7.201598e-239; 4.217796e-235. 4; PRF1; 32.752277; 5.397196; 2.817787e-235; 1.320246e-231. dc_cluster_genes = sc.get.rank_genes_groups_df(adata, group=""7"").head(5)[""names""]; sc.pl.umap(; adata,; color=[*dc_cluster_genes, ""leiden_res_0.50""],; legend_loc=""on data"",; frameon=False,; ncols=3,; ). You may have noticed that the p-values found here are extremely low. This is due to the statistical test being performed considering each cell as an independent sample. For a more conservative approach you may want to consider âpseudo-bulkingâ your data by sample (e.g. sc.get.aggregate(adata, by=[""sample"", ""cell_type""], func=""sum"", layer=""counts"")) and using a more powerful differential expression tool, like pydeseq2. previous; Basics. next; Preprocessing and clustering 3k PBMCs (legacy workflow). Contents; . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Clustering; Re-assess quality control and cell filtering; Manual cell-type annotation; Marker gene set; Differentially-expressed Genes as Markers. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:15331,Integrability,depend,depending,15331," scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes the data to a âsize factorâ such as the median count depth in the dataset, ten thousand (CP10k) or one million (CPM, counts per million). The size factor for count depth scaling can be controlled via target_sum in pp.normalize_total. We are applying median count depth normalization with log1p transformation (AKA log1PF). # Saving count data; adata.layers[""counts""] = adata.X.copy(). # Normalizing to median total counts; sc.pp.normalize_total(adata); # Logarithmize the data; sc.pp.log1p(adata). Feature selection#; As a next step, we want to reduce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen flavor. sc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key=""sample""). sc.pl.highly_variable_genes(adata). Dimensionality Reduction#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function leiden() or tsne(). In our experience, there does not seem to be signifigant downside to overestimating the numer of principal components. sc.pl.pca_variance_ratio(adata, n_pcs=50, log=True). You can also plot the principal components to see if there are any potentially undesired features (e.g. batch, QC metrics) driving signifigant variation in this dataset. In this case, there isnât anything too alarming, but itâs a good idea to ex",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17211,Integrability,integrat,integrate,17211,"C metrics) driving signifigant variation in this dataset. In this case, there isnât anything too alarming, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; co",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17265,Integrability,integrat,integration,17265,"C metrics) driving signifigant variation in this dataset. In this case, there isnât anything too alarming, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; co",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17339,Integrability,integrat,integration,17339,"g, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; color=[""leiden"", ""log1p_total_counts"", ""pct_counts_mt"", ""log1p_n_genes_by_counts""],; wspace=0.5,; ncols=2,",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:14785,Modifiability,layers,layers,14785," high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes the data to a âsize factorâ such as the median count depth in the dataset, ten thousand (CP10k) or one million (CPM, counts per million). The size factor for count depth scaling can be controlled via target_sum in pp.normalize_total. We are applying median count depth normalization with log1p transformation (AKA log1PF). # Saving count data; adata.layers[""counts""] = adata.X.copy(). # Normalizing to median total counts; sc.pp.normalize_total(adata); # Logarithmize the data; sc.pp.log1p(adata). Feature selection#; As a next step, we want to reduce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen flavor. sc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key=""sample""). sc.pl.highly_variable_genes(adata). Dimensionality Reduction#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we sh",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:15178,Modifiability,variab,variable,15178,"let Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes the data to a âsize factorâ such as the median count depth in the dataset, ten thousand (CP10k) or one million (CPM, counts per million). The size factor for count depth scaling can be controlled via target_sum in pp.normalize_total. We are applying median count depth normalization with log1p transformation (AKA log1PF). # Saving count data; adata.layers[""counts""] = adata.X.copy(). # Normalizing to median total counts; sc.pp.normalize_total(adata); # Logarithmize the data; sc.pp.log1p(adata). Feature selection#; As a next step, we want to reduce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen flavor. sc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key=""sample""). sc.pl.highly_variable_genes(adata). Dimensionality Reduction#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function leiden() or tsne(). In our experience, there does not seem to be signifigant downside to overestimating the numer of principal components. sc.pl.pca_variance_ratio(adata, n_pcs=50, log=True). You can also plot the principal components to see if there are any potentially undesired features ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:20894,Modifiability,adapt,adapted,20894,"efine is largely arbitrary, and so is the resolution parameter that we use to control for it. As such, the number of clusters is ultimately bound to the stable and biologically-meaningful groups that we can ultimately distringuish, typically done by experts in the corresponding field or by using expert-curated prior knowledge in the form of markers. sc.pl.umap(; adata,; color=[""leiden_res_0.02"", ""leiden_res_0.50"", ""leiden_res_2.00""],; legend_loc=""on data"",; ). sc.pl.umap(; adata,; color=[""leiden_res_0.02"", ""leiden_res_0.50"", ""leiden_res_2.00""],; legend_loc=""on data"",; ). Though UMAPs should not be over-interpreted, here we can already see that in the highest resolution our data is over-clustered, while the lowest resolution is likely grouping cells which belong to distinct cell identities. Marker gene set#; Letâs define a set of marker genes for the main cell types that we expect to see in this dataset. These were adapted from Single Cell Best Practices annotation chapter, for a more detailed overview and best practices in cell type annotation, we refer the user to it. marker_genes = {; ""CD14+ Mono"": [""FCN1"", ""CD14""],; ""CD16+ Mono"": [""TCF7L2"", ""FCGR3A"", ""LYN""],; # Note: DMXL2 should be negative; ""cDC2"": [""CST3"", ""COTL1"", ""LYZ"", ""DMXL2"", ""CLEC10A"", ""FCER1A""],; ""Erythroblast"": [""MKI67"", ""HBA1"", ""HBB""],; # Note HBM and GYPA are negative markers; ""Proerythroblast"": [""CDK6"", ""SYNGR1"", ""HBM"", ""GYPA""],; ""NK"": [""GNLY"", ""NKG7"", ""CD247"", ""FCER1G"", ""TYROBP"", ""KLRG1"", ""FCGR3A""],; ""ILC"": [""ID2"", ""PLCG2"", ""GNLY"", ""SYNE1""],; ""Naive CD20+ B"": [""MS4A1"", ""IL4R"", ""IGHD"", ""FCRL1"", ""IGHM""],; # Note IGHD and IGHM are negative markers; ""B cells"": [; ""MS4A1"",; ""ITGB1"",; ""COL4A4"",; ""PRDM1"",; ""IRF4"",; ""PAX5"",; ""BCL11A"",; ""BLK"",; ""IGHD"",; ""IGHM"",; ],; ""Plasma cells"": [""MZB1"", ""HSP90B1"", ""FNDC3B"", ""PRDM1"", ""IGKC"", ""JCHAIN""],; # Note PAX5 is a negative marker; ""Plasmablast"": [""XBP1"", ""PRDM1"", ""PAX5""],; ""CD4+ T"": [""CD4"", ""IL7R"", ""TRBC2""],; ""CD8+ T"": [""CD8A"", ""CD8B"", ""GZMK"", ""GZMA"", ""CCL5"", ""GZMB""",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:7183,Performance,cache,cachedir,7183,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:13021,Performance,perform,performed,13021,"pressed in the count matrix; the total counts per cell; the percentage of counts in mitochondrial genes. sc.pl.violin(; adata,; [""n_genes_by_counts"", ""total_counts"", ""pct_counts_mt""],; jitter=0.4,; multi_panel=True,; ). Additionally, it is useful to consider QC metrics jointly by inspecting a scatter plot colored by pct_counts_mt. sc.pl.scatter(adata, ""total_counts"", ""n_genes_by_counts"", color=""pct_counts_mt""). Based on the QC metric plots, one could now remove cells that have too many mitochondrial genes expressed or too many total counts by setting manual or automatic thresholds. However, sometimes what appears to be poor QC metrics can be driven by real biology so we suggest starting with a very permissive filtering strategy and revisiting it at a later point. We therefore now only filter cells with less than 100 genes expressed and genes that are detected in less than 3 cells.; Additionally, it is important to note that for datasets with multiple batches, quality control should be performed for each sample individually as quality control thresholds can very substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with h",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17240,Performance,perform,perform,17240,"C metrics) driving signifigant variation in this dataset. In this case, there isnât anything too alarming, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; co",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17485,Performance,optimiz,optimizing,17485,"; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; color=[""leiden"", ""log1p_total_counts"", ""pct_counts_mt"", ""log1p_n_genes_by_counts""],; wspace=0.5,; ncols=2,; ). Manual cell-type annotation#. Note; This section of the tutorial is expanded upon using prior knowledge resources lik",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:24765,Performance,perform,performed,24765,"sing key=dendrogram_leiden_res_0.50). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently. We can then use these genes to figure out what cell types weâre looking at. For example, Cluster 7 is expressing NKG7 and GNLY, suggesting these are NK cells.; To create your own plots, or use a more automated approach, the differentially expressed genes can be extracted in a convenient format with scanpy.get.rank_genes_groups_df(). sc.get.rank_genes_groups_df(adata, group=""7"").head(5). names; scores; logfoldchanges; pvals; pvals_adj. 0; NKG7; 35.376785; 6.544684; 3.885326e-274; 9.102153e-270. 1; KLRD1; 33.815022; 5.840619; 1.186288e-250; 1.389558e-246. 2; GNLY; 33.775005; 7.383827; 4.592379e-250; 3.586189e-246. 3; CST7; 33.003643; 5.238780; 7.201598e-239; 4.217796e-235. 4; PRF1; 32.752277; 5.397196; 2.817787e-235; 1.320246e-231. dc_cluster_genes = sc.get.rank_genes_groups_df(adata, group=""7"").head(5)[""names""]; sc.pl.umap(; adata,; color=[*dc_cluster_genes, ""leiden_res_0.50""],; legend_loc=""on data"",; frameon=False,; ncols=3,; ). You may have noticed that the p-values found here are extremely low. This is due to the statistical test being performed considering each cell as an independent sample. For a more conservative approach you may want to consider âpseudo-bulkingâ your data by sample (e.g. sc.get.aggregate(adata, by=[""sample"", ""cell_type""], func=""sum"", layer=""counts"")) and using a more powerful differential expression tool, like pydeseq2. previous; Basics. next; Preprocessing and clustering 3k PBMCs (legacy workflow). Contents; . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Clustering; Re-assess quality control and cell filtering; Manual cell-type annotation; Marker gene set; Differentially-expressed Genes as Markers. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:9306,Safety,detect,detection,9306,"npy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering. Contents . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Clustering; Re-assess quality control and cell filtering; Manual cell-type annotation; Marker gene set; Differentially-expressed Genes as Markers. Preprocessing and clustering#. # Core scverse libraries; import scanpy as sc; import anndata as ad. # Data retrieval; import pooch. sc.settings.set_figure_params(dpi=50, facecolor=""white""). The data used in this basic preprocessing and clustering tutorial was collected from bone marrow mononuclear cells of healthy human donors and was part of openproblemâs NeurIPS 2021 benchmarking dataset [Luecken et al., 2021]. The samples used in this tutorial were measured using the 10X Multiome Gene Expression and Chromatin Accessability kit.; We are reading in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. EXAMPLE_DATA = pooch.create(; path=pooch.",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:12884,Safety,detect,detected,12884,"etrics(; adata, qc_vars=[""mt"", ""ribo"", ""hb""], inplace=True, log1p=True; ). One can now inspect violin plots of some of the computed QC metrics:. the number of genes expressed in the count matrix; the total counts per cell; the percentage of counts in mitochondrial genes. sc.pl.violin(; adata,; [""n_genes_by_counts"", ""total_counts"", ""pct_counts_mt""],; jitter=0.4,; multi_panel=True,; ). Additionally, it is useful to consider QC metrics jointly by inspecting a scatter plot colored by pct_counts_mt. sc.pl.scatter(adata, ""total_counts"", ""n_genes_by_counts"", color=""pct_counts_mt""). Based on the QC metric plots, one could now remove cells that have too many mitochondrial genes expressed or too many total counts by setting manual or automatic thresholds. However, sometimes what appears to be poor QC metrics can be driven by real biology so we suggest starting with a very permissive filtering strategy and revisiting it at a later point. We therefore now only filter cells with less than 100 genes expressed and genes that are detected in less than 3 cells.; Additionally, it is important to note that for datasets with multiple batches, quality control should be performed for each sample individually as quality control thresholds can very substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sa",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:13220,Safety,detect,detection,13220,"nally, it is useful to consider QC metrics jointly by inspecting a scatter plot colored by pct_counts_mt. sc.pl.scatter(adata, ""total_counts"", ""n_genes_by_counts"", color=""pct_counts_mt""). Based on the QC metric plots, one could now remove cells that have too many mitochondrial genes expressed or too many total counts by setting manual or automatic thresholds. However, sometimes what appears to be poor QC metrics can be driven by real biology so we suggest starting with a very permissive filtering strategy and revisiting it at a later point. We therefore now only filter cells with less than 100 genes expressed and genes that are detected in less than 3 cells.; Additionally, it is important to note that for datasets with multiple batches, quality control should be performed for each sample individually as quality control thresholds can very substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:13265,Safety,detect,detection,13265,"nally, it is useful to consider QC metrics jointly by inspecting a scatter plot colored by pct_counts_mt. sc.pl.scatter(adata, ""total_counts"", ""n_genes_by_counts"", color=""pct_counts_mt""). Based on the QC metric plots, one could now remove cells that have too many mitochondrial genes expressed or too many total counts by setting manual or automatic thresholds. However, sometimes what appears to be poor QC metrics can be driven by real biology so we suggest starting with a very permissive filtering strategy and revisiting it at a later point. We therefore now only filter cells with less than 100 genes expressed and genes that are detected in less than 3 cells.; Additionally, it is important to note that for datasets with multiple batches, quality control should be performed for each sample individually as quality control thresholds can very substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:13430,Safety,detect,detection,13430," Based on the QC metric plots, one could now remove cells that have too many mitochondrial genes expressed or too many total counts by setting manual or automatic thresholds. However, sometimes what appears to be poor QC metrics can be driven by real biology so we suggest starting with a very permissive filtering strategy and revisiting it at a later point. We therefore now only filter cells with less than 100 genes expressed and genes that are detected in less than 3 cells.; Additionally, it is important to note that for datasets with multiple batches, quality control should be performed for each sample individually as quality control thresholds can very substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes t",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:13488,Safety,predict,predicts,13488,"ssed or too many total counts by setting manual or automatic thresholds. However, sometimes what appears to be poor QC metrics can be driven by real biology so we suggest starting with a very permissive filtering strategy and revisiting it at a later point. We therefore now only filter cells with less than 100 genes expressed and genes that are detected in less than 3 cells.; Additionally, it is important to note that for datasets with multiple batches, quality control should be performed for each sample individually as quality control thresholds can very substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes the data to a âsize factorâ such as the median count depth in the dataset, ten thousand (CP10k) or one ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:14084,Safety,detect,detection,14084,"y substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes the data to a âsize factorâ such as the median count depth in the dataset, ten thousand (CP10k) or one million (CPM, counts per million). The size factor for count depth scaling can be controlled via target_sum in pp.normalize_total. We are applying median count depth normalization with log1p transformation (AKA log1PF). # Saving count data; adata.layers[""counts""] = adata.X.copy(). # Normalizing to median total counts; sc.pp.normalize_total(adata); # Logarithmize the data; sc.pp.log1p(adata). Feature selection#; As a next step, we want to reduce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17466,Safety,detect,detection,17466,"; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; color=[""leiden"", ""log1p_total_counts"", ""pct_counts_mt"", ""log1p_n_genes_by_counts""],; wspace=0.5,; ncols=2,; ). Manual cell-type annotation#. Note; This section of the tutorial is expanded upon using prior knowledge resources lik",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:25194,Safety,detect,detection,25194,"sing key=dendrogram_leiden_res_0.50). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently. We can then use these genes to figure out what cell types weâre looking at. For example, Cluster 7 is expressing NKG7 and GNLY, suggesting these are NK cells.; To create your own plots, or use a more automated approach, the differentially expressed genes can be extracted in a convenient format with scanpy.get.rank_genes_groups_df(). sc.get.rank_genes_groups_df(adata, group=""7"").head(5). names; scores; logfoldchanges; pvals; pvals_adj. 0; NKG7; 35.376785; 6.544684; 3.885326e-274; 9.102153e-270. 1; KLRD1; 33.815022; 5.840619; 1.186288e-250; 1.389558e-246. 2; GNLY; 33.775005; 7.383827; 4.592379e-250; 3.586189e-246. 3; CST7; 33.003643; 5.238780; 7.201598e-239; 4.217796e-235. 4; PRF1; 32.752277; 5.397196; 2.817787e-235; 1.320246e-231. dc_cluster_genes = sc.get.rank_genes_groups_df(adata, group=""7"").head(5)[""names""]; sc.pl.umap(; adata,; color=[*dc_cluster_genes, ""leiden_res_0.50""],; legend_loc=""on data"",; frameon=False,; ncols=3,; ). You may have noticed that the p-values found here are extremely low. This is due to the statistical test being performed considering each cell as an independent sample. For a more conservative approach you may want to consider âpseudo-bulkingâ your data by sample (e.g. sc.get.aggregate(adata, by=[""sample"", ""cell_type""], func=""sum"", layer=""counts"")) and using a more powerful differential expression tool, like pydeseq2. previous; Basics. next; Preprocessing and clustering 3k PBMCs (legacy workflow). Contents; . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Clustering; Re-assess quality control and cell filtering; Manual cell-type annotation; Marker gene set; Differentially-expressed Genes as Markers. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:8424,Security,hash,hashsolo,8424,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering. Contents . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Cl,MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:7451,Testability,log,logfile,7451,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:7490,Testability,log,logpath,7490,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:7796,Testability,log,logging,7796,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:7825,Testability,log,logging,7825, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:9950,Testability,benchmark,benchmarking,9950,"l.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering. Contents . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Clustering; Re-assess quality control and cell filtering; Manual cell-type annotation; Marker gene set; Differentially-expressed Genes as Markers. Preprocessing and clustering#. # Core scverse libraries; import scanpy as sc; import anndata as ad. # Data retrieval; import pooch. sc.settings.set_figure_params(dpi=50, facecolor=""white""). The data used in this basic preprocessing and clustering tutorial was collected from bone marrow mononuclear cells of healthy human donors and was part of openproblemâs NeurIPS 2021 benchmarking dataset [Luecken et al., 2021]. The samples used in this tutorial were measured using the 10X Multiome Gene Expression and Chromatin Accessability kit.; We are reading in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. EXAMPLE_DATA = pooch.create(; path=pooch.os_cache(""scverse_tutorials""),; base_url=""doi:10.6084/m9.figshare.22716739.v1/"",; ); EXAMPLE_DATA.load_registry_from_doi(). samples = {; ""s1d1"": ""s1d1_filtered_feature_bc_matrix.h5"",; ""s1d3"": ""s1d3_filtered_feature_bc_matrix.h5"",; }; adatas = {}. for sample_id, filename in samples.items():; path = EXAMPLE_DATA.fetch(filename); sample_adata = sc.read_10x_h5(path); sample_adata.var_names_make_unique(); adatas[sample_id] = sample_adata. adata = ad.concat(adatas, label=""sample""); adata.obs_names_make_unique(); print(adata.obs[""sample""].value_counts()); adata. sample; s1d1 8785",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:14367,Testability,log,log,14367," or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until weâve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes the data to a âsize factorâ such as the median count depth in the dataset, ten thousand (CP10k) or one million (CPM, counts per million). The size factor for count depth scaling can be controlled via target_sum in pp.normalize_total. We are applying median count depth normalization with log1p transformation (AKA log1PF). # Saving count data; adata.layers[""counts""] = adata.X.copy(). # Normalizing to median total counts; sc.pp.normalize_total(adata); # Logarithmize the data; sc.pp.log1p(adata). Feature selection#; As a next step, we want to reduce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen f",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:16087,Testability,log,log,16087,"p is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen flavor. sc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key=""sample""). sc.pl.highly_variable_genes(adata). Dimensionality Reduction#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function leiden() or tsne(). In our experience, there does not seem to be signifigant downside to overestimating the numer of principal components. sc.pl.pca_variance_ratio(adata, n_pcs=50, log=True). You can also plot the principal components to see if there are any potentially undesired features (e.g. batch, QC metrics) driving signifigant variation in this dataset. In this case, there isnât anything too alarming, but itâs a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch e",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:23126,Testability,test,tests,23126," standard_scale=""var""). There are fairly clear patterns of expression for our markers show here, which we can use to label our coarsest clustering with broad lineages. adata.obs[""cell_type_lvl1""] = adata.obs[""leiden_res_0.02""].map(; {; ""0"": ""Lymphocytes"",; ""1"": ""Monocytes"",; ""2"": ""Erythroid"",; ""3"": ""B Cells"",; }; ). sc.pl.dotplot(adata, marker_genes, groupby=""leiden_res_0.50"", standard_scale=""var""). This seems like a resolution that suitable to distinguish most of the different cell types in our data. As such, letâs try to annotate those by manually using the dotplot above, together with the UMAP of our clusters. Ideally, one would also look specifically into each cluster, and attempt to subcluster those if required. Differentially-expressed Genes as Markers#; Furthermore, one can also calculate marker genes per cluster and then look up whether we can link those marker genes to any known biology, such as cell types and/or states. This is typically done using simple statistical tests, such as Wilcoxon and t-test, for each cluster vs the rest. # Obtain cluster-specific differentially expressed genes; sc.tl.rank_genes_groups(adata, groupby=""leiden_res_0.50"", method=""wilcoxon""). We can then visualize the top 5 differentially-expressed genes on a dotplot. sc.pl.rank_genes_groups_dotplot(; adata, groupby=""leiden_res_0.50"", standard_scale=""var"", n_genes=5; ). WARNING: dendrogram data not found (using key=dendrogram_leiden_res_0.50). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently. We can then use these genes to figure out what cell types weâre looking at. For example, Cluster 7 is expressing NKG7 and GNLY, suggesting these are NK cells.; To create your own plots, or use a more automated approach, the differentially expressed genes can be extracted in a convenient format with scanpy.get.rank_genes_groups_df(). sc.get.rank_genes_groups_df(adata, group=""7"").head(5). names; scores; logfoldchanges; pv",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:23156,Testability,test,test,23156," standard_scale=""var""). There are fairly clear patterns of expression for our markers show here, which we can use to label our coarsest clustering with broad lineages. adata.obs[""cell_type_lvl1""] = adata.obs[""leiden_res_0.02""].map(; {; ""0"": ""Lymphocytes"",; ""1"": ""Monocytes"",; ""2"": ""Erythroid"",; ""3"": ""B Cells"",; }; ). sc.pl.dotplot(adata, marker_genes, groupby=""leiden_res_0.50"", standard_scale=""var""). This seems like a resolution that suitable to distinguish most of the different cell types in our data. As such, letâs try to annotate those by manually using the dotplot above, together with the UMAP of our clusters. Ideally, one would also look specifically into each cluster, and attempt to subcluster those if required. Differentially-expressed Genes as Markers#; Furthermore, one can also calculate marker genes per cluster and then look up whether we can link those marker genes to any known biology, such as cell types and/or states. This is typically done using simple statistical tests, such as Wilcoxon and t-test, for each cluster vs the rest. # Obtain cluster-specific differentially expressed genes; sc.tl.rank_genes_groups(adata, groupby=""leiden_res_0.50"", method=""wilcoxon""). We can then visualize the top 5 differentially-expressed genes on a dotplot. sc.pl.rank_genes_groups_dotplot(; adata, groupby=""leiden_res_0.50"", standard_scale=""var"", n_genes=5; ). WARNING: dendrogram data not found (using key=dendrogram_leiden_res_0.50). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently. We can then use these genes to figure out what cell types weâre looking at. For example, Cluster 7 is expressing NKG7 and GNLY, suggesting these are NK cells.; To create your own plots, or use a more automated approach, the differentially expressed genes can be extracted in a convenient format with scanpy.get.rank_genes_groups_df(). sc.get.rank_genes_groups_df(adata, group=""7"").head(5). names; scores; logfoldchanges; pv",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:24116,Testability,log,logfoldchanges,24116,"l tests, such as Wilcoxon and t-test, for each cluster vs the rest. # Obtain cluster-specific differentially expressed genes; sc.tl.rank_genes_groups(adata, groupby=""leiden_res_0.50"", method=""wilcoxon""). We can then visualize the top 5 differentially-expressed genes on a dotplot. sc.pl.rank_genes_groups_dotplot(; adata, groupby=""leiden_res_0.50"", standard_scale=""var"", n_genes=5; ). WARNING: dendrogram data not found (using key=dendrogram_leiden_res_0.50). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently. We can then use these genes to figure out what cell types weâre looking at. For example, Cluster 7 is expressing NKG7 and GNLY, suggesting these are NK cells.; To create your own plots, or use a more automated approach, the differentially expressed genes can be extracted in a convenient format with scanpy.get.rank_genes_groups_df(). sc.get.rank_genes_groups_df(adata, group=""7"").head(5). names; scores; logfoldchanges; pvals; pvals_adj. 0; NKG7; 35.376785; 6.544684; 3.885326e-274; 9.102153e-270. 1; KLRD1; 33.815022; 5.840619; 1.186288e-250; 1.389558e-246. 2; GNLY; 33.775005; 7.383827; 4.592379e-250; 3.586189e-246. 3; CST7; 33.003643; 5.238780; 7.201598e-239; 4.217796e-235. 4; PRF1; 32.752277; 5.397196; 2.817787e-235; 1.320246e-231. dc_cluster_genes = sc.get.rank_genes_groups_df(adata, group=""7"").head(5)[""names""]; sc.pl.umap(; adata,; color=[*dc_cluster_genes, ""leiden_res_0.50""],; legend_loc=""on data"",; frameon=False,; ncols=3,; ). You may have noticed that the p-values found here are extremely low. This is due to the statistical test being performed considering each cell as an independent sample. For a more conservative approach you may want to consider âpseudo-bulkingâ your data by sample (e.g. sc.get.aggregate(adata, by=[""sample"", ""cell_type""], func=""sum"", layer=""counts"")) and using a more powerful differential expression tool, like pydeseq2. previous; Basics. next; Preprocessing and cluster",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:24754,Testability,test,test,24754,"sing key=dendrogram_leiden_res_0.50). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently. We can then use these genes to figure out what cell types weâre looking at. For example, Cluster 7 is expressing NKG7 and GNLY, suggesting these are NK cells.; To create your own plots, or use a more automated approach, the differentially expressed genes can be extracted in a convenient format with scanpy.get.rank_genes_groups_df(). sc.get.rank_genes_groups_df(adata, group=""7"").head(5). names; scores; logfoldchanges; pvals; pvals_adj. 0; NKG7; 35.376785; 6.544684; 3.885326e-274; 9.102153e-270. 1; KLRD1; 33.815022; 5.840619; 1.186288e-250; 1.389558e-246. 2; GNLY; 33.775005; 7.383827; 4.592379e-250; 3.586189e-246. 3; CST7; 33.003643; 5.238780; 7.201598e-239; 4.217796e-235. 4; PRF1; 32.752277; 5.397196; 2.817787e-235; 1.320246e-231. dc_cluster_genes = sc.get.rank_genes_groups_df(adata, group=""7"").head(5)[""names""]; sc.pl.umap(; adata,; color=[*dc_cluster_genes, ""leiden_res_0.50""],; legend_loc=""on data"",; frameon=False,; ncols=3,; ). You may have noticed that the p-values found here are extremely low. This is due to the statistical test being performed considering each cell as an independent sample. For a more conservative approach you may want to consider âpseudo-bulkingâ your data by sample (e.g. sc.get.aggregate(adata, by=[""sample"", ""cell_type""], func=""sum"", layer=""counts"")) and using a more powerful differential expression tool, like pydeseq2. previous; Basics. next; Preprocessing and clustering 3k PBMCs (legacy workflow). Contents; . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Clustering; Re-assess quality control and cell filtering; Manual cell-type annotation; Marker gene set; Differentially-expressed Genes as Markers. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:22175,Usability,clear,clear,22175,"0A"", ""FCER1A""],; ""Erythroblast"": [""MKI67"", ""HBA1"", ""HBB""],; # Note HBM and GYPA are negative markers; ""Proerythroblast"": [""CDK6"", ""SYNGR1"", ""HBM"", ""GYPA""],; ""NK"": [""GNLY"", ""NKG7"", ""CD247"", ""FCER1G"", ""TYROBP"", ""KLRG1"", ""FCGR3A""],; ""ILC"": [""ID2"", ""PLCG2"", ""GNLY"", ""SYNE1""],; ""Naive CD20+ B"": [""MS4A1"", ""IL4R"", ""IGHD"", ""FCRL1"", ""IGHM""],; # Note IGHD and IGHM are negative markers; ""B cells"": [; ""MS4A1"",; ""ITGB1"",; ""COL4A4"",; ""PRDM1"",; ""IRF4"",; ""PAX5"",; ""BCL11A"",; ""BLK"",; ""IGHD"",; ""IGHM"",; ],; ""Plasma cells"": [""MZB1"", ""HSP90B1"", ""FNDC3B"", ""PRDM1"", ""IGKC"", ""JCHAIN""],; # Note PAX5 is a negative marker; ""Plasmablast"": [""XBP1"", ""PRDM1"", ""PAX5""],; ""CD4+ T"": [""CD4"", ""IL7R"", ""TRBC2""],; ""CD8+ T"": [""CD8A"", ""CD8B"", ""GZMK"", ""GZMA"", ""CCL5"", ""GZMB"", ""GZMH"", ""GZMA""],; ""T naive"": [""LEF1"", ""CCR7"", ""TCF7""],; ""pDC"": [""GZMB"", ""IL3RA"", ""COBLL1"", ""TCF4""],; }. sc.pl.dotplot(adata, marker_genes, groupby=""leiden_res_0.02"", standard_scale=""var""). There are fairly clear patterns of expression for our markers show here, which we can use to label our coarsest clustering with broad lineages. adata.obs[""cell_type_lvl1""] = adata.obs[""leiden_res_0.02""].map(; {; ""0"": ""Lymphocytes"",; ""1"": ""Monocytes"",; ""2"": ""Erythroid"",; ""3"": ""B Cells"",; }; ). sc.pl.dotplot(adata, marker_genes, groupby=""leiden_res_0.50"", standard_scale=""var""). This seems like a resolution that suitable to distinguish most of the different cell types in our data. As such, letâs try to annotate those by manually using the dotplot above, together with the UMAP of our clusters. Ideally, one would also look specifically into each cluster, and attempt to subcluster those if required. Differentially-expressed Genes as Markers#; Furthermore, one can also calculate marker genes per cluster and then look up whether we can link those marker genes to any known biology, such as cell types and/or states. This is typically done using simple statistical tests, such as Wilcoxon and t-test, for each cluster vs the rest. # Obtain cluster-specific differentia",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:23107,Usability,simpl,simple,23107," standard_scale=""var""). There are fairly clear patterns of expression for our markers show here, which we can use to label our coarsest clustering with broad lineages. adata.obs[""cell_type_lvl1""] = adata.obs[""leiden_res_0.02""].map(; {; ""0"": ""Lymphocytes"",; ""1"": ""Monocytes"",; ""2"": ""Erythroid"",; ""3"": ""B Cells"",; }; ). sc.pl.dotplot(adata, marker_genes, groupby=""leiden_res_0.50"", standard_scale=""var""). This seems like a resolution that suitable to distinguish most of the different cell types in our data. As such, letâs try to annotate those by manually using the dotplot above, together with the UMAP of our clusters. Ideally, one would also look specifically into each cluster, and attempt to subcluster those if required. Differentially-expressed Genes as Markers#; Furthermore, one can also calculate marker genes per cluster and then look up whether we can link those marker genes to any known biology, such as cell types and/or states. This is typically done using simple statistical tests, such as Wilcoxon and t-test, for each cluster vs the rest. # Obtain cluster-specific differentially expressed genes; sc.tl.rank_genes_groups(adata, groupby=""leiden_res_0.50"", method=""wilcoxon""). We can then visualize the top 5 differentially-expressed genes on a dotplot. sc.pl.rank_genes_groups_dotplot(; adata, groupby=""leiden_res_0.50"", standard_scale=""var"", n_genes=5; ). WARNING: dendrogram data not found (using key=dendrogram_leiden_res_0.50). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently. We can then use these genes to figure out what cell types weâre looking at. For example, Cluster 7 is expressing NKG7 and GNLY, suggesting these are NK cells.; To create your own plots, or use a more automated approach, the differentially expressed genes can be extracted in a convenient format with scanpy.get.rank_genes_groups_df(). sc.get.rank_genes_groups_df(adata, group=""7"").head(5). names; scores; logfoldchanges; pv",MatchSource.WIKI,en/stable/tutorials/basics/clustering.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:8084,Deployability,toggle,toggleswitch,8084,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/basics/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:9168,Deployability,release,release,9168,"npyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Basics. Basics#. Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. previous; Tutorials. next; Preprocessing and clustering. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/basics/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:7160,Performance,cache,cachedir,7160,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/basics/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:8401,Security,hash,hashsolo,8401,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Basics. Basics#. Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. previous; Tutorials. next; Preprocessing and cluste,MatchSource.WIKI,en/stable/tutorials/basics/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:7428,Testability,log,logfile,7428,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/basics/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:7467,Testability,log,logpath,7467,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/basics/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:7773,Testability,log,logging,7773,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/basics/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:7802,Testability,log,logging,7802, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/basics/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:11228,Availability,error,errors,11228,"ar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined on the same variables. var_names = adata_ref.var_names.intersection(adata.var_names); adata_ref = adata_ref[:, var_names]; adata = adata[:, var_names]. The model and graph (here PCA, neighbors, UMAP) trained on the reference data will explain the biological variation observed within it. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The manifold still looks",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:14416,Availability,down,downloaded,14416,"n the monocytes and dendritic cell clusters, the new data is otherwise mapped relatively homogeneously.; The megakaryoctes are only present in adata_ref and no cells from adata map onto them. If interchanging reference data and query data, Megakaryocytes do not appear as a separate cluster anymore. This is an extreme case as the reference data is very small; but one should always question if the reference data contain enough biological variation to meaningfully accomodate query data. Using BBKNN#. sc.tl.pca(adata_concat). %%time; sc.external.pp.bbknn(adata_concat, batch_key=""batch"") # running bbknn 1.3.6. CPU times: user 1.67 s, sys: 749 ms, total: 2.42 s; Wall time: 324 ms. sc.tl.umap(adata_concat). sc.pl.umap(adata_concat, color=[""batch"", ""louvain""]). Also BBKNN doesnât maintain the Megakaryocytes cluster. However, it seems to mix cells more homogeneously. Pancreas#; The following data has been used in the scGen paper [Lotfollahi et al., 2019], has been used here,; was curated here and can be downloaded from here (the BBKNN paper).; It contains data for human pancreas from 4 different studies [Baron et al., 2016, Muraro et al., 2016, Segerstolpe et al., 2016, Wang et al., 2016],; which have been used in the seminal papers on single-cell dataset integration [Butler et al., 2018, Haghverdi et al., 2018] and many times ever since. # note that this collection of batches is already intersected on the genes; adata_all = sc.read(; ""data/pancreas.h5ad"",; backup_url=""https://www.dropbox.com/s/qj1jlm9w10wmt0u/pancreas.h5ad?dl=1"",; ). adata_all.shape. (14693, 2448). Inspect the cell types observed in these studies. counts = adata_all.obs.celltype.value_counts(); counts. alpha 4214; beta 3354; ductal 1804; acinar 1368; not applicable 1154; delta 917; gamma 571; endothelial 289; activated_stellate 284; dropped 178; quiescent_stellate 173; mesenchymal 80; macrophage 55; PSC 54; unclassified endocrine 41; co-expression 39; mast 32; epsilon 28; mesenchyme 27; schwann 13; t_cell 7;",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:8117,Deployability,toggle,toggleswitch,8117,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9201,Deployability,release,release,9201,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PC",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9732,Deployability,integrat,integrating,9732,"y.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an an",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9811,Deployability,integrat,integrates,9811,"py.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that in",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10252,Deployability,integrat,integrations,10252,"gest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); ",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10668,Deployability,integrat,integration,10668," PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tu",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10849,Deployability,integrat,integrates,10849,"is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined o",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:14673,Deployability,integrat,integration,14673,"gakaryocytes do not appear as a separate cluster anymore. This is an extreme case as the reference data is very small; but one should always question if the reference data contain enough biological variation to meaningfully accomodate query data. Using BBKNN#. sc.tl.pca(adata_concat). %%time; sc.external.pp.bbknn(adata_concat, batch_key=""batch"") # running bbknn 1.3.6. CPU times: user 1.67 s, sys: 749 ms, total: 2.42 s; Wall time: 324 ms. sc.tl.umap(adata_concat). sc.pl.umap(adata_concat, color=[""batch"", ""louvain""]). Also BBKNN doesnât maintain the Megakaryocytes cluster. However, it seems to mix cells more homogeneously. Pancreas#; The following data has been used in the scGen paper [Lotfollahi et al., 2019], has been used here,; was curated here and can be downloaded from here (the BBKNN paper).; It contains data for human pancreas from 4 different studies [Baron et al., 2016, Muraro et al., 2016, Segerstolpe et al., 2016, Wang et al., 2016],; which have been used in the seminal papers on single-cell dataset integration [Butler et al., 2018, Haghverdi et al., 2018] and many times ever since. # note that this collection of batches is already intersected on the genes; adata_all = sc.read(; ""data/pancreas.h5ad"",; backup_url=""https://www.dropbox.com/s/qj1jlm9w10wmt0u/pancreas.h5ad?dl=1"",; ). adata_all.shape. (14693, 2448). Inspect the cell types observed in these studies. counts = adata_all.obs.celltype.value_counts(); counts. alpha 4214; beta 3354; ductal 1804; acinar 1368; not applicable 1154; delta 917; gamma 571; endothelial 289; activated_stellate 284; dropped 178; quiescent_stellate 173; mesenchymal 80; macrophage 55; PSC 54; unclassified endocrine 41; co-expression 39; mast 32; epsilon 28; mesenchyme 27; schwann 13; t_cell 7; MHC class II 5; unclear 4; unclassified 2; Name: celltype, dtype: int64. To simplify visualization, letâs remove the 5 minority classes. minority_classes = counts.index[-5:].tolist() # get the minority classes; adata_all = adata_all[~adata_",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17326,Deployability,integrat,integrating,17326,"e iteratively starting from one reference dataset, one can use ingest. Mapping onto a reference batch using ingest#; Choose one reference batch for training the model and setting up the neighborhood graph (here, a PCA) and separate out all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuou",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17489,Deployability,integrat,integrating,17489,"tting up the neighborhood graph (here, a PCA) and separate out all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query b",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17550,Deployability,integrat,integrating,17550,"t all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isi",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17611,Deployability,integrat,integrating,17611,"ference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isin([""1"", ""2"", ""3""])]. The following plot is a bit hard to rea",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:18336,Deployability,continuous,continuous,18336,"orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isin([""1"", ""2"", ""3""])]. The following plot is a bit hard to read, hence, move on to confusion matrices below. sc.pl.umap(adata_query, color=[""batch"", ""celltype"", ""celltype_orig""], wspace=0.4). Cell types conserved across batches#; Let us first focus on cell types that are conserved with the reference, to simplify reading of the confusion matrix. obs_query = adata_query.obs; # intersected categories; conserved_categories = obs_query.celltype.cat.categories.intersection(; obs_query.celltype_orig.cat.categories; ); # intersect categories; obs_query_conserved = obs_query.loc[; obs_query.celltype.isin(conserved_categories); & obs_query.celltype_orig.isin(conserved_categories); ]; # remove unused categories; obs_query_conserved.celltype.cat.remove_unused_categories(inplace=True); # remove unused c",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9732,Integrability,integrat,integrating,9732,"y.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an an",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9811,Integrability,integrat,integrates,9811,"py.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that in",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10252,Integrability,integrat,integrations,10252,"gest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); ",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10668,Integrability,integrat,integration,10668," PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tu",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10849,Integrability,integrat,integrates,10849,"is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined o",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:14673,Integrability,integrat,integration,14673,"gakaryocytes do not appear as a separate cluster anymore. This is an extreme case as the reference data is very small; but one should always question if the reference data contain enough biological variation to meaningfully accomodate query data. Using BBKNN#. sc.tl.pca(adata_concat). %%time; sc.external.pp.bbknn(adata_concat, batch_key=""batch"") # running bbknn 1.3.6. CPU times: user 1.67 s, sys: 749 ms, total: 2.42 s; Wall time: 324 ms. sc.tl.umap(adata_concat). sc.pl.umap(adata_concat, color=[""batch"", ""louvain""]). Also BBKNN doesnât maintain the Megakaryocytes cluster. However, it seems to mix cells more homogeneously. Pancreas#; The following data has been used in the scGen paper [Lotfollahi et al., 2019], has been used here,; was curated here and can be downloaded from here (the BBKNN paper).; It contains data for human pancreas from 4 different studies [Baron et al., 2016, Muraro et al., 2016, Segerstolpe et al., 2016, Wang et al., 2016],; which have been used in the seminal papers on single-cell dataset integration [Butler et al., 2018, Haghverdi et al., 2018] and many times ever since. # note that this collection of batches is already intersected on the genes; adata_all = sc.read(; ""data/pancreas.h5ad"",; backup_url=""https://www.dropbox.com/s/qj1jlm9w10wmt0u/pancreas.h5ad?dl=1"",; ). adata_all.shape. (14693, 2448). Inspect the cell types observed in these studies. counts = adata_all.obs.celltype.value_counts(); counts. alpha 4214; beta 3354; ductal 1804; acinar 1368; not applicable 1154; delta 917; gamma 571; endothelial 289; activated_stellate 284; dropped 178; quiescent_stellate 173; mesenchymal 80; macrophage 55; PSC 54; unclassified endocrine 41; co-expression 39; mast 32; epsilon 28; mesenchyme 27; schwann 13; t_cell 7; MHC class II 5; unclear 4; unclassified 2; Name: celltype, dtype: int64. To simplify visualization, letâs remove the 5 minority classes. minority_classes = counts.index[-5:].tolist() # get the minority classes; adata_all = adata_all[~adata_",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17326,Integrability,integrat,integrating,17326,"e iteratively starting from one reference dataset, one can use ingest. Mapping onto a reference batch using ingest#; Choose one reference batch for training the model and setting up the neighborhood graph (here, a PCA) and separate out all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuou",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17489,Integrability,integrat,integrating,17489,"tting up the neighborhood graph (here, a PCA) and separate out all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query b",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17550,Integrability,integrat,integrating,17550,"t all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isi",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17611,Integrability,integrat,integrating,17611,"ference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isin([""1"", ""2"", ""3""])]. The following plot is a bit hard to rea",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9987,Modifiability,variab,variability,9987,"ker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional V",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:11867,Modifiability,variab,variables,11867,"at integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined on the same variables. var_names = adata_ref.var_names.intersection(adata.var_names); adata_ref = adata_ref[:, var_names]; adata = adata[:, var_names]. The model and graph (here PCA, neighbors, UMAP) trained on the reference data will explain the biological variation observed within it. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The manifold still looks essentially the same as in the clustering tutorial. sc.pl.umap(adata_ref, color=""louvain""). Mapping PBMCs using ingest#; Letâs map labels and embeddings from adata_ref to adata based on a chosen representation. Here, we use adata_ref.obsm['X_pca'] to map cluster labels and the UMAP coordinates. sc.tl.ingest(adata, adata_ref, obs=""louvain""). adata.uns[""louvain_colors""] = adata_ref.uns[""louvain_colors""] # fix colors. sc.pl.umap(adata, color=[""louvain"", ""bulk_labels""], wspace=0.5). By comparing the âbulk_labelsâ annotation with âlouvainâ, we see that the data has been reasonably mapped, only the annot",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:7193,Performance,cache,cachedir,7193,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:8434,Security,hash,hashsolo,8434,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evalua,MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9859,Security,access,accessible,9859,"py.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that in",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:7461,Testability,log,logfile,7461,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:7500,Testability,log,logpath,7500,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:7806,Testability,log,logging,7806,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:7835,Testability,log,logging,7835, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:11278,Testability,log,logging,11278,"fore, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined on the same variables. var_names = adata_ref.var_names.intersection(adata.var_names); adata_ref = adata_ref[:, var_names]; adata = adata[:, var_names]. The model and graph (here PCA, neighbors, UMAP) trained on the reference data will explain the biological variation observed within it. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The manifold still looks essentially the same as in the clustering",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17264,Testability,log,logging,17264,"ta_all, color=[""batch"", ""celltype""]). If one prefers to work more iteratively starting from one reference dataset, one can use ingest. Mapping onto a reference batch using ingest#; Choose one reference batch for training the model and setting up the neighborhood graph (here, a PCA) and separate out all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as âcelltypeâ) and embeddings (such as âX_pcaâ and âX_umapâ) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much mor",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9704,Usability,simpl,simple,9704,"y.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an an",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10331,Usability,simpl,simple,10331,"; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, fi",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10356,Usability,clear,clear,10356,"; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, fi",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10812,Usability,learn,learning,10812,"is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAPâs implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined o",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:11482,Usability,learn,learn,11482,"t solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined on the same variables. var_names = adata_ref.var_names.intersection(adata.var_names); adata_ref = adata_ref[:, var_names]; adata = adata[:, var_names]. The model and graph (here PCA, neighbors, UMAP) trained on the reference data will explain the biological variation observed within it. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The manifold still looks essentially the same as in the clustering tutorial. sc.pl.umap(adata_ref, color=""louvain""). Mapping PBMCs using ingest#; Letâs map labels and embeddings from adata_ref to adata based on a chosen representation. Here, we use adata_ref.obsm['X",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:15484,Usability,simpl,simplify,15484,"udies [Baron et al., 2016, Muraro et al., 2016, Segerstolpe et al., 2016, Wang et al., 2016],; which have been used in the seminal papers on single-cell dataset integration [Butler et al., 2018, Haghverdi et al., 2018] and many times ever since. # note that this collection of batches is already intersected on the genes; adata_all = sc.read(; ""data/pancreas.h5ad"",; backup_url=""https://www.dropbox.com/s/qj1jlm9w10wmt0u/pancreas.h5ad?dl=1"",; ). adata_all.shape. (14693, 2448). Inspect the cell types observed in these studies. counts = adata_all.obs.celltype.value_counts(); counts. alpha 4214; beta 3354; ductal 1804; acinar 1368; not applicable 1154; delta 917; gamma 571; endothelial 289; activated_stellate 284; dropped 178; quiescent_stellate 173; mesenchymal 80; macrophage 55; PSC 54; unclassified endocrine 41; co-expression 39; mast 32; epsilon 28; mesenchyme 27; schwann 13; t_cell 7; MHC class II 5; unclear 4; unclassified 2; Name: celltype, dtype: int64. To simplify visualization, letâs remove the 5 minority classes. minority_classes = counts.index[-5:].tolist() # get the minority classes; adata_all = adata_all[~adata_all.obs.celltype.isin(minority_classes)] # actually subset; adata_all.obs.celltype.cat.reorder_categories( # reorder according to abundance; counts.index[:-5].tolist(), inplace=True; ). Seeing the batch effect#. sc.pp.pca(adata_all); sc.pp.neighbors(adata_all); sc.tl.umap(adata_all). We observe a batch effect. sc.pl.umap(; adata_all, color=[""batch"", ""celltype""], palette=sc.pl.palettes.vega_20_scanpy; ). BBKNN#; It can be well-resolved using BBKNN [Polanski19]. %%time; sc.external.pp.bbknn(adata_all, batch_key=""batch""). CPU times: user 1.89 s, sys: 810 Âµs, total: 1.9 s; Wall time: 1.89 s. sc.tl.umap(adata_all). sc.pl.umap(adata_all, color=[""batch"", ""celltype""]). If one prefers to work more iteratively starting from one reference dataset, one can use ingest. Mapping onto a reference batch using ingest#; Choose one reference batch for training the model a",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:18882,Usability,simpl,simplify,18882,"tas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isin([""1"", ""2"", ""3""])]. The following plot is a bit hard to read, hence, move on to confusion matrices below. sc.pl.umap(adata_query, color=[""batch"", ""celltype"", ""celltype_orig""], wspace=0.4). Cell types conserved across batches#; Let us first focus on cell types that are conserved with the reference, to simplify reading of the confusion matrix. obs_query = adata_query.obs; # intersected categories; conserved_categories = obs_query.celltype.cat.categories.intersection(; obs_query.celltype_orig.cat.categories; ); # intersect categories; obs_query_conserved = obs_query.loc[; obs_query.celltype.isin(conserved_categories); & obs_query.celltype_orig.isin(conserved_categories); ]; # remove unused categories; obs_query_conserved.celltype.cat.remove_unused_categories(inplace=True); # remove unused categories; obs_query_conserved.celltype_orig.cat.remove_unused_categories(inplace=True); # fix category ordering; obs_query_conserved.celltype_orig.cat.reorder_categories(; obs_query_conserved.celltype.cat.categories, inplace=True; ). pd.crosstab(obs_query_conserved.celltype, obs_query_conserved.celltype_orig). celltype_orig; alpha; beta; ductal; acinar; delta; gamma; endothelial; mast. celltype. alpha; 1819; 3; 6; 0; 1; 25; 0; 6. beta; 49; 804; 4; 1; 10; 21; 0; 0",MatchSource.WIKI,en/stable/tutorials/basics/integrating-data-using-ingest.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:8100,Deployability,toggle,toggleswitch,8100,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:9184,Deployability,release,release,9184,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using dask with Scanpy. Using dask with Scanpy#. Warning; ðª Beware sharp edges! ðª; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may exhibit unexpected behaviour if dask arrays are passed to them. Stick to whatâs outlined in this tutorial and you should be fine!; Please report any issues you run into over on the issue tracker. dask is a popular out-of-core, distributed array processing library that scanpy is beginning to support. Here we walk through a quick tutorial of using dask in a simple analysis task.; This notebook relies on optional dependencies in dask and sklearn_ann and annoy. Install them with:; pip install -U ""dask[array,distributed,diagnostics]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.log",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:9911,Deployability,install,install,9911,"e_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using dask with Scanpy. Using dask with Scanpy#. Warning; ðª Beware sharp edges! ðª; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may exhibit unexpected behaviour if dask arrays are passed to them. Stick to whatâs outlined in this tutorial and you should be fine!; Please report any issues you run into over on the issue tracker. dask is a popular out-of-core, distributed array processing library that scanpy is beginning to support. Here we walk through a quick tutorial of using dask in a simple analysis task.; This notebook relies on optional dependencies in dask and sklearn_ann and annoy. Install them with:; pip install -U ""dask[array,distributed,diagnostics]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.logging.print_header(). scanpy==1.10.0rc2.dev103+gc6766d75 anndata==0.11.0.dev157+ge0b81f1.d20240812 umap==0.5.6 numpy==2.0.1 scipy==1.14.0 pandas==2.2.2 scikit-learn==1.5.1 statsmodels==0.14.2 igraph==0.11.6 pynndescent==0.5.13. Here, weâll be working with a moderately large dataset of 1.4 million cells taken from: COVID-19 immune features revealed by a large-scale single-cell transcriptome atlas. if not Path(""cell_atlas.h5ad"").exists():; !wget https://datasets.cellxgene.cziscience.com/82eac9c1-485f-4e21-ab21-8510823d4f6e.h5ad -O ""cell_atlas.h5ad"". For more information on using distributed computing via dask, please see their documentation. In short, one needs to define both a cluster and a client to have some degree of control over the compute resources dask will use. Itâs very likely you will have to tu",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:12059,Energy Efficiency,efficient,efficient,12059,"calCluster(n_workers=3); client = dd.Client(cluster). Note; In this notebook we will be demonstrating some computations in scanpy that use scipy.sparse classes within each dask chunk. Be aware that this is currently poorly supported by dask, and that if you want to interact with the dask arrays in any way other than though the anndata and scanpy libraries you will likely need to densify each chunk.; All operations in scanpy and anndata that work with sparse chunks also work with dense chunks.; The advantage of using sparse chunks are:. The ability to work with fewer, larger chunks; Accelerated computations per chunk (e.g. donât need to sum all those extra zeros). You can convert from sparse to dense chunks via:; X = X.map_blocks(lambda x: x.toarray(), dtype=X.dtype, meta=np.array([])). And in reverse:; X = X.map_blocks(sparse.csr_matrix). Note that you will likely have to work with smaller chunks when doing this, via a rechunking operation. We suggest using a factor of the larger chunk size to achieve the most efficient rechunking. SPARSE_CHUNK_SIZE = 100_000; DENSE_CHUNK_SIZE = 10_000. Dask provides extensive tooling for monitoring your computation. You can access that via the dashboard started when using any of their distributed clusters. client. . Client; Client-d3384ee9-58e9-11ef-9bda-3868dd0e66a0. Connection method: Cluster object; Cluster type: distributed.LocalCluster. Dashboard: http://127.0.0.1:8787/status. Cluster Info. LocalCluster; 815df81e. Dashboard: http://127.0.0.1:8787/status. Workers: 3; . Total threads: 18; . Total memory: 128.00 GiB; . Status: running; Using processes: True. Scheduler Info. . Scheduler; Scheduler-d580fb0c-35e1-45f0-9394-837f45e7976c. Comm: tcp://127.0.0.1:37191; . Workers: 3; . Dashboard: http://127.0.0.1:8787/status. Total threads: 18; . Started: Just now; . Total memory: 128.00 GiB; . Workers. . Worker: 0. Comm: tcp://127.0.0.1:36805; . Total threads: 6; . Dashboard: http://127.0.0.1:45909/status. Memory: 42.67 GiB; . Nanny: tcp",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:12173,Energy Efficiency,monitor,monitoring,12173,"use scipy.sparse classes within each dask chunk. Be aware that this is currently poorly supported by dask, and that if you want to interact with the dask arrays in any way other than though the anndata and scanpy libraries you will likely need to densify each chunk.; All operations in scanpy and anndata that work with sparse chunks also work with dense chunks.; The advantage of using sparse chunks are:. The ability to work with fewer, larger chunks; Accelerated computations per chunk (e.g. donât need to sum all those extra zeros). You can convert from sparse to dense chunks via:; X = X.map_blocks(lambda x: x.toarray(), dtype=X.dtype, meta=np.array([])). And in reverse:; X = X.map_blocks(sparse.csr_matrix). Note that you will likely have to work with smaller chunks when doing this, via a rechunking operation. We suggest using a factor of the larger chunk size to achieve the most efficient rechunking. SPARSE_CHUNK_SIZE = 100_000; DENSE_CHUNK_SIZE = 10_000. Dask provides extensive tooling for monitoring your computation. You can access that via the dashboard started when using any of their distributed clusters. client. . Client; Client-d3384ee9-58e9-11ef-9bda-3868dd0e66a0. Connection method: Cluster object; Cluster type: distributed.LocalCluster. Dashboard: http://127.0.0.1:8787/status. Cluster Info. LocalCluster; 815df81e. Dashboard: http://127.0.0.1:8787/status. Workers: 3; . Total threads: 18; . Total memory: 128.00 GiB; . Status: running; Using processes: True. Scheduler Info. . Scheduler; Scheduler-d580fb0c-35e1-45f0-9394-837f45e7976c. Comm: tcp://127.0.0.1:37191; . Workers: 3; . Dashboard: http://127.0.0.1:8787/status. Total threads: 18; . Started: Just now; . Total memory: 128.00 GiB; . Workers. . Worker: 0. Comm: tcp://127.0.0.1:36805; . Total threads: 6; . Dashboard: http://127.0.0.1:45909/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:39225; . Local directory: /tmp/dask-scratch-space/worker-pz4wcxmk; . . Worker: 1. Comm: tcp://127.0.0.1:35183; . Total thr",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:15433,Energy Efficiency,reduce,reduce,15433,"ip all computation, and these cases will kick off compute for all the delayed operations immediately. %%time; adata.layers[""counts""] = adata.X.copy() # Making sure we keep access to the raw counts; sc.pp.normalize_total(adata, target_sum=1e4). CPU times: user 7.1 ms, sys: 31 Î¼s, total: 7.13 ms; Wall time: 7.49 ms. %%time; sc.pp.log1p(adata). CPU times: user 3.14 ms, sys: 2.03 ms, total: 5.17 ms; Wall time: 4.88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it in. However, as we are working with only a subset of the data at a time, we are able to perform this operation with a lower memory overhead.; As this is a still a significant increase in memory usage per chunk, we will need to reduce the number of observations present in each chunk. adata.layers[""dense""] = adata.X.rechunk((DENSE_CHUNK_SIZE, -1)).map_blocks(; lambda x: x.toarray(), dtype=adata.X.dtype, meta=np.array([]); ). %%time; sc.pp.pca(adata, layer=""dense""). CPU times: user 9.31 s, sys: 1.19 s, total: 10.5 s; Wall time: 1min 27s. While most of the PCA computation runs immediately, the last step (computing the observation loadings) is lazy, so must be triggered manually to avoid recomputation. %%time; adata.obsm[""X_pca""] = adata.obsm[""X_pca""].compute(). CPU times: user 6.72 s, sys: 1.36 s, total: 8.08 s; Wall time: 1min 15s. adata. AnnData object with n_obs Ã n_vars = 1462702 Ã 27714; obs: 'celltype', 'majorType', 'City', 'sampleID', 'donor_id', 'Sample type', 'CoVID-19 severity', 'Sample time', 'Sampling day (Days after symptom onset)', 'BCR single cell sequencing', 'TCR single cell sequencing', 'Outcome', 'Comorbidities', 'COVID-19-related medication and anti-microbials', 'Leukocytes [G ",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:9839,Integrability,depend,dependencies,9839,"pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using dask with Scanpy. Using dask with Scanpy#. Warning; ðª Beware sharp edges! ðª; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may exhibit unexpected behaviour if dask arrays are passed to them. Stick to whatâs outlined in this tutorial and you should be fine!; Please report any issues you run into over on the issue tracker. dask is a popular out-of-core, distributed array processing library that scanpy is beginning to support. Here we walk through a quick tutorial of using dask in a simple analysis task.; This notebook relies on optional dependencies in dask and sklearn_ann and annoy. Install them with:; pip install -U ""dask[array,distributed,diagnostics]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.logging.print_header(). scanpy==1.10.0rc2.dev103+gc6766d75 anndata==0.11.0.dev157+ge0b81f1.d20240812 umap==0.5.6 numpy==2.0.1 scipy==1.14.0 pandas==2.2.2 scikit-learn==1.5.1 statsmodels==0.14.2 igraph==0.11.6 pynndescent==0.5.13. Here, weâll be working with a moderately large dataset of 1.4 million cells taken from: COVID-19 immune features revealed by a large-scale single-cell transcriptome atlas. if not Path(""cell_atlas.h5ad"").exists():; !wget https://datasets.cellxgene.cziscience.com/82eac9c1-485f-4e21-ab21-8510823d4f6e.h5ad -O ""cell_atlas.h5ad"". For more information on using distributed computing via dask, please see their documentation. In short, one needs to define both a cluster and a client to have some degree of",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:14533,Modifiability,layers,layers,14533,"71xvg; . Weâll convert the X representation to dask using anndata.experimental.read_elem_as_dask.; The file weâve retrieved from cellxgene has already been processed. Since this tutorial is demonstrating processing from counts, weâre just going to access the counts matrix and annotations. %%time; with h5py.File(""cell_atlas.h5ad"", ""r"") as f:; adata = ad.AnnData(; obs=ad.experimental.read_elem(f[""obs""]),; var=ad.experimental.read_elem(f[""var""]),; ); adata.X = ad.experimental.read_elem_as_dask(; f[""raw/X""], chunks=(SPARSE_CHUNK_SIZE, adata.shape[1]); ). CPU times: user 2.4 s, sys: 673 ms, total: 3.08 s; Wall time: 3.22 s. Weâve optimized a number of scanpy functions to be completely lazy. That means it will look like nothing is computed when you call an operation on a dask array, but only later when you hit compute.; In some cases itâs currently unavoidable to skip all computation, and these cases will kick off compute for all the delayed operations immediately. %%time; adata.layers[""counts""] = adata.X.copy() # Making sure we keep access to the raw counts; sc.pp.normalize_total(adata, target_sum=1e4). CPU times: user 7.1 ms, sys: 31 Î¼s, total: 7.13 ms; Wall time: 7.49 ms. %%time; sc.pp.log1p(adata). CPU times: user 3.14 ms, sys: 2.03 ms, total: 5.17 ms; Wall time: 4.88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it in. However, as we are working with only a subset of the data at a time, we are able to perform this operation with a lower memory overhead.; As this is a still a significant increase in memory usage per chunk, we will need to reduce the number of observations present in each chunk. adata.layers[""dense""] = adata.X.rechunk((DENSE_CHUNK_SIZ",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:14843,Modifiability,variab,variable,14843," f:; adata = ad.AnnData(; obs=ad.experimental.read_elem(f[""obs""]),; var=ad.experimental.read_elem(f[""var""]),; ); adata.X = ad.experimental.read_elem_as_dask(; f[""raw/X""], chunks=(SPARSE_CHUNK_SIZE, adata.shape[1]); ). CPU times: user 2.4 s, sys: 673 ms, total: 3.08 s; Wall time: 3.22 s. Weâve optimized a number of scanpy functions to be completely lazy. That means it will look like nothing is computed when you call an operation on a dask array, but only later when you hit compute.; In some cases itâs currently unavoidable to skip all computation, and these cases will kick off compute for all the delayed operations immediately. %%time; adata.layers[""counts""] = adata.X.copy() # Making sure we keep access to the raw counts; sc.pp.normalize_total(adata, target_sum=1e4). CPU times: user 7.1 ms, sys: 31 Î¼s, total: 7.13 ms; Wall time: 7.49 ms. %%time; sc.pp.log1p(adata). CPU times: user 3.14 ms, sys: 2.03 ms, total: 5.17 ms; Wall time: 4.88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it in. However, as we are working with only a subset of the data at a time, we are able to perform this operation with a lower memory overhead.; As this is a still a significant increase in memory usage per chunk, we will need to reduce the number of observations present in each chunk. adata.layers[""dense""] = adata.X.rechunk((DENSE_CHUNK_SIZE, -1)).map_blocks(; lambda x: x.toarray(), dtype=adata.X.dtype, meta=np.array([]); ). %%time; sc.pp.pca(adata, layer=""dense""). CPU times: user 9.31 s, sys: 1.19 s, total: 10.5 s; Wall time: 1min 27s. While most of the PCA computation runs immediately, the last step (computing the observation loadings) is lazy, so must be triggered manua",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:15496,Modifiability,layers,layers,15496,"mediately. %%time; adata.layers[""counts""] = adata.X.copy() # Making sure we keep access to the raw counts; sc.pp.normalize_total(adata, target_sum=1e4). CPU times: user 7.1 ms, sys: 31 Î¼s, total: 7.13 ms; Wall time: 7.49 ms. %%time; sc.pp.log1p(adata). CPU times: user 3.14 ms, sys: 2.03 ms, total: 5.17 ms; Wall time: 4.88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it in. However, as we are working with only a subset of the data at a time, we are able to perform this operation with a lower memory overhead.; As this is a still a significant increase in memory usage per chunk, we will need to reduce the number of observations present in each chunk. adata.layers[""dense""] = adata.X.rechunk((DENSE_CHUNK_SIZE, -1)).map_blocks(; lambda x: x.toarray(), dtype=adata.X.dtype, meta=np.array([]); ). %%time; sc.pp.pca(adata, layer=""dense""). CPU times: user 9.31 s, sys: 1.19 s, total: 10.5 s; Wall time: 1min 27s. While most of the PCA computation runs immediately, the last step (computing the observation loadings) is lazy, so must be triggered manually to avoid recomputation. %%time; adata.obsm[""X_pca""] = adata.obsm[""X_pca""].compute(). CPU times: user 6.72 s, sys: 1.36 s, total: 8.08 s; Wall time: 1min 15s. adata. AnnData object with n_obs Ã n_vars = 1462702 Ã 27714; obs: 'celltype', 'majorType', 'City', 'sampleID', 'donor_id', 'Sample type', 'CoVID-19 severity', 'Sample time', 'Sampling day (Days after symptom onset)', 'BCR single cell sequencing', 'TCR single cell sequencing', 'Outcome', 'Comorbidities', 'COVID-19-related medication and anti-microbials', 'Leukocytes [G over L]', 'Neutrophils [G over L]', 'Lymphocytes [G over L]', 'Unpublished', 'disease_onto",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:17147,Modifiability,layers,layers,17147,"ta=np.array([]); ). %%time; sc.pp.pca(adata, layer=""dense""). CPU times: user 9.31 s, sys: 1.19 s, total: 10.5 s; Wall time: 1min 27s. While most of the PCA computation runs immediately, the last step (computing the observation loadings) is lazy, so must be triggered manually to avoid recomputation. %%time; adata.obsm[""X_pca""] = adata.obsm[""X_pca""].compute(). CPU times: user 6.72 s, sys: 1.36 s, total: 8.08 s; Wall time: 1min 15s. adata. AnnData object with n_obs Ã n_vars = 1462702 Ã 27714; obs: 'celltype', 'majorType', 'City', 'sampleID', 'donor_id', 'Sample type', 'CoVID-19 severity', 'Sample time', 'Sampling day (Days after symptom onset)', 'BCR single cell sequencing', 'TCR single cell sequencing', 'Outcome', 'Comorbidities', 'COVID-19-related medication and anti-microbials', 'Leukocytes [G over L]', 'Neutrophils [G over L]', 'Lymphocytes [G over L]', 'Unpublished', 'disease_ontology_term_id', 'cell_type_ontology_term_id', 'tissue_ontology_term_id', 'development_stage_ontology_term_id', 'self_reported_ethnicity_ontology_term_id', 'assay_ontology_term_id', 'sex_ontology_term_id', 'is_primary_data', 'organism_ontology_term_id', 'suspension_type', 'tissue_type', 'cell_type', 'assay', 'disease', 'organism', 'sex', 'tissue', 'self_reported_ethnicity', 'development_stage', 'observation_joinid'; var: 'feature_is_filtered', 'feature_name', 'feature_reference', 'feature_biotype', 'feature_length', 'highly_variable', 'means', 'dispersions', 'dispersions_norm'; uns: 'log1p', 'hvg', 'pca'; obsm: 'X_pca'; varm: 'PCs'; layers: 'counts', 'dense'. Now that weâve computed our PCA letâs take a look at it:. sc.pl.pca(adata, color=""majorType""). Further support for dask is a work in progress. However, many operations past this point can work with the dimensionality reduction directly in memory. With scanpy 1.10 many of these operations can be accelerated to make working with large datasets significantly easier. For example:. Using alternative KNN backends for faster neighbor calculat",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:7176,Performance,cache,cachedir,7176,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:10930,Performance,tune,tune,10930,"s]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.logging.print_header(). scanpy==1.10.0rc2.dev103+gc6766d75 anndata==0.11.0.dev157+ge0b81f1.d20240812 umap==0.5.6 numpy==2.0.1 scipy==1.14.0 pandas==2.2.2 scikit-learn==1.5.1 statsmodels==0.14.2 igraph==0.11.6 pynndescent==0.5.13. Here, weâll be working with a moderately large dataset of 1.4 million cells taken from: COVID-19 immune features revealed by a large-scale single-cell transcriptome atlas. if not Path(""cell_atlas.h5ad"").exists():; !wget https://datasets.cellxgene.cziscience.com/82eac9c1-485f-4e21-ab21-8510823d4f6e.h5ad -O ""cell_atlas.h5ad"". For more information on using distributed computing via dask, please see their documentation. In short, one needs to define both a cluster and a client to have some degree of control over the compute resources dask will use. Itâs very likely you will have to tune the number of workers and amount of memory per worker along with your chunk sizes. cluster = dd.LocalCluster(n_workers=3); client = dd.Client(cluster). Note; In this notebook we will be demonstrating some computations in scanpy that use scipy.sparse classes within each dask chunk. Be aware that this is currently poorly supported by dask, and that if you want to interact with the dask arrays in any way other than though the anndata and scanpy libraries you will likely need to densify each chunk.; All operations in scanpy and anndata that work with sparse chunks also work with dense chunks.; The advantage of using sparse chunks are:. The ability to work with fewer, larger chunks; Accelerated computations per chunk (e.g. donât need to sum all those extra zeros). You can convert from sparse to dense chunks via:; X = X.map_blocks(lambda x: x.toarray(), dtype=X.dtype, meta=np.array([])). And in reverse:; X = X.map_blocks(sparse.csr_matrix). Note that you will likely have to work with smaller chunks when doing th",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:14178,Performance,optimiz,optimized,14178,".1:43387/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:42555; . Local directory: /tmp/dask-scratch-space/worker-a11nkkx1; . . Worker: 2. Comm: tcp://127.0.0.1:36599; . Total threads: 6; . Dashboard: http://127.0.0.1:39033/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:45463; . Local directory: /tmp/dask-scratch-space/worker-mcr71xvg; . Weâll convert the X representation to dask using anndata.experimental.read_elem_as_dask.; The file weâve retrieved from cellxgene has already been processed. Since this tutorial is demonstrating processing from counts, weâre just going to access the counts matrix and annotations. %%time; with h5py.File(""cell_atlas.h5ad"", ""r"") as f:; adata = ad.AnnData(; obs=ad.experimental.read_elem(f[""obs""]),; var=ad.experimental.read_elem(f[""var""]),; ); adata.X = ad.experimental.read_elem_as_dask(; f[""raw/X""], chunks=(SPARSE_CHUNK_SIZE, adata.shape[1]); ). CPU times: user 2.4 s, sys: 673 ms, total: 3.08 s; Wall time: 3.22 s. Weâve optimized a number of scanpy functions to be completely lazy. That means it will look like nothing is computed when you call an operation on a dask array, but only later when you hit compute.; In some cases itâs currently unavoidable to skip all computation, and these cases will kick off compute for all the delayed operations immediately. %%time; adata.layers[""counts""] = adata.X.copy() # Making sure we keep access to the raw counts; sc.pp.normalize_total(adata, target_sum=1e4). CPU times: user 7.1 ms, sys: 31 Î¼s, total: 7.13 ms; Wall time: 7.49 ms. %%time; sc.pp.log1p(adata). CPU times: user 3.14 ms, sys: 2.03 ms, total: 5.17 ms; Wall time: 4.88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:15294,Performance,perform,perform,15294,"is computed when you call an operation on a dask array, but only later when you hit compute.; In some cases itâs currently unavoidable to skip all computation, and these cases will kick off compute for all the delayed operations immediately. %%time; adata.layers[""counts""] = adata.X.copy() # Making sure we keep access to the raw counts; sc.pp.normalize_total(adata, target_sum=1e4). CPU times: user 7.1 ms, sys: 31 Î¼s, total: 7.13 ms; Wall time: 7.49 ms. %%time; sc.pp.log1p(adata). CPU times: user 3.14 ms, sys: 2.03 ms, total: 5.17 ms; Wall time: 4.88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it in. However, as we are working with only a subset of the data at a time, we are able to perform this operation with a lower memory overhead.; As this is a still a significant increase in memory usage per chunk, we will need to reduce the number of observations present in each chunk. adata.layers[""dense""] = adata.X.rechunk((DENSE_CHUNK_SIZE, -1)).map_blocks(; lambda x: x.toarray(), dtype=adata.X.dtype, meta=np.array([]); ). %%time; sc.pp.pca(adata, layer=""dense""). CPU times: user 9.31 s, sys: 1.19 s, total: 10.5 s; Wall time: 1min 27s. While most of the PCA computation runs immediately, the last step (computing the observation loadings) is lazy, so must be triggered manually to avoid recomputation. %%time; adata.obsm[""X_pca""] = adata.obsm[""X_pca""].compute(). CPU times: user 6.72 s, sys: 1.36 s, total: 8.08 s; Wall time: 1min 15s. adata. AnnData object with n_obs Ã n_vars = 1462702 Ã 27714; obs: 'celltype', 'majorType', 'City', 'sampleID', 'donor_id', 'Sample type', 'CoVID-19 severity', 'Sample time', 'Sampling day (Days after symptom onset)', 'BCR single ce",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:15840,Performance,load,loadings,15840,"88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it in. However, as we are working with only a subset of the data at a time, we are able to perform this operation with a lower memory overhead.; As this is a still a significant increase in memory usage per chunk, we will need to reduce the number of observations present in each chunk. adata.layers[""dense""] = adata.X.rechunk((DENSE_CHUNK_SIZE, -1)).map_blocks(; lambda x: x.toarray(), dtype=adata.X.dtype, meta=np.array([]); ). %%time; sc.pp.pca(adata, layer=""dense""). CPU times: user 9.31 s, sys: 1.19 s, total: 10.5 s; Wall time: 1min 27s. While most of the PCA computation runs immediately, the last step (computing the observation loadings) is lazy, so must be triggered manually to avoid recomputation. %%time; adata.obsm[""X_pca""] = adata.obsm[""X_pca""].compute(). CPU times: user 6.72 s, sys: 1.36 s, total: 8.08 s; Wall time: 1min 15s. adata. AnnData object with n_obs Ã n_vars = 1462702 Ã 27714; obs: 'celltype', 'majorType', 'City', 'sampleID', 'donor_id', 'Sample type', 'CoVID-19 severity', 'Sample time', 'Sampling day (Days after symptom onset)', 'BCR single cell sequencing', 'TCR single cell sequencing', 'Outcome', 'Comorbidities', 'COVID-19-related medication and anti-microbials', 'Leukocytes [G over L]', 'Neutrophils [G over L]', 'Lymphocytes [G over L]', 'Unpublished', 'disease_ontology_term_id', 'cell_type_ontology_term_id', 'tissue_ontology_term_id', 'development_stage_ontology_term_id', 'self_reported_ethnicity_ontology_term_id', 'assay_ontology_term_id', 'sex_ontology_term_id', 'is_primary_data', 'organism_ontology_term_id', 'suspension_type', 'tissue_type', 'cell_type', 'assay', 'disease', 'o",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:15892,Safety,avoid,avoid,15892,"88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it in. However, as we are working with only a subset of the data at a time, we are able to perform this operation with a lower memory overhead.; As this is a still a significant increase in memory usage per chunk, we will need to reduce the number of observations present in each chunk. adata.layers[""dense""] = adata.X.rechunk((DENSE_CHUNK_SIZE, -1)).map_blocks(; lambda x: x.toarray(), dtype=adata.X.dtype, meta=np.array([]); ). %%time; sc.pp.pca(adata, layer=""dense""). CPU times: user 9.31 s, sys: 1.19 s, total: 10.5 s; Wall time: 1min 27s. While most of the PCA computation runs immediately, the last step (computing the observation loadings) is lazy, so must be triggered manually to avoid recomputation. %%time; adata.obsm[""X_pca""] = adata.obsm[""X_pca""].compute(). CPU times: user 6.72 s, sys: 1.36 s, total: 8.08 s; Wall time: 1min 15s. adata. AnnData object with n_obs Ã n_vars = 1462702 Ã 27714; obs: 'celltype', 'majorType', 'City', 'sampleID', 'donor_id', 'Sample type', 'CoVID-19 severity', 'Sample time', 'Sampling day (Days after symptom onset)', 'BCR single cell sequencing', 'TCR single cell sequencing', 'Outcome', 'Comorbidities', 'COVID-19-related medication and anti-microbials', 'Leukocytes [G over L]', 'Neutrophils [G over L]', 'Lymphocytes [G over L]', 'Unpublished', 'disease_ontology_term_id', 'cell_type_ontology_term_id', 'tissue_ontology_term_id', 'development_stage_ontology_term_id', 'self_reported_ethnicity_ontology_term_id', 'assay_ontology_term_id', 'sex_ontology_term_id', 'is_primary_data', 'organism_ontology_term_id', 'suspension_type', 'tissue_type', 'cell_type', 'assay', 'disease', 'o",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:8417,Security,hash,hashsolo,8417,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using dask with Scanpy. Using dask with Scanpy#. Warning; ðª Beware sharp edges! ðª; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may e,MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:12210,Security,access,access,12210,"y poorly supported by dask, and that if you want to interact with the dask arrays in any way other than though the anndata and scanpy libraries you will likely need to densify each chunk.; All operations in scanpy and anndata that work with sparse chunks also work with dense chunks.; The advantage of using sparse chunks are:. The ability to work with fewer, larger chunks; Accelerated computations per chunk (e.g. donât need to sum all those extra zeros). You can convert from sparse to dense chunks via:; X = X.map_blocks(lambda x: x.toarray(), dtype=X.dtype, meta=np.array([])). And in reverse:; X = X.map_blocks(sparse.csr_matrix). Note that you will likely have to work with smaller chunks when doing this, via a rechunking operation. We suggest using a factor of the larger chunk size to achieve the most efficient rechunking. SPARSE_CHUNK_SIZE = 100_000; DENSE_CHUNK_SIZE = 10_000. Dask provides extensive tooling for monitoring your computation. You can access that via the dashboard started when using any of their distributed clusters. client. . Client; Client-d3384ee9-58e9-11ef-9bda-3868dd0e66a0. Connection method: Cluster object; Cluster type: distributed.LocalCluster. Dashboard: http://127.0.0.1:8787/status. Cluster Info. LocalCluster; 815df81e. Dashboard: http://127.0.0.1:8787/status. Workers: 3; . Total threads: 18; . Total memory: 128.00 GiB; . Status: running; Using processes: True. Scheduler Info. . Scheduler; Scheduler-d580fb0c-35e1-45f0-9394-837f45e7976c. Comm: tcp://127.0.0.1:37191; . Workers: 3; . Dashboard: http://127.0.0.1:8787/status. Total threads: 18; . Started: Just now; . Total memory: 128.00 GiB; . Workers. . Worker: 0. Comm: tcp://127.0.0.1:36805; . Total threads: 6; . Dashboard: http://127.0.0.1:45909/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:39225; . Local directory: /tmp/dask-scratch-space/worker-pz4wcxmk; . . Worker: 1. Comm: tcp://127.0.0.1:35183; . Total threads: 6; . Dashboard: http://127.0.0.1:43387/status. Memory: 42.67 GiB; . Nann",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:13793,Security,access,access,13793,"3; . Dashboard: http://127.0.0.1:8787/status. Total threads: 18; . Started: Just now; . Total memory: 128.00 GiB; . Workers. . Worker: 0. Comm: tcp://127.0.0.1:36805; . Total threads: 6; . Dashboard: http://127.0.0.1:45909/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:39225; . Local directory: /tmp/dask-scratch-space/worker-pz4wcxmk; . . Worker: 1. Comm: tcp://127.0.0.1:35183; . Total threads: 6; . Dashboard: http://127.0.0.1:43387/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:42555; . Local directory: /tmp/dask-scratch-space/worker-a11nkkx1; . . Worker: 2. Comm: tcp://127.0.0.1:36599; . Total threads: 6; . Dashboard: http://127.0.0.1:39033/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:45463; . Local directory: /tmp/dask-scratch-space/worker-mcr71xvg; . Weâll convert the X representation to dask using anndata.experimental.read_elem_as_dask.; The file weâve retrieved from cellxgene has already been processed. Since this tutorial is demonstrating processing from counts, weâre just going to access the counts matrix and annotations. %%time; with h5py.File(""cell_atlas.h5ad"", ""r"") as f:; adata = ad.AnnData(; obs=ad.experimental.read_elem(f[""obs""]),; var=ad.experimental.read_elem(f[""var""]),; ); adata.X = ad.experimental.read_elem_as_dask(; f[""raw/X""], chunks=(SPARSE_CHUNK_SIZE, adata.shape[1]); ). CPU times: user 2.4 s, sys: 673 ms, total: 3.08 s; Wall time: 3.22 s. Weâve optimized a number of scanpy functions to be completely lazy. That means it will look like nothing is computed when you call an operation on a dask array, but only later when you hit compute.; In some cases itâs currently unavoidable to skip all computation, and these cases will kick off compute for all the delayed operations immediately. %%time; adata.layers[""counts""] = adata.X.copy() # Making sure we keep access to the raw counts; sc.pp.normalize_total(adata, target_sum=1e4). CPU times: user 7.1 ms, sys: 31 Î¼s, total: 7.13 ms; Wall time: 7.49 ms. %%time; sc.pp.log1p(adata). CPU times: u",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:14589,Security,access,access,14589,"to dask using anndata.experimental.read_elem_as_dask.; The file weâve retrieved from cellxgene has already been processed. Since this tutorial is demonstrating processing from counts, weâre just going to access the counts matrix and annotations. %%time; with h5py.File(""cell_atlas.h5ad"", ""r"") as f:; adata = ad.AnnData(; obs=ad.experimental.read_elem(f[""obs""]),; var=ad.experimental.read_elem(f[""var""]),; ); adata.X = ad.experimental.read_elem_as_dask(; f[""raw/X""], chunks=(SPARSE_CHUNK_SIZE, adata.shape[1]); ). CPU times: user 2.4 s, sys: 673 ms, total: 3.08 s; Wall time: 3.22 s. Weâve optimized a number of scanpy functions to be completely lazy. That means it will look like nothing is computed when you call an operation on a dask array, but only later when you hit compute.; In some cases itâs currently unavoidable to skip all computation, and these cases will kick off compute for all the delayed operations immediately. %%time; adata.layers[""counts""] = adata.X.copy() # Making sure we keep access to the raw counts; sc.pp.normalize_total(adata, target_sum=1e4). CPU times: user 7.1 ms, sys: 31 Î¼s, total: 7.13 ms; Wall time: 7.49 ms. %%time; sc.pp.log1p(adata). CPU times: user 3.14 ms, sys: 2.03 ms, total: 5.17 ms; Wall time: 4.88 ms. Highly variable genes needs to add entries into obs, which currently does not support lazy column. So computation will occur immediately on call. %%time; sc.pp.highly_variable_genes(adata). CPU times: user 3.46 s, sys: 509 ms, total: 3.97 s; Wall time: 50 s. PCA currently does not support sparse data. So we will need to densify the expression matrix before passing it in. However, as we are working with only a subset of the data at a time, we are able to perform this operation with a lower memory overhead.; As this is a still a significant increase in memory usage per chunk, we will need to reduce the number of observations present in each chunk. adata.layers[""dense""] = adata.X.rechunk((DENSE_CHUNK_SIZE, -1)).map_blocks(; lambda x: x.toarray(),",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:7444,Testability,log,logfile,7444,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:7483,Testability,log,logpath,7483,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:7789,Testability,log,logging,7789,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:7818,Testability,log,logging,7818, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:10115,Testability,log,logging,10115,"; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using dask with Scanpy. Using dask with Scanpy#. Warning; ðª Beware sharp edges! ðª; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may exhibit unexpected behaviour if dask arrays are passed to them. Stick to whatâs outlined in this tutorial and you should be fine!; Please report any issues you run into over on the issue tracker. dask is a popular out-of-core, distributed array processing library that scanpy is beginning to support. Here we walk through a quick tutorial of using dask in a simple analysis task.; This notebook relies on optional dependencies in dask and sklearn_ann and annoy. Install them with:; pip install -U ""dask[array,distributed,diagnostics]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.logging.print_header(). scanpy==1.10.0rc2.dev103+gc6766d75 anndata==0.11.0.dev157+ge0b81f1.d20240812 umap==0.5.6 numpy==2.0.1 scipy==1.14.0 pandas==2.2.2 scikit-learn==1.5.1 statsmodels==0.14.2 igraph==0.11.6 pynndescent==0.5.13. Here, weâll be working with a moderately large dataset of 1.4 million cells taken from: COVID-19 immune features revealed by a large-scale single-cell transcriptome atlas. if not Path(""cell_atlas.h5ad"").exists():; !wget https://datasets.cellxgene.cziscience.com/82eac9c1-485f-4e21-ab21-8510823d4f6e.h5ad -O ""cell_atlas.h5ad"". For more information on using distributed computing via dask, please see their documentation. In short, one needs to define both a cluster and a client to have some degree of control over the compute resources dask will use. Itâs very likely you will have to tune the number of workers and amount of memory per worker along with your chunk sizes. cluster = dd.LocalCluster(n_workers=3); client = dd.Client(cluster). Note; In this notebook we will b",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:9783,Usability,simpl,simple,9783,"y.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using dask with Scanpy. Using dask with Scanpy#. Warning; ðª Beware sharp edges! ðª; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may exhibit unexpected behaviour if dask arrays are passed to them. Stick to whatâs outlined in this tutorial and you should be fine!; Please report any issues you run into over on the issue tracker. dask is a popular out-of-core, distributed array processing library that scanpy is beginning to support. Here we walk through a quick tutorial of using dask in a simple analysis task.; This notebook relies on optional dependencies in dask and sklearn_ann and annoy. Install them with:; pip install -U ""dask[array,distributed,diagnostics]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.logging.print_header(). scanpy==1.10.0rc2.dev103+gc6766d75 anndata==0.11.0.dev157+ge0b81f1.d20240812 umap==0.5.6 numpy==2.0.1 scipy==1.14.0 pandas==2.2.2 scikit-learn==1.5.1 statsmodels==0.14.2 igraph==0.11.6 pynndescent==0.5.13. Here, weâll be working with a moderately large dataset of 1.4 million cells taken from: COVID-19 immune features revealed by a large-scale single-cell transcriptome atlas. if not Path(""cell_atlas.h5ad"").exists():; !wget https://datasets.cellxgene.cziscience.com/82eac9c1-485f-4e21-ab21-8510823d4f6e.h5ad -O ""cell_atlas.h5ad"". For more information on using distributed computing via dask, please see their documentation. ",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:10276,Usability,learn,learn,10276,"npy#. Warning; ðª Beware sharp edges! ðª; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may exhibit unexpected behaviour if dask arrays are passed to them. Stick to whatâs outlined in this tutorial and you should be fine!; Please report any issues you run into over on the issue tracker. dask is a popular out-of-core, distributed array processing library that scanpy is beginning to support. Here we walk through a quick tutorial of using dask in a simple analysis task.; This notebook relies on optional dependencies in dask and sklearn_ann and annoy. Install them with:; pip install -U ""dask[array,distributed,diagnostics]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.logging.print_header(). scanpy==1.10.0rc2.dev103+gc6766d75 anndata==0.11.0.dev157+ge0b81f1.d20240812 umap==0.5.6 numpy==2.0.1 scipy==1.14.0 pandas==2.2.2 scikit-learn==1.5.1 statsmodels==0.14.2 igraph==0.11.6 pynndescent==0.5.13. Here, weâll be working with a moderately large dataset of 1.4 million cells taken from: COVID-19 immune features revealed by a large-scale single-cell transcriptome atlas. if not Path(""cell_atlas.h5ad"").exists():; !wget https://datasets.cellxgene.cziscience.com/82eac9c1-485f-4e21-ab21-8510823d4f6e.h5ad -O ""cell_atlas.h5ad"". For more information on using distributed computing via dask, please see their documentation. In short, one needs to define both a cluster and a client to have some degree of control over the compute resources dask will use. Itâs very likely you will have to tune the number of workers and amount of memory per worker along with your chunk sizes. cluster = dd.LocalCluster(n_workers=3); client = dd.Client(cluster). Note; In this notebook we will be demonstrating some computations in scanpy that use scipy.sparse classes within each dask chunk. Be aware that this is currently poorly supported by dask, a",MatchSource.WIKI,en/stable/tutorials/experimental/dask.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:8090,Deployability,toggle,toggleswitch,8090,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/experimental/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:9174,Deployability,release,release,9174,"bs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Experimental. Experimental#. How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. previous; Integrating spatial data with scRNA-seq using scanorama. next; How to preprocess UMI count data with analytic Pearson residuals. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/experimental/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:7166,Performance,cache,cachedir,7166,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/experimental/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:8407,Security,hash,hashsolo,8407,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Experimental. Experimental#. How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. previous; Integrating spatial data with scRNA-seq using scanorama. next; How ,MatchSource.WIKI,en/stable/tutorials/experimental/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:7434,Testability,log,logfile,7434,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/experimental/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:7473,Testability,log,logpath,7473,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/experimental/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:7779,Testability,log,logging,7779,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/experimental/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:7808,Testability,log,logging,7808, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/experimental/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:11137,Availability,down,downstream,11137," analytic Pearson residuals#; With version 1.9, scanpy introduces new preprocessing functions based on Pearson residuals into the experimental.pp module. These functions implement the core steps of the preprocessing described and benchmarked in Lause et al. (2021).; In the first part, this tutorial introduces the new core functions by demonstrating their usage on two example datasets. In the second part, we briefly explain the optional arguments and their default settings. Finally, two wrapper functions that run the whole Pearson residual workflow at once are briefly discussed. Background#; In brief, Pearson residuals transform raw UMI counts into a representation where three aims are achieved:. remove the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seuratâs scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; Thi",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:11839,Availability,error,errors,11839,"tation where three aims are achieved:. remove the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seuratâs scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:12366,Availability,down,download,12366,"duals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seuratâs scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:12980,Availability,down,downloaded,12980,"4555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5ad cache file to speedup reading next time. To demonstrate that Pearson residuals select meaningful genes on these PBMC datasets, we will compare the gene selection to a set of marker genes that were identified in the PBMC3k tutorial. They map to PBMC cell types as follows:; ['IL7R', # CD4 T cells; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23130,Availability,down,downstream,23130,"no biological differences between cells. We then only keep the deviations from this model, the residuals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23291,Availability,down,downstream,23291,"iduals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the squar",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:28372,Availability,down,downstream,28372," to three optional arguments besides the raw counts:. Overdispersion parameter theta#; To compute Pearson residuals, we need an estimation of the technical variance in the data. There is still a debate on which noise distribution is most appropiate for scRNA UMI data, with Poisson or the Negative binomial being likely candidates. We implemented the negative binomial model here, which is overdispersed compared to Poisson. The amount of overdispersion is controlled by the argument theta, where a smaller theta corresponds to larger overdispersion. Lause et al. (2021) recommend using the default theta=100, as noise in negative control data without biological variation was fit well by this value. If Poisson behavior is desired, the overdispersion parameter can instead be set to infinity (theta=np.Inf). Clipping threshold clip#; When a gene is expressed in only very few cells, and missing in all others, it will generate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable ge",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29533,Availability,down,down,29533,"ior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper fun",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:30439,Availability,avail,available,30439,"he chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pears",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:31050,Availability,error,error,31050,"s at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:8143,Deployability,toggle,toggleswitch,8143,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:9227,Deployability,release,release,9227,py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. How to preprocess UMI count data with analytic Pearson residuals. Contents . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. How to preproc,MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23504,Deployability,pipeline,pipeline,23504,"he null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pb",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23752,Deployability,pipeline,pipelines,23752," genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson resi",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23535,Energy Efficiency,reduce,reduce,23535,"he null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pb",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23605,Energy Efficiency,reduce,reduced,23605,"he observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:25178,Energy Efficiency,reduce,reduce,25178," normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson residuals#; This will transform the sparse raw counts in adata.X to a dense matrix of Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.normalize_pearson_residuals(adata). computing analytic Pearson residuals on adata.X; finished (0:00:00); computing analytic Pearson residuals on adata.X; finished (0:00:00). Compute PCA and t-SNE#; We now reduce the dimensionality of the data by running PCA on the Pearson residuals. On top, we run t-SNE for vizualisation. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.pp.pca(adata, n_comps=50); n_cells = len(adata); sc.tl.tsne(adata, use_rep=""X_pca""). computing PCA; with n_comps=50; finished (0:00:27); computing tSNE; using sklearn.manifold.TSNE; finished: added; 'X_tsne', tSNE coordinates (adata.obsm) (0:00:12); computing PCA; with n_comps=50; finished (0:00:15); computing tSNE; using sklearn.manifold.TSNE; finished: added; 'X_tsne', tSNE coordinates (adata.obsm) (0:00:27). Compute Neighborhood graph and Leiden clustering#; Based on the PCA of Pearson resisuals, we also run a clustering. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.pp.neighbors(adata, n_neighbors=10, n_pcs=50); sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2, directed=False). computing neighbors; using 'X_pca' with n_pcs = 50; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:28865,Energy Efficiency,efficient,efficiently,28865,"persion is controlled by the argument theta, where a smaller theta corresponds to larger overdispersion. Lause et al. (2021) recommend using the default theta=100, as noise in negative control data without biological variation was fit well by this value. If Poisson behavior is desired, the overdispersion parameter can instead be set to infinity (theta=np.Inf). Clipping threshold clip#; When a gene is expressed in only very few cells, and missing in all others, it will generate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper funct",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29037,Energy Efficiency,reduce,reduce,29037,"behavior is desired, the overdispersion parameter can instead be set to infinity (theta=np.Inf). Clipping threshold clip#; When a gene is expressed in only very few cells, and missing in all others, it will generate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29150,Energy Efficiency,reduce,reduced,29150,"behavior is desired, the overdispersion parameter can instead be set to infinity (theta=np.Inf). Clipping threshold clip#; When a gene is expressed in only very few cells, and missing in all others, it will generate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29179,Energy Efficiency,efficient,efficient,29179,"erate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_resi",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29774,Energy Efficiency,reduce,reduce,29774,"Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:10675,Integrability,wrap,wrapper,10675," counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. How to preprocess UMI count data with analytic Pearson residuals#; With version 1.9, scanpy introduces new preprocessing functions based on Pearson residuals into the experimental.pp module. These functions implement the core steps of the preprocessing described and benchmarked in Lause et al. (2021).; In the first part, this tutorial introduces the new core functions by demonstrating their usage on two example datasets. In the second part, we briefly explain the optional arguments and their default settings. Finally, two wrapper functions that run the whole Pearson residual workflow at once are briefly discussed. Background#; In brief, Pearson residuals transform raw UMI counts into a representation where three aims are achieved:. remove the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seuratâs scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Prep",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29902,Integrability,wrap,wrappers,29902,"nt matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:30540,Integrability,wrap,wrapper,30540,"unksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transformi",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:9556,Modifiability,variab,variable,9556,"l.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. How to preprocess UMI count data with analytic Pearson residuals. Contents . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. How to preprocess UMI count data with analytic Pearson residuals#; With version 1.9, scanpy introduces new preprocessing functions based on Pearson residuals into the experimental.pp module. These functions implement the core steps of the preprocessing described and benchmarked in Lause et al. (2021).; In the first part, this tutorial introduces the new core functions by demonstrating their usage on two example datasets. In the second part, we briefly ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:9585,Modifiability,variab,variable,9585,"l.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. How to preprocess UMI count data with analytic Pearson residuals. Contents . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. How to preprocess UMI count data with analytic Pearson residuals#; With version 1.9, scanpy introduces new preprocessing functions based on Pearson residuals into the experimental.pp module. These functions implement the core steps of the preprocessing described and benchmarked in Lause et al. (2021).; In the first part, this tutorial introduces the new core functions by demonstrating their usage on two example datasets. In the second part, we briefly ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:17674,Modifiability,variab,variable,17674,"utlier_mt""] = adata_pbmc10k.obs.pct_counts_mt > 20; adata_pbmc10k.obs[""outlier_total""] = adata_pbmc10k.obs.total_counts > 25000; adata_pbmc10k.obs[""outlier_ngenes""] = adata_pbmc10k.obs.n_genes_by_counts > 6000. print(; ""%u cells with high %% of mitochondrial genes""; % (sum(adata_pbmc10k.obs[""outlier_mt""])); ); print(""%u cells with large total counts"" % (sum(adata_pbmc10k.obs[""outlier_total""]))); print(; ""%u cells with large number of genes"" % (sum(adata_pbmc10k.obs[""outlier_ngenes""])); ). adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_mt""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_total""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_ngenes""], :]; sc.pp.filter_genes(adata_pbmc10k, min_cells=1). 494 cells with high % of mitochondrial genes; 75 cells with large total counts; 6 cells with large number of genes; filtered out 1 genes that are detected in less than 1 cells. Use Pearson residuals for selection of highly variable genes#; Analytic Pearson residuals can be used to identify biologically variable genes. For that, the observed counts are compared to the expected counts of a ânull modelâ. This model includes no biological variability between cells. Pearson residuals are defined such that genes that are not differentially expressed will have variance close to 1. In contrast, if a gene is differentially expressed, it will deviate from the null model, causing larger residuals and residual variance >1 for this gene. More details and comparisons to other gene selection methods can be found in Lause et al. (2021).; The call to highly_variable_genes(flavor='pearson_residuals',n_top_genes=2000) computes the residual variances and selects 2000 genes based on this. As shown in the plots below, cell type marker genes known a priori are successfully selected. Compute 2000 variable genes with Pearson residuals#; This will create the field highly_variable, indicating the 2000 genes that have the most variable Pearson residuals. f",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:17755,Modifiability,variab,variable,17755,"utlier_mt""] = adata_pbmc10k.obs.pct_counts_mt > 20; adata_pbmc10k.obs[""outlier_total""] = adata_pbmc10k.obs.total_counts > 25000; adata_pbmc10k.obs[""outlier_ngenes""] = adata_pbmc10k.obs.n_genes_by_counts > 6000. print(; ""%u cells with high %% of mitochondrial genes""; % (sum(adata_pbmc10k.obs[""outlier_mt""])); ); print(""%u cells with large total counts"" % (sum(adata_pbmc10k.obs[""outlier_total""]))); print(; ""%u cells with large number of genes"" % (sum(adata_pbmc10k.obs[""outlier_ngenes""])); ). adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_mt""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_total""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_ngenes""], :]; sc.pp.filter_genes(adata_pbmc10k, min_cells=1). 494 cells with high % of mitochondrial genes; 75 cells with large total counts; 6 cells with large number of genes; filtered out 1 genes that are detected in less than 1 cells. Use Pearson residuals for selection of highly variable genes#; Analytic Pearson residuals can be used to identify biologically variable genes. For that, the observed counts are compared to the expected counts of a ânull modelâ. This model includes no biological variability between cells. Pearson residuals are defined such that genes that are not differentially expressed will have variance close to 1. In contrast, if a gene is differentially expressed, it will deviate from the null model, causing larger residuals and residual variance >1 for this gene. More details and comparisons to other gene selection methods can be found in Lause et al. (2021).; The call to highly_variable_genes(flavor='pearson_residuals',n_top_genes=2000) computes the residual variances and selects 2000 genes based on this. As shown in the plots below, cell type marker genes known a priori are successfully selected. Compute 2000 variable genes with Pearson residuals#; This will create the field highly_variable, indicating the 2000 genes that have the most variable Pearson residuals. f",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:17890,Modifiability,variab,variability,17890,"genes_by_counts > 6000. print(; ""%u cells with high %% of mitochondrial genes""; % (sum(adata_pbmc10k.obs[""outlier_mt""])); ); print(""%u cells with large total counts"" % (sum(adata_pbmc10k.obs[""outlier_total""]))); print(; ""%u cells with large number of genes"" % (sum(adata_pbmc10k.obs[""outlier_ngenes""])); ). adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_mt""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_total""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_ngenes""], :]; sc.pp.filter_genes(adata_pbmc10k, min_cells=1). 494 cells with high % of mitochondrial genes; 75 cells with large total counts; 6 cells with large number of genes; filtered out 1 genes that are detected in less than 1 cells. Use Pearson residuals for selection of highly variable genes#; Analytic Pearson residuals can be used to identify biologically variable genes. For that, the observed counts are compared to the expected counts of a ânull modelâ. This model includes no biological variability between cells. Pearson residuals are defined such that genes that are not differentially expressed will have variance close to 1. In contrast, if a gene is differentially expressed, it will deviate from the null model, causing larger residuals and residual variance >1 for this gene. More details and comparisons to other gene selection methods can be found in Lause et al. (2021).; The call to highly_variable_genes(flavor='pearson_residuals',n_top_genes=2000) computes the residual variances and selects 2000 genes based on this. As shown in the plots below, cell type marker genes known a priori are successfully selected. Compute 2000 variable genes with Pearson residuals#; This will create the field highly_variable, indicating the 2000 genes that have the most variable Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.highly_variable_genes(; adata, flavor=""pearson_residuals"", n_top_genes=2000; ). extracting highly variable genes; --> added;",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:18541,Modifiability,variab,variable,18541,"s than 1 cells. Use Pearson residuals for selection of highly variable genes#; Analytic Pearson residuals can be used to identify biologically variable genes. For that, the observed counts are compared to the expected counts of a ânull modelâ. This model includes no biological variability between cells. Pearson residuals are defined such that genes that are not differentially expressed will have variance close to 1. In contrast, if a gene is differentially expressed, it will deviate from the null model, causing larger residuals and residual variance >1 for this gene. More details and comparisons to other gene selection methods can be found in Lause et al. (2021).; The call to highly_variable_genes(flavor='pearson_residuals',n_top_genes=2000) computes the residual variances and selects 2000 genes based on this. As shown in the plots below, cell type marker genes known a priori are successfully selected. Compute 2000 variable genes with Pearson residuals#; This will create the field highly_variable, indicating the 2000 genes that have the most variable Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.highly_variable_genes(; adata, flavor=""pearson_residuals"", n_top_genes=2000; ). extracting highly variable genes; --> added; 'highly_variable', boolean vector (adata.var); 'highly_variable_rank', float vector (adata.var); 'highly_variable_nbatches', int vector (adata.var); 'highly_variable_intersection', boolean vector (adata.var); 'means', float vector (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var); extracting highly variable genes; --> added; 'highly_variable', boolean vector (adata.var); 'highly_variable_rank', float vector (adata.var); 'highly_variable_nbatches', int vector (adata.var); 'highly_variable_intersection', boolean vector (adata.var); 'means', float vector (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var). Plot gene selectio",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:18670,Modifiability,variab,variable,18670,"s than 1 cells. Use Pearson residuals for selection of highly variable genes#; Analytic Pearson residuals can be used to identify biologically variable genes. For that, the observed counts are compared to the expected counts of a ânull modelâ. This model includes no biological variability between cells. Pearson residuals are defined such that genes that are not differentially expressed will have variance close to 1. In contrast, if a gene is differentially expressed, it will deviate from the null model, causing larger residuals and residual variance >1 for this gene. More details and comparisons to other gene selection methods can be found in Lause et al. (2021).; The call to highly_variable_genes(flavor='pearson_residuals',n_top_genes=2000) computes the residual variances and selects 2000 genes based on this. As shown in the plots below, cell type marker genes known a priori are successfully selected. Compute 2000 variable genes with Pearson residuals#; This will create the field highly_variable, indicating the 2000 genes that have the most variable Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.highly_variable_genes(; adata, flavor=""pearson_residuals"", n_top_genes=2000; ). extracting highly variable genes; --> added; 'highly_variable', boolean vector (adata.var); 'highly_variable_rank', float vector (adata.var); 'highly_variable_nbatches', int vector (adata.var); 'highly_variable_intersection', boolean vector (adata.var); 'means', float vector (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var); extracting highly variable genes; --> added; 'highly_variable', boolean vector (adata.var); 'highly_variable_rank', float vector (adata.var); 'highly_variable_nbatches', int vector (adata.var); 'highly_variable_intersection', boolean vector (adata.var); 'means', float vector (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var). Plot gene selectio",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:18860,Modifiability,variab,variable,18860,"gical variability between cells. Pearson residuals are defined such that genes that are not differentially expressed will have variance close to 1. In contrast, if a gene is differentially expressed, it will deviate from the null model, causing larger residuals and residual variance >1 for this gene. More details and comparisons to other gene selection methods can be found in Lause et al. (2021).; The call to highly_variable_genes(flavor='pearson_residuals',n_top_genes=2000) computes the residual variances and selects 2000 genes based on this. As shown in the plots below, cell type marker genes known a priori are successfully selected. Compute 2000 variable genes with Pearson residuals#; This will create the field highly_variable, indicating the 2000 genes that have the most variable Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.highly_variable_genes(; adata, flavor=""pearson_residuals"", n_top_genes=2000; ). extracting highly variable genes; --> added; 'highly_variable', boolean vector (adata.var); 'highly_variable_rank', float vector (adata.var); 'highly_variable_nbatches', int vector (adata.var); 'highly_variable_intersection', boolean vector (adata.var); 'means', float vector (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var); extracting highly variable genes; --> added; 'highly_variable', boolean vector (adata.var); 'highly_variable_rank', float vector (adata.var); 'highly_variable_nbatches', int vector (adata.var); 'highly_variable_intersection', boolean vector (adata.var); 'means', float vector (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var). Plot gene selection#; To illustrate the selection procedure, we plot mean and residual variance of each gene, highlighting the selected genes (red). On top, we plot the known marker genes defined in the beginning (black). We can see that all of them are selected, as desired. fig, axes = plt",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:19236,Modifiability,variab,variable,19236,"d in Lause et al. (2021).; The call to highly_variable_genes(flavor='pearson_residuals',n_top_genes=2000) computes the residual variances and selects 2000 genes based on this. As shown in the plots below, cell type marker genes known a priori are successfully selected. Compute 2000 variable genes with Pearson residuals#; This will create the field highly_variable, indicating the 2000 genes that have the most variable Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.highly_variable_genes(; adata, flavor=""pearson_residuals"", n_top_genes=2000; ). extracting highly variable genes; --> added; 'highly_variable', boolean vector (adata.var); 'highly_variable_rank', float vector (adata.var); 'highly_variable_nbatches', int vector (adata.var); 'highly_variable_intersection', boolean vector (adata.var); 'means', float vector (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var); extracting highly variable genes; --> added; 'highly_variable', boolean vector (adata.var); 'highly_variable_rank', float vector (adata.var); 'highly_variable_nbatches', int vector (adata.var); 'highly_variable_intersection', boolean vector (adata.var); 'means', float vector (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var). Plot gene selection#; To illustrate the selection procedure, we plot mean and residual variance of each gene, highlighting the selected genes (red). On top, we plot the known marker genes defined in the beginning (black). We can see that all of them are selected, as desired. fig, axes = plt.subplots(1, 2, figsize=(12, 6)); for ax, adata in zip(axes, [adata_pbmc3k, adata_pbmc10k]):; hvgs = adata.var[""highly_variable""]. ax.scatter(; adata.var[""mean_counts""], adata.var[""residual_variances""], s=3, edgecolor=""none""; ); ax.scatter(; adata.var[""mean_counts""][hvgs],; adata.var[""residual_variances""][hvgs],; c=""tab:red"",; label=""selected genes"",; s=3,; edgecolor=""no",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:20899,Modifiability,variab,variable,20899,", axes = plt.subplots(1, 2, figsize=(12, 6)); for ax, adata in zip(axes, [adata_pbmc3k, adata_pbmc10k]):; hvgs = adata.var[""highly_variable""]. ax.scatter(; adata.var[""mean_counts""], adata.var[""residual_variances""], s=3, edgecolor=""none""; ); ax.scatter(; adata.var[""mean_counts""][hvgs],; adata.var[""residual_variances""][hvgs],; c=""tab:red"",; label=""selected genes"",; s=3,; edgecolor=""none"",; ); ax.scatter(; adata.var[""mean_counts""][np.isin(adata.var_names, markers)],; adata.var[""residual_variances""][np.isin(adata.var_names, markers)],; c=""k"",; label=""known marker genes"",; s=10,; edgecolor=""none"",; ); ax.set_xscale(""log""); ax.set_xlabel(""mean expression""); ax.set_yscale(""log""); ax.set_ylabel(""residual variance""); ax.set_title(adata.uns[""name""]). ax.spines[""right""].set_visible(False); ax.spines[""top""].set_visible(False); ax.yaxis.set_ticks_position(""left""); ax.xaxis.set_ticks_position(""bottom""); plt.legend(). <matplotlib.legend.Legend at 0x15859b150>. Apply gene selection#; We subset both datasets to retain just the variable genes. adata_pbmc3k = adata_pbmc3k[:, adata_pbmc3k.var[""highly_variable""]]; adata_pbmc10k = adata_pbmc10k[:, adata_pbmc10k.var[""highly_variable""]]. Print resulting adata objects#. adata_pbmc3k. View of AnnData object with n_obs Ã n_vars = 2574 Ã 2000; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'outlier_mt', 'outlier_total', 'outlier_ngenes'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'means', 'variances', 'residual_variances', 'highly_variable_rank', 'highly_variable'; uns: 'name', 'hvg'. adata_pbmc10k. View of AnnData object with n_obs Ã n_vars = 10968 Ã 2000; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'outlier_mt', 'outlier_total', 'outlier_ngenes'; var: 'gene_ids', 'feature_types', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'means', 'varianc",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23044,Modifiability,variab,variability,23044,"served UMI counts are compared to the expected counts of a ânull modelâ. This model includes only technical factors, but no biological differences between cells. We then only keep the deviations from this model, the residuals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers[",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23085,Modifiability,variab,variable,23085,"served UMI counts are compared to the expected counts of a ânull modelâ. This model includes only technical factors, but no biological differences between cells. We then only keep the deviations from this model, the residuals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers[",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23354,Modifiability,variab,variable,23354,"he null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:24044,Modifiability,layers,layers,24044,"lity, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson residuals#; This will transform the sparse raw counts in adata.X to a dense matrix of Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.normalize_pearson_residuals(adata). computing analytic Pearson residuals on ad",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:24149,Modifiability,layers,layers,24149,"gical rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson residuals#; This will transform the sparse raw counts in adata.X to a dense matrix of Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.normalize_pearson_residuals(adata). computing analytic Pearson residuals on adata.X; finished (0:00:00); computing analytic Pearson residuals on adata.X; finished (0:00:00). Compute PCA and t-SNE#; We now reduce the",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:24385,Modifiability,layers,layers,24385," now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson residuals#; This will transform the sparse raw counts in adata.X to a dense matrix of Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.normalize_pearson_residuals(adata). computing analytic Pearson residuals on adata.X; finished (0:00:00); computing analytic Pearson residuals on adata.X; finished (0:00:00). Compute PCA and t-SNE#; We now reduce the dimensionality of the data by running PCA on the Pearson residuals. On top, we run t-SNE for vizualisation. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.pp.pca(adata, n_comps=50); n_cells = len(adata); sc.tl.",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:24437,Modifiability,layers,layers,24437,"ing normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson residuals#; This will transform the sparse raw counts in adata.X to a dense matrix of Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.normalize_pearson_residuals(adata). computing analytic Pearson residuals on adata.X; finished (0:00:00); computing analytic Pearson residuals on adata.X; finished (0:00:00). Compute PCA and t-SNE#; We now reduce the dimensionality of the data by running PCA on the Pearson residuals. On top, we run t-SNE for vizualisation. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.pp.pca(adata, n_comps=50); n_cells = len(adata); sc.tl.tsne(adata, use_rep=""X_pca""). computing PCA; with ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:24543,Modifiability,layers,layers,24543,"he most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson residuals#; This will transform the sparse raw counts in adata.X to a dense matrix of Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.normalize_pearson_residuals(adata). computing analytic Pearson residuals on adata.X; finished (0:00:00); computing analytic Pearson residuals on adata.X; finished (0:00:00). Compute PCA and t-SNE#; We now reduce the dimensionality of the data by running PCA on the Pearson residuals. On top, we run t-SNE for vizualisation. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.pp.pca(adata, n_comps=50); n_cells = len(adata); sc.tl.tsne(adata, use_rep=""X_pca""). computing PCA; with n_comps=50; finished (0:00:27); computing tSNE; using sklearn.manifold.TSNE; finished: added; 'X_tsne', tSNE",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:24597,Modifiability,layers,layers,24597,"ced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson residuals#; This will transform the sparse raw counts in adata.X to a dense matrix of Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.normalize_pearson_residuals(adata). computing analytic Pearson residuals on adata.X; finished (0:00:00); computing analytic Pearson residuals on adata.X; finished (0:00:00). Compute PCA and t-SNE#; We now reduce the dimensionality of the data by running PCA on the Pearson residuals. On top, we run t-SNE for vizualisation. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.pp.pca(adata, n_comps=50); n_cells = len(adata); sc.tl.tsne(adata, use_rep=""X_pca""). computing PCA; with n_comps=50; finished (0:00:27); computing tSNE; using sklearn.manifold.TSNE; finished: added; 'X_tsne', tSNE coordinates (adata.obsm) (0:00:12); computing PCA; ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29352,Modifiability,variab,variable,29352,"erate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_resi",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:30176,Modifiability,variab,variable,30176,"ta. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . B",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:31363,Modifiability,variab,variable,31363,"n by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:31392,Modifiability,variab,variable,31392,"n by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:7219,Performance,cache,cachedir,7219,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:12967,Performance,load,load,12967,"4555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5ad cache file to speedup reading next time. To demonstrate that Pearson residuals select meaningful genes on these PBMC datasets, we will compare the gene selection to a set of marker genes that were identified in the PBMC3k tutorial. They map to PBMC cell types as follows:; ['IL7R', # CD4 T cells; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:13106,Performance,cache,cache,13106,"==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5ad cache file to speedup reading next time. To demonstrate that Pearson residuals select meaningful genes on these PBMC datasets, we will compare the gene selection to a set of marker genes that were identified in the PBMC3k tutorial. They map to PBMC cell types as follows:; ['IL7R', # CD4 T cells; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers = [; ""IL7R"",; ""LYZ"",; ""CD14"",; ""MS4A1"",; ""CD8A"",; ""GNLY"",; ""NKG7"",; ""FCGR3A"",; ""MS4A7"",; ""FCER1A"",; ""CST3""",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:13180,Performance,cache,cache,13180,"Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5ad cache file to speedup reading next time. To demonstrate that Pearson residuals select meaningful genes on these PBMC datasets, we will compare the gene selection to a set of marker genes that were identified in the PBMC3k tutorial. They map to PBMC cell types as follows:; ['IL7R', # CD4 T cells; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers = [; ""IL7R"",; ""LYZ"",; ""CD14"",; ""MS4A1"",; ""CD8A"",; ""GNLY"",; ""NKG7"",; ""FCGR3A"",; ""MS4A7"",; ""FCER1A"",; ""CST3"",; ""PPBP"",; ]. Perform Quality control#; First, we remove cells",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:13301,Performance,cache,cache,13301," dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5ad cache file to speedup reading next time. To demonstrate that Pearson residuals select meaningful genes on these PBMC datasets, we will compare the gene selection to a set of marker genes that were identified in the PBMC3k tutorial. They map to PBMC cell types as follows:; ['IL7R', # CD4 T cells; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers = [; ""IL7R"",; ""LYZ"",; ""CD14"",; ""MS4A1"",; ""CD8A"",; ""GNLY"",; ""NKG7"",; ""FCGR3A"",; ""MS4A7"",; ""FCER1A"",; ""CST3"",; ""PPBP"",; ]. Perform Quality control#; First, we remove cells and genes with few counts, then remove outlier cells. Parameters and thresholds are inspired from the PBMC3k tutorial. Basic filtering#. for adata i",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:13362,Performance,cache,cache,13362,"d and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5ad cache file to speedup reading next time. To demonstrate that Pearson residuals select meaningful genes on these PBMC datasets, we will compare the gene selection to a set of marker genes that were identified in the PBMC3k tutorial. They map to PBMC cell types as follows:; ['IL7R', # CD4 T cells; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers = [; ""IL7R"",; ""LYZ"",; ""CD14"",; ""MS4A1"",; ""CD8A"",; ""GNLY"",; ""NKG7"",; ""FCGR3A"",; ""MS4A7"",; ""FCER1A"",; ""CST3"",; ""PPBP"",; ]. Perform Quality control#; First, we remove cells and genes with few counts, then remove outlier cells. Parameters and thresholds are inspired from the PBMC3k tutorial. Basic filtering#. for adata in [adata_pbmc3k, adata_pbmc10k]:; adata.var_names_make_uniqu",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:22325,Performance,perform,performs,22325,"al_counts', 'means', 'variances', 'residual_variances', 'highly_variable_rank', 'highly_variable'; uns: 'name', 'hvg'. adata_pbmc10k. View of AnnData object with n_obs Ã n_vars = 10968 Ã 2000; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'outlier_mt', 'outlier_total', 'outlier_ngenes'; var: 'gene_ids', 'feature_types', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'means', 'variances', 'residual_variances', 'highly_variable_rank', 'highly_variable'; uns: 'name', 'hvg'. Transforming raw counts to Pearson residuals#; When computing Pearson residuals, the observed UMI counts are compared to the expected counts of a ânull modelâ. This model includes only technical factors, but no biological differences between cells. We then only keep the deviations from this model, the residuals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we wil",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23643,Performance,perform,perform,23643,"he observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29167,Performance,perform,perform,29167,"erate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_resi",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:30013,Performance,perform,performs,30013," that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and eva",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:30294,Performance,perform,performs,30294,"n residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functionsâ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:14593,Safety,detect,detected,14593,"s; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers = [; ""IL7R"",; ""LYZ"",; ""CD14"",; ""MS4A1"",; ""CD8A"",; ""GNLY"",; ""NKG7"",; ""FCGR3A"",; ""MS4A7"",; ""FCER1A"",; ""CST3"",; ""PPBP"",; ]. Perform Quality control#; First, we remove cells and genes with few counts, then remove outlier cells. Parameters and thresholds are inspired from the PBMC3k tutorial. Basic filtering#. for adata in [adata_pbmc3k, adata_pbmc10k]:; adata.var_names_make_unique(); print(adata.uns[""name""], "": data shape:"", adata.shape); sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). PBMC 3k (v1) : data shape: (2700, 32738); filtered out 19024 genes that are detected in less than 3 cells; PBMC 10k (v3) : data shape: (11769, 33538); filtered out 232 cells that have less than 200 genes expressed; filtered out 13246 genes that are detected in less than 3 cells. Compute quality control metrics#; We compute number of deteced genes per cell, total counts per cell and percentage of mitochondrial genes per cell. for adata in [adata_pbmc3k, adata_pbmc10k]:; adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(; adata, qc_vars=[""mt""], percent_top=None, log1p=False, inplace=True; ). Plot quality control metrics#; We plot all metrics and observe that both datasets have some outlier cells. for adata in [adata_pbmc3k, adata_pbmc10k]:; print(adata.uns[""name""], "":""); sc.pl.violin(; adata,; [""n_genes_by_counts"", ""total_counts"", ""pct_counts_mt""],; jitter=0.4,; multi_panel=True,; ). PBMC 3k (v1) :; PBMC 10k (v3) :. Based on these metrics, we define outlier cells and remove them. Afterwards, we make sure that all genes are at least detected once in the remaining cells. # define outliers and",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:14766,Safety,detect,detected,14766,"s; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers = [; ""IL7R"",; ""LYZ"",; ""CD14"",; ""MS4A1"",; ""CD8A"",; ""GNLY"",; ""NKG7"",; ""FCGR3A"",; ""MS4A7"",; ""FCER1A"",; ""CST3"",; ""PPBP"",; ]. Perform Quality control#; First, we remove cells and genes with few counts, then remove outlier cells. Parameters and thresholds are inspired from the PBMC3k tutorial. Basic filtering#. for adata in [adata_pbmc3k, adata_pbmc10k]:; adata.var_names_make_unique(); print(adata.uns[""name""], "": data shape:"", adata.shape); sc.pp.filter_cells(adata, min_genes=200); sc.pp.filter_genes(adata, min_cells=3). PBMC 3k (v1) : data shape: (2700, 32738); filtered out 19024 genes that are detected in less than 3 cells; PBMC 10k (v3) : data shape: (11769, 33538); filtered out 232 cells that have less than 200 genes expressed; filtered out 13246 genes that are detected in less than 3 cells. Compute quality control metrics#; We compute number of deteced genes per cell, total counts per cell and percentage of mitochondrial genes per cell. for adata in [adata_pbmc3k, adata_pbmc10k]:; adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(; adata, qc_vars=[""mt""], percent_top=None, log1p=False, inplace=True; ). Plot quality control metrics#; We plot all metrics and observe that both datasets have some outlier cells. for adata in [adata_pbmc3k, adata_pbmc10k]:; print(adata.uns[""name""], "":""); sc.pl.violin(; adata,; [""n_genes_by_counts"", ""total_counts"", ""pct_counts_mt""],; jitter=0.4,; multi_panel=True,; ). PBMC 3k (v1) :; PBMC 10k (v3) :. Based on these metrics, we define outlier cells and remove them. Afterwards, we make sure that all genes are at least detected once in the remaining cells. # define outliers and",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:15597,Safety,detect,detected,15597," are detected in less than 3 cells; PBMC 10k (v3) : data shape: (11769, 33538); filtered out 232 cells that have less than 200 genes expressed; filtered out 13246 genes that are detected in less than 3 cells. Compute quality control metrics#; We compute number of deteced genes per cell, total counts per cell and percentage of mitochondrial genes per cell. for adata in [adata_pbmc3k, adata_pbmc10k]:; adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(; adata, qc_vars=[""mt""], percent_top=None, log1p=False, inplace=True; ). Plot quality control metrics#; We plot all metrics and observe that both datasets have some outlier cells. for adata in [adata_pbmc3k, adata_pbmc10k]:; print(adata.uns[""name""], "":""); sc.pl.violin(; adata,; [""n_genes_by_counts"", ""total_counts"", ""pct_counts_mt""],; jitter=0.4,; multi_panel=True,; ). PBMC 3k (v1) :; PBMC 10k (v3) :. Based on these metrics, we define outlier cells and remove them. Afterwards, we make sure that all genes are at least detected once in the remaining cells. # define outliers and do the filtering for the 3k dataset; adata_pbmc3k.obs[""outlier_mt""] = adata_pbmc3k.obs.pct_counts_mt > 5; adata_pbmc3k.obs[""outlier_total""] = adata_pbmc3k.obs.total_counts > 5000; adata_pbmc3k.obs[""outlier_ngenes""] = adata_pbmc3k.obs.n_genes_by_counts > 2500. print(; ""%u cells with high %% of mitochondrial genes""; % (sum(adata_pbmc3k.obs[""outlier_mt""])); ); print(""%u cells with large total counts"" % (sum(adata_pbmc3k.obs[""outlier_total""]))); print(""%u cells with large number of genes"" % (sum(adata_pbmc3k.obs[""outlier_ngenes""]))). adata_pbmc3k = adata_pbmc3k[~adata_pbmc3k.obs[""outlier_mt""], :]; adata_pbmc3k = adata_pbmc3k[~adata_pbmc3k.obs[""outlier_total""], :]; adata_pbmc3k = adata_pbmc3k[~adata_pbmc3k.obs[""outlier_ngenes""], :]; sc.pp.filter_genes(adata_pbmc3k, min_cells=1). 57 cells with high % of mitochondrial genes; 69 cells with large total counts; 5 cells with large number of genes; filtered out 2 genes that are de",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:16587,Safety,detect,detected,16587,"d remove them. Afterwards, we make sure that all genes are at least detected once in the remaining cells. # define outliers and do the filtering for the 3k dataset; adata_pbmc3k.obs[""outlier_mt""] = adata_pbmc3k.obs.pct_counts_mt > 5; adata_pbmc3k.obs[""outlier_total""] = adata_pbmc3k.obs.total_counts > 5000; adata_pbmc3k.obs[""outlier_ngenes""] = adata_pbmc3k.obs.n_genes_by_counts > 2500. print(; ""%u cells with high %% of mitochondrial genes""; % (sum(adata_pbmc3k.obs[""outlier_mt""])); ); print(""%u cells with large total counts"" % (sum(adata_pbmc3k.obs[""outlier_total""]))); print(""%u cells with large number of genes"" % (sum(adata_pbmc3k.obs[""outlier_ngenes""]))). adata_pbmc3k = adata_pbmc3k[~adata_pbmc3k.obs[""outlier_mt""], :]; adata_pbmc3k = adata_pbmc3k[~adata_pbmc3k.obs[""outlier_total""], :]; adata_pbmc3k = adata_pbmc3k[~adata_pbmc3k.obs[""outlier_ngenes""], :]; sc.pp.filter_genes(adata_pbmc3k, min_cells=1). 57 cells with high % of mitochondrial genes; 69 cells with large total counts; 5 cells with large number of genes; filtered out 2 genes that are detected in less than 1 cells. # define outliers and do the filtering for the 10k dataset; adata_pbmc10k.obs[""outlier_mt""] = adata_pbmc10k.obs.pct_counts_mt > 20; adata_pbmc10k.obs[""outlier_total""] = adata_pbmc10k.obs.total_counts > 25000; adata_pbmc10k.obs[""outlier_ngenes""] = adata_pbmc10k.obs.n_genes_by_counts > 6000. print(; ""%u cells with high %% of mitochondrial genes""; % (sum(adata_pbmc10k.obs[""outlier_mt""])); ); print(""%u cells with large total counts"" % (sum(adata_pbmc10k.obs[""outlier_total""]))); print(; ""%u cells with large number of genes"" % (sum(adata_pbmc10k.obs[""outlier_ngenes""])); ). adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_mt""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_total""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_ngenes""], :]; sc.pp.filter_genes(adata_pbmc10k, min_cells=1). 494 cells with high % of mitochondrial genes; 75 cells with large total counts",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:17597,Safety,detect,detected,17597,"e number of genes; filtered out 2 genes that are detected in less than 1 cells. # define outliers and do the filtering for the 10k dataset; adata_pbmc10k.obs[""outlier_mt""] = adata_pbmc10k.obs.pct_counts_mt > 20; adata_pbmc10k.obs[""outlier_total""] = adata_pbmc10k.obs.total_counts > 25000; adata_pbmc10k.obs[""outlier_ngenes""] = adata_pbmc10k.obs.n_genes_by_counts > 6000. print(; ""%u cells with high %% of mitochondrial genes""; % (sum(adata_pbmc10k.obs[""outlier_mt""])); ); print(""%u cells with large total counts"" % (sum(adata_pbmc10k.obs[""outlier_total""]))); print(; ""%u cells with large number of genes"" % (sum(adata_pbmc10k.obs[""outlier_ngenes""])); ). adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_mt""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_total""], :]; adata_pbmc10k = adata_pbmc10k[~adata_pbmc10k.obs[""outlier_ngenes""], :]; sc.pp.filter_genes(adata_pbmc10k, min_cells=1). 494 cells with high % of mitochondrial genes; 75 cells with large total counts; 6 cells with large number of genes; filtered out 1 genes that are detected in less than 1 cells. Use Pearson residuals for selection of highly variable genes#; Analytic Pearson residuals can be used to identify biologically variable genes. For that, the observed counts are compared to the expected counts of a ânull modelâ. This model includes no biological variability between cells. Pearson residuals are defined such that genes that are not differentially expressed will have variance close to 1. In contrast, if a gene is differentially expressed, it will deviate from the null model, causing larger residuals and residual variance >1 for this gene. More details and comparisons to other gene selection methods can be found in Lause et al. (2021).; The call to highly_variable_genes(flavor='pearson_residuals',n_top_genes=2000) computes the residual variances and selects 2000 genes based on this. As shown in the plots below, cell type marker genes known a priori are successfully selected. Compute 200",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:22570,Safety,predict,predict,22570,"ct with n_obs Ã n_vars = 10968 Ã 2000; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'outlier_mt', 'outlier_total', 'outlier_ngenes'; var: 'gene_ids', 'feature_types', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'means', 'variances', 'residual_variances', 'highly_variable_rank', 'highly_variable'; uns: 'name', 'hvg'. Transforming raw counts to Pearson residuals#; When computing Pearson residuals, the observed UMI counts are compared to the expected counts of a ânull modelâ. This model includes only technical factors, but no biological differences between cells. We then only keep the deviations from this model, the residuals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the datase",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:22865,Safety,detect,detecting,22865,"able_rank', 'highly_variable'; uns: 'name', 'hvg'. Transforming raw counts to Pearson residuals#; When computing Pearson residuals, the observed UMI counts are compared to the expected counts of a ânull modelâ. This model includes only technical factors, but no biological differences between cells. We then only keep the deviations from this model, the residuals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations â and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:28398,Safety,avoid,avoid,28398,"e Pearson residuals, we need an estimation of the technical variance in the data. There is still a debate on which noise distribution is most appropiate for scRNA UMI data, with Poisson or the Negative binomial being likely candidates. We implemented the negative binomial model here, which is overdispersed compared to Poisson. The amount of overdispersion is controlled by the argument theta, where a smaller theta corresponds to larger overdispersion. Lause et al. (2021) recommend using the default theta=100, as noise in negative control data without biological variation was fit well by this value. If Poisson behavior is desired, the overdispersion parameter can instead be set to infinity (theta=np.Inf). Clipping threshold clip#; When a gene is expressed in only very few cells, and missing in all others, it will generate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:28992,Safety,avoid,avoid,28992,"behavior is desired, the overdispersion parameter can instead be set to infinity (theta=np.Inf). Clipping threshold clip#; When a gene is expressed in only very few cells, and missing in all others, it will generate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but wonât compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:8460,Security,hash,hashsolo,8460,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. How to preprocess UMI count data with analytic Pearson residuals. Contents . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality contro,MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:7487,Testability,log,logfile,7487,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:7526,Testability,log,logpath,7526,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:7832,Testability,log,logging,7832,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:7861,Testability,log,logging,7861, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:10414,Testability,benchmark,benchmarked,10414,"ata; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. How to preprocess UMI count data with analytic Pearson residuals#; With version 1.9, scanpy introduces new preprocessing functions based on Pearson residuals into the experimental.pp module. These functions implement the core steps of the preprocessing described and benchmarked in Lause et al. (2021).; In the first part, this tutorial introduces the new core functions by demonstrating their usage on two example datasets. In the second part, we briefly explain the optional arguments and their default settings. Finally, two wrapper functions that run the whole Pearson residual workflow at once are briefly discussed. Background#; In brief, Pearson residuals transform raw UMI counts into a representation where three aims are achieved:. remove the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:11440,Testability,log,log-transforming,11440,"nd benchmarked in Lause et al. (2021).; In the first part, this tutorial introduces the new core functions by demonstrating their usage on two example datasets. In the second part, we briefly explain the optional arguments and their default settings. Finally, two wrapper functions that run the whole Pearson residual workflow at once are briefly discussed. Background#; In brief, Pearson residuals transform raw UMI counts into a representation where three aims are achieved:. remove the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seuratâs scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutori",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:11889,Testability,log,logging,11889,"ve the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seuratâs scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:20492,Testability,log,log,20492,"or (adata.var); 'variances', float vector (adata.var); 'residual_variances', float vector (adata.var). Plot gene selection#; To illustrate the selection procedure, we plot mean and residual variance of each gene, highlighting the selected genes (red). On top, we plot the known marker genes defined in the beginning (black). We can see that all of them are selected, as desired. fig, axes = plt.subplots(1, 2, figsize=(12, 6)); for ax, adata in zip(axes, [adata_pbmc3k, adata_pbmc10k]):; hvgs = adata.var[""highly_variable""]. ax.scatter(; adata.var[""mean_counts""], adata.var[""residual_variances""], s=3, edgecolor=""none""; ); ax.scatter(; adata.var[""mean_counts""][hvgs],; adata.var[""residual_variances""][hvgs],; c=""tab:red"",; label=""selected genes"",; s=3,; edgecolor=""none"",; ); ax.scatter(; adata.var[""mean_counts""][np.isin(adata.var_names, markers)],; adata.var[""residual_variances""][np.isin(adata.var_names, markers)],; c=""k"",; label=""known marker genes"",; s=10,; edgecolor=""none"",; ); ax.set_xscale(""log""); ax.set_xlabel(""mean expression""); ax.set_yscale(""log""); ax.set_ylabel(""residual variance""); ax.set_title(adata.uns[""name""]). ax.spines[""right""].set_visible(False); ax.spines[""top""].set_visible(False); ax.yaxis.set_ticks_position(""left""); ax.xaxis.set_ticks_position(""bottom""); plt.legend(). <matplotlib.legend.Legend at 0x15859b150>. Apply gene selection#; We subset both datasets to retain just the variable genes. adata_pbmc3k = adata_pbmc3k[:, adata_pbmc3k.var[""highly_variable""]]; adata_pbmc10k = adata_pbmc10k[:, adata_pbmc10k.var[""highly_variable""]]. Print resulting adata objects#. adata_pbmc3k. View of AnnData object with n_obs Ã n_vars = 2574 Ã 2000; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'outlier_mt', 'outlier_total', 'outlier_ngenes'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'means', 'variances', 'residual_variances', 'highly_variable_rank', 'highly_variab",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:20548,Testability,log,log,20548,"residual_variances', float vector (adata.var). Plot gene selection#; To illustrate the selection procedure, we plot mean and residual variance of each gene, highlighting the selected genes (red). On top, we plot the known marker genes defined in the beginning (black). We can see that all of them are selected, as desired. fig, axes = plt.subplots(1, 2, figsize=(12, 6)); for ax, adata in zip(axes, [adata_pbmc3k, adata_pbmc10k]):; hvgs = adata.var[""highly_variable""]. ax.scatter(; adata.var[""mean_counts""], adata.var[""residual_variances""], s=3, edgecolor=""none""; ); ax.scatter(; adata.var[""mean_counts""][hvgs],; adata.var[""residual_variances""][hvgs],; c=""tab:red"",; label=""selected genes"",; s=3,; edgecolor=""none"",; ); ax.scatter(; adata.var[""mean_counts""][np.isin(adata.var_names, markers)],; adata.var[""residual_variances""][np.isin(adata.var_names, markers)],; c=""k"",; label=""known marker genes"",; s=10,; edgecolor=""none"",; ); ax.set_xscale(""log""); ax.set_xlabel(""mean expression""); ax.set_yscale(""log""); ax.set_ylabel(""residual variance""); ax.set_title(adata.uns[""name""]). ax.spines[""right""].set_visible(False); ax.spines[""top""].set_visible(False); ax.yaxis.set_ticks_position(""left""); ax.xaxis.set_ticks_position(""bottom""); plt.legend(). <matplotlib.legend.Legend at 0x15859b150>. Apply gene selection#; We subset both datasets to retain just the variable genes. adata_pbmc3k = adata_pbmc3k[:, adata_pbmc3k.var[""highly_variable""]]; adata_pbmc10k = adata_pbmc10k[:, adata_pbmc10k.var[""highly_variable""]]. Print resulting adata objects#. adata_pbmc3k. View of AnnData object with n_obs Ã n_vars = 2574 Ã 2000; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'outlier_mt', 'outlier_total', 'outlier_ngenes'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'means', 'variances', 'residual_variances', 'highly_variable_rank', 'highly_variable'; uns: 'name', 'hvg'. adata_pbmc10k. View of AnnData ",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:11623,Usability,simpl,simplified,11623,"nd part, we briefly explain the optional arguments and their default settings. Finally, two wrapper functions that run the whole Pearson residual workflow at once are briefly discussed. Background#; In brief, Pearson residuals transform raw UMI counts into a representation where three aims are achieved:. remove the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seuratâs scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matri",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:12096,Usability,learn,learn,12096,"ession genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seuratâs scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbm",MatchSource.WIKI,en/stable/tutorials/experimental/pearson_residuals.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:17450,Availability,avail,available,17450,"x = axs[row_idx, col_idx]; sc.pl.umap(adata, color=marker, ax=ax, show=False, frameon=False, s=20); # Add cell type as row label - here we simply add it as ylabel of; # the first Axes object in the row; if col_idx == 0:; # We disabled axis drawing in UMAP to have plots without background and border; # so we need to re-enable axis to plot the ylabel; ax.axis(""on""); ax.tick_params(; top=""off"",; bottom=""off"",; left=""off"",; right=""off"",; labelleft=""on"",; labelbottom=""off"",; ); ax.set_ylabel(cell_type + ""\n"", rotation=90, fontsize=14); ax.set(frame_on=False); col_idx += 1; # Remove unused column Axes in the current row; while col_idx < ncol:; axs[row_idx, col_idx].remove(); col_idx += 1; # Alignment within the Figure; fig.tight_layout(). Plot size#; There are multiple options for adjusting plot size, as shown below.; We can adjust plot size by setting rcParams['figure.figsize'], which will also change settings for future plots.; These are either available through scanpyâs set_figure_params which wraps Matplotlibâs rcParams or by modifying them directly. rcParams[""figure.figsize""] = (2, 2); sc.pl.umap(adata, color=""bulk_labels""); # Set back to value selected above; rcParams[""figure.figsize""] = FIGSIZE. We can set rcParams for a single plot with a context manager which wonât change the setting for future plots. with plt.rc_context({""figure.figsize"": (5, 5)}):; sc.pl.umap(adata, color=""bulk_labels""). We can also create an Axes object with a predefined size and pass it to a scanpy plotting function. fig, ax = plt.subplots(figsize=(4, 4)); sc.pl.umap(adata, color=""bulk_labels"", ax=ax). The figsize is divided between all Axes and spaces between them. Thus, if we have multiple Axes (columns or rows) we must accordingly increase figsize.; However, if we do not pass Axes objects to the scanpy embedding function it will automatically create individual Axes with the size of the current global figsize (as specified by e.g. matplotlib figure.figsize). ncol = 2; nrow = 1; figsize = 3;",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:29398,Availability,down,down,29398,"of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.midpoint - self.vmin))),; ); normalized_mid = 0.5; x, y = (; [self.vmin, self.midpoint, self.vmax],; [normalized_min, normalized_mid, normalized_max],; ); return np.ma.masked_array(np.interp(value, x, y)). # Add padding arround vmin and vmax as Colorbar sets value limits to round numbers below and; # above the vmin and vmax, respectively, which means that they can not be assigned the correct; # color with our nomalisation function that is limited to vmin and vmax; # However, this padding reduces the dynamic range as we set a broad padding and; # then later discard values that are not needed for the rounding up and down; # of the vmin and vmax on the Colorbar, respectively; vmin = adata.obs[""B_cell_score""].min(); vmax = adata.obs[""B_cell_score""].max(); vpadding = (vmax - vmin) * 0.2; norm = MidpointNormalize(vmin=vmin - vpadding, vmax=vmax + vpadding, midpoint=0); # Plot umap; fig = sc.pl.umap(; adata,; color=""B_cell_score"",; cmap=""coolwarm"",; s=20,; norm=norm,; return_fig=True,; show=False,; ); # Adjust Colorbar ylim to be just outside of vmin,vmax and not far outside of this range; # as the padding we set initially may be too broad; cmap_yticklabels = np.array([t._y for t in fig.axes[1].get_yticklabels()]); fig.axes[1].set_ylim(; max(cmap_yticklabels[cmap_yticklabels < vmin]),; min(cmap_yticklabels[cmap_yticklabels > vmax]),; ). adata.obs.drop(""B_cell_score"", axis=1, inplace=True). Colorblind friendly palettes#; There are dif",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:30605,Availability,down,downloadable,30605," norm = MidpointNormalize(vmin=vmin - vpadding, vmax=vmax + vpadding, midpoint=0); # Plot umap; fig = sc.pl.umap(; adata,; color=""B_cell_score"",; cmap=""coolwarm"",; s=20,; norm=norm,; return_fig=True,; show=False,; ); # Adjust Colorbar ylim to be just outside of vmin,vmax and not far outside of this range; # as the padding we set initially may be too broad; cmap_yticklabels = np.array([t._y for t in fig.axes[1].get_yticklabels()]); fig.axes[1].set_ylim(; max(cmap_yticklabels[cmap_yticklabels < vmin]),; min(cmap_yticklabels[cmap_yticklabels > vmax]),; ). adata.obs.drop(""B_cell_score"", axis=1, inplace=True). Colorblind friendly palettes#; There are different resources that allow creation of colorblind friendly palettes. Example python packages are continous virids palettes and discrete bokeh palettes. Some tools to help you assess whether your palette is color blind friendly include:. Coloring for Colorblindness is a web based tool which can simulate different kinds of color blindness for a discrete palette; Color Oracle a downloadable app which applies a color blindness filter to your screen. UMAP#; This section shows some umap() (and embedding()) specific tips. Coloring cell subset#; Here we show how we can plot all cells as a background and then plot on top indivdual cell groups in color.; We can color-in only specific cell groups when using categorical colors with the groups parameter. ax = sc.pl.umap(adata, color=[""bulk_labels""], groups=[""Dendritic""], show=False). # We can change the 'NA' in the legend that represents all cells outside of the; # specified groups; legend_texts = ax.get_legend().get_texts(); # Find legend object whose text is ""NA"" and change it; for legend_text in legend_texts:; if legend_text.get_text() == ""NA"":; legend_text.set_text(""other cell types""). We can also plot continous values of an individual cell group using the obs_mask key word argument:. sc.pl.umap(adata, color=""IGJ"", mask_obs=(adata.obs.bulk_labels == ""CD19+ B""), size=20). Cell orde",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:8103,Deployability,toggle,toggleswitch,8103,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:9187,Deployability,release,release,9187,py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Customizing Scanpy plots. Contents . Talking to matplotlib; Figure and Axes objects; Using matplotlib Axes to customize plot alignment; Plot size; Adjust space between subplots; Adapt axes appearance. Labels and legends; Customizing legends; Annotating scatter plots. Colors; Discrete palettes; Continous palettes; Colorblind friendly palettes. UMAP; Coloring cell subset; Cell ordering; Optimising UMAP layout. PAGA; Prune PAGA edges; PAGA layout; PAGA layout corresponding to UMAP. Customizing Scanpy plots#; This is an advanced tutorial on customizing scanpy plots. For an introduction to scanpy plotting functions please see the introductory tutorial. import scanpy as sc; import pandas as pd; import numpy as np. import matplotlib.pyplot as plt; import seaborn as sns; import matplotlib.colors as mcolors. # Inital setting for plot size; from matplotlib import rcParams. FIGSIZE =,MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:11652,Deployability,continuous,continuous,11652,"ividual scanpy ploting functions, as they create plots in different ways. Certain functions plot on individual Axes objects while others use the whole Figure, combining multiple Axes to display different parts of a single plot. There are also other differences, such as which types of legends are used (i.e. continous Colorbar or discrete Legend), etc. Figure and Axes objects#; scanpy plotting functions can return Figure or the plot object (by setting return_fig=True) or Axes (by setting show=False).; The show parameter also regulates when the plot is rendered. If we want to customize Axes after the scanpy plotting function was called we need to set show=False to ensure that the plot will be rendered only after we made all adjustments.; For example, from embedding plots (such as umap) we can obtain either axes (by setting show=False) or the whole figure (by setting return_fig=True) that stores axes in figure.axes. For every plotted category one Axes object will be created and for every continuous category two Axes objects: the UMAP plot and colorbar on the side. However, if we want to obtain the colorbar axes object we need to use return_fig=True rather than show=False. When accessing Axes from Figure the returned object is a list and we need to select the relevant Axes to modify them. When returning Axes directly (e.g. with show=False) we obtain either an individual Axes object (if this is the only Axes object on the Figure) or a list of Axes (if multiple Axes were created). # Examples of returned objects from the UMAP function. print(""Categorical plots:""); axes = sc.pl.umap(adata, color=[""bulk_labels""], show=False); print(""Axis from a single category plot:"", axes); plt.close(); axes = sc.pl.umap(adata, color=[""bulk_labels"", ""S_score""], show=False); print(""Axes list from two categorical plots:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); print(""Axes list from a figure with one categorical plot:"", fig.axes); plt.close(). print(",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:12751,Deployability,continuous,continuous,12751,"er, if we want to obtain the colorbar axes object we need to use return_fig=True rather than show=False. When accessing Axes from Figure the returned object is a list and we need to select the relevant Axes to modify them. When returning Axes directly (e.g. with show=False) we obtain either an individual Axes object (if this is the only Axes object on the Figure) or a list of Axes (if multiple Axes were created). # Examples of returned objects from the UMAP function. print(""Categorical plots:""); axes = sc.pl.umap(adata, color=[""bulk_labels""], show=False); print(""Axis from a single category plot:"", axes); plt.close(); axes = sc.pl.umap(adata, color=[""bulk_labels"", ""S_score""], show=False); print(""Axes list from two categorical plots:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); print(""Axes list from a figure with one categorical plot:"", fig.axes); plt.close(). print(""\nContinous plots:""); axes = sc.pl.umap(adata, color=[""IGJ""], show=False); print(""Axes from one continuous plot:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""IGJ""], return_fig=True); print(""Axes list from a figure of one continous plot:"", fig.axes); plt.close(). Categorical plots:; Axis from a single category plot: Axes(0.125,0.11;0.775x0.77); Axes list from two categorical plots: [<Axes: title={'center': 'bulk_labels'}, xlabel='UMAP1', ylabel='UMAP2'>, <Axes: title={'center': 'S_score'}, xlabel='UMAP1', ylabel='UMAP2'>]; Axes list from a figure with one categorical plot: [<Axes: title={'center': 'bulk_labels'}, xlabel='UMAP1', ylabel='UMAP2'>]. Continous plots:; Axes from one continuous plot: Axes(0.125,0.11;0.70525x0.77); Axes list from a figure of one continous plot: [<Axes: title={'center': 'IGJ'}, xlabel='UMAP1', ylabel='UMAP2'>, <Axes: label='<colorbar>'>]. Certain plots (e.g. dotplot) are more complex, having a special plot object with multiple Axes that are used to plot different parts of the plot. axes = sc.pl.dotplot(adata, [""CD79A"", ""MS4A1""], ""b",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:13350,Deployability,continuous,continuous,13350,"; plt.close(); axes = sc.pl.umap(adata, color=[""bulk_labels"", ""S_score""], show=False); print(""Axes list from two categorical plots:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); print(""Axes list from a figure with one categorical plot:"", fig.axes); plt.close(). print(""\nContinous plots:""); axes = sc.pl.umap(adata, color=[""IGJ""], show=False); print(""Axes from one continuous plot:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""IGJ""], return_fig=True); print(""Axes list from a figure of one continous plot:"", fig.axes); plt.close(). Categorical plots:; Axis from a single category plot: Axes(0.125,0.11;0.775x0.77); Axes list from two categorical plots: [<Axes: title={'center': 'bulk_labels'}, xlabel='UMAP1', ylabel='UMAP2'>, <Axes: title={'center': 'S_score'}, xlabel='UMAP1', ylabel='UMAP2'>]; Axes list from a figure with one categorical plot: [<Axes: title={'center': 'bulk_labels'}, xlabel='UMAP1', ylabel='UMAP2'>]. Continous plots:; Axes from one continuous plot: Axes(0.125,0.11;0.70525x0.77); Axes list from a figure of one continous plot: [<Axes: title={'center': 'IGJ'}, xlabel='UMAP1', ylabel='UMAP2'>, <Axes: label='<colorbar>'>]. Certain plots (e.g. dotplot) are more complex, having a special plot object with multiple Axes that are used to plot different parts of the plot. axes = sc.pl.dotplot(adata, [""CD79A"", ""MS4A1""], ""bulk_labels"", show=False); print(""Axes returned from dotplot object:"", axes); dp = sc.pl.dotplot(adata, [""CD79A"", ""MS4A1""], ""bulk_labels"", return_fig=True); print(""DotPlot object:"", dp); plt.close(). Axes returned from dotplot object: {'mainplot_ax': <Axes: >, 'size_legend_ax': <Axes: title={'center': 'Fraction of cells\nin group (%)'}>, 'color_legend_ax': <Axes: title={'center': 'Mean expression\nin group'}>}; DotPlot object: <scanpy.plotting._dotplot.DotPlot object at 0x7f4cb17b4850>. Using matplotlib Axes to customize plot alignment#; When combining multiple different plots one can pass pre-defined ma",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:28171,Energy Efficiency,adapt,adapted,28171,"d 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.midpoint - self.vmin))),; ); normalized_mid = 0.5; x, y = (; [self.vmin, self.midpoint, self.vmax],; [normalized_min, normalized_mid, normalized_max],; ); return np.ma.masked_array(np.interp(value, x, y)). # Add padding arround vmin and vmax as Colorbar sets value limits to round numbers below and; # above the vmin and vmax, respectively, which means that they can not be assigned the correct; # color with our nomalisation function t",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:29269,Energy Efficiency,reduce,reduces,29269,"of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.midpoint - self.vmin))),; ); normalized_mid = 0.5; x, y = (; [self.vmin, self.midpoint, self.vmax],; [normalized_min, normalized_mid, normalized_max],; ); return np.ma.masked_array(np.interp(value, x, y)). # Add padding arround vmin and vmax as Colorbar sets value limits to round numbers below and; # above the vmin and vmax, respectively, which means that they can not be assigned the correct; # color with our nomalisation function that is limited to vmin and vmax; # However, this padding reduces the dynamic range as we set a broad padding and; # then later discard values that are not needed for the rounding up and down; # of the vmin and vmax on the Colorbar, respectively; vmin = adata.obs[""B_cell_score""].min(); vmax = adata.obs[""B_cell_score""].max(); vpadding = (vmax - vmin) * 0.2; norm = MidpointNormalize(vmin=vmin - vpadding, vmax=vmax + vpadding, midpoint=0); # Plot umap; fig = sc.pl.umap(; adata,; color=""B_cell_score"",; cmap=""coolwarm"",; s=20,; norm=norm,; return_fig=True,; show=False,; ); # Adjust Colorbar ylim to be just outside of vmin,vmax and not far outside of this range; # as the padding we set initially may be too broad; cmap_yticklabels = np.array([t._y for t in fig.axes[1].get_yticklabels()]); fig.axes[1].set_ylim(; max(cmap_yticklabels[cmap_yticklabels < vmin]),; min(cmap_yticklabels[cmap_yticklabels > vmax]),; ). adata.obs.drop(""B_cell_score"", axis=1, inplace=True). Colorblind friendly palettes#; There are dif",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:17501,Integrability,wrap,wraps,17501,"x = axs[row_idx, col_idx]; sc.pl.umap(adata, color=marker, ax=ax, show=False, frameon=False, s=20); # Add cell type as row label - here we simply add it as ylabel of; # the first Axes object in the row; if col_idx == 0:; # We disabled axis drawing in UMAP to have plots without background and border; # so we need to re-enable axis to plot the ylabel; ax.axis(""on""); ax.tick_params(; top=""off"",; bottom=""off"",; left=""off"",; right=""off"",; labelleft=""on"",; labelbottom=""off"",; ); ax.set_ylabel(cell_type + ""\n"", rotation=90, fontsize=14); ax.set(frame_on=False); col_idx += 1; # Remove unused column Axes in the current row; while col_idx < ncol:; axs[row_idx, col_idx].remove(); col_idx += 1; # Alignment within the Figure; fig.tight_layout(). Plot size#; There are multiple options for adjusting plot size, as shown below.; We can adjust plot size by setting rcParams['figure.figsize'], which will also change settings for future plots.; These are either available through scanpyâs set_figure_params which wraps Matplotlibâs rcParams or by modifying them directly. rcParams[""figure.figsize""] = (2, 2); sc.pl.umap(adata, color=""bulk_labels""); # Set back to value selected above; rcParams[""figure.figsize""] = FIGSIZE. We can set rcParams for a single plot with a context manager which wonât change the setting for future plots. with plt.rc_context({""figure.figsize"": (5, 5)}):; sc.pl.umap(adata, color=""bulk_labels""). We can also create an Axes object with a predefined size and pass it to a scanpy plotting function. fig, ax = plt.subplots(figsize=(4, 4)); sc.pl.umap(adata, color=""bulk_labels"", ax=ax). The figsize is divided between all Axes and spaces between them. Thus, if we have multiple Axes (columns or rows) we must accordingly increase figsize.; However, if we do not pass Axes objects to the scanpy embedding function it will automatically create individual Axes with the size of the current global figsize (as specified by e.g. matplotlib figure.figsize). ncol = 2; nrow = 1; figsize = 3;",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:28171,Modifiability,adapt,adapted,28171,"d 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.midpoint - self.vmin))),; ); normalized_mid = 0.5; x, y = (; [self.vmin, self.midpoint, self.vmax],; [normalized_min, normalized_mid, normalized_max],; ); return np.ma.masked_array(np.interp(value, x, y)). # Add padding arround vmin and vmax as Colorbar sets value limits to round numbers below and; # above the vmin and vmax, respectively, which means that they can not be assigned the correct; # color with our nomalisation function t",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:7179,Performance,cache,cachedir,7179,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:8420,Security,hash,hashsolo,8420,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Customizing Scanpy plots. Contents . Talking to matplotlib; Figure and Axes objects; Using matplotlib Axes to customize plot alignment; Plot size; Adjust space between subplots; Adapt axes appe,MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:11845,Security,access,accessing,11845,"her differences, such as which types of legends are used (i.e. continous Colorbar or discrete Legend), etc. Figure and Axes objects#; scanpy plotting functions can return Figure or the plot object (by setting return_fig=True) or Axes (by setting show=False).; The show parameter also regulates when the plot is rendered. If we want to customize Axes after the scanpy plotting function was called we need to set show=False to ensure that the plot will be rendered only after we made all adjustments.; For example, from embedding plots (such as umap) we can obtain either axes (by setting show=False) or the whole figure (by setting return_fig=True) that stores axes in figure.axes. For every plotted category one Axes object will be created and for every continuous category two Axes objects: the UMAP plot and colorbar on the side. However, if we want to obtain the colorbar axes object we need to use return_fig=True rather than show=False. When accessing Axes from Figure the returned object is a list and we need to select the relevant Axes to modify them. When returning Axes directly (e.g. with show=False) we obtain either an individual Axes object (if this is the only Axes object on the Figure) or a list of Axes (if multiple Axes were created). # Examples of returned objects from the UMAP function. print(""Categorical plots:""); axes = sc.pl.umap(adata, color=[""bulk_labels""], show=False); print(""Axis from a single category plot:"", axes); plt.close(); axes = sc.pl.umap(adata, color=[""bulk_labels"", ""S_score""], show=False); print(""Axes list from two categorical plots:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); print(""Axes list from a figure with one categorical plot:"", fig.axes); plt.close(). print(""\nContinous plots:""); axes = sc.pl.umap(adata, color=[""IGJ""], show=False); print(""Axes from one continuous plot:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""IGJ""], return_fig=True); print(""Axes list from a figure of one continous plo",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:7447,Testability,log,logfile,7447,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:7486,Testability,log,logpath,7486,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:7792,Testability,log,logging,7792,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:7821,Testability,log,logging,7821, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:26649,Testability,mock,mock,26649,"mendations on color palettes. Discrete palettes#; We can define colors for individual categories in scanpy with a dictionary. sc.pl.umap(; adata,; color=""phase"",; s=20,; palette={""S"": ""tab:cyan"", ""G1"": ""tab:olive"", ""G2M"": ""tab:red""},; ). While matplotlib offers various discrete palettes, it may be hard to find large palettes where colors can be easily distinguished. Tools such as glasbey enable creation of large discrete palettes where colors can be visually well distinguished. It also supports hierarchical palettes. Continous palettes#; For non-centered values we recommend virids palettes as they are perceptually uniform and colorblind friendly. For centered values we recommend diverging palettes, where the center of the palette should be set to match the center value (e.g. 0).; We can center a diverging palette in scanpy with vcenter. Alternatively, we can use vmin and vmax to make the palette symmetric. # Center palette with vcenter. # Make mock column for plotting, here we use random values from normal distribution; loc = 0; adata.obs[""normal""] = np.random.normal(loc=loc, size=adata.shape[0]). # Center at mean (loc) of the distribution with vcenter parameter; sc.pl.umap(adata, color=""normal"", cmap=""coolwarm"", s=20, vcenter=loc); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:27044,Testability,mock,mock,27044,"uch as glasbey enable creation of large discrete palettes where colors can be visually well distinguished. It also supports hierarchical palettes. Continous palettes#; For non-centered values we recommend virids palettes as they are perceptually uniform and colorblind friendly. For centered values we recommend diverging palettes, where the center of the palette should be set to match the center value (e.g. 0).; We can center a diverging palette in scanpy with vcenter. Alternatively, we can use vmin and vmax to make the palette symmetric. # Center palette with vcenter. # Make mock column for plotting, here we use random values from normal distribution; loc = 0; adata.obs[""normal""] = np.random.normal(loc=loc, size=adata.shape[0]). # Center at mean (loc) of the distribution with vcenter parameter; sc.pl.umap(adata, color=""normal"", cmap=""coolwarm"", s=20, vcenter=loc); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_g",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:27559,Testability,log,log,27559,"etric. # Center palette with vcenter. # Make mock column for plotting, here we use random values from normal distribution; loc = 0; adata.obs[""normal""] = np.random.normal(loc=loc, size=adata.shape[0]). # Center at mean (loc) of the distribution with vcenter parameter; sc.pl.umap(adata, color=""normal"", cmap=""coolwarm"", s=20, vcenter=loc); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:27681,Testability,mock,mock,27681," normal distribution; loc = 0; adata.obs[""normal""] = np.random.normal(loc=loc, size=adata.shape[0]). # Center at mean (loc) of the distribution with vcenter parameter; sc.pl.umap(adata, color=""normal"", cmap=""coolwarm"", s=20, vcenter=loc); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_ma",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:27698,Testability,log,log-normally,27698," normal distribution; loc = 0; adata.obs[""normal""] = np.random.normal(loc=loc, size=adata.shape[0]). # Center at mean (loc) of the distribution with vcenter parameter; sc.pl.umap(adata, color=""normal"", cmap=""coolwarm"", s=20, vcenter=loc); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_ma",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:27743,Testability,log,lognormal,27743,"rmal""] = np.random.normal(loc=loc, size=adata.shape[0]). # Center at mean (loc) of the distribution with vcenter parameter; sc.pl.umap(adata, color=""normal"", cmap=""coolwarm"", s=20, vcenter=loc); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vma",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:27767,Testability,log,lognormal,27767,"=loc, size=adata.shape[0]). # Center at mean (loc) of the distribution with vcenter parameter; sc.pl.umap(adata, color=""normal"", cmap=""coolwarm"", s=20, vcenter=loc); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.mi",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:27881,Testability,log,lognormal,27881,"ata, color=""normal"", cmap=""coolwarm"", s=20, vcenter=loc); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.midpoint - self.vmin))),; ); normalized_mid = 0.5; x, y = (; [self.vmin, self.midpoint, self.vmax],; [normaliz",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:27927,Testability,log,lognormal,27927,"); adata.obs.drop(""normal"", axis=1, inplace=True). # Make symmetric palette with vmin and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.midpoint - self.vmin))),; ); normalized_mid = 0.5; x, y = (; [self.vmin, self.midpoint, self.vmax],; [normalized_min, normalized_mid, normalized_max],; ); return np.",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:28003,Testability,mock,mock,28003," and vmax. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # To make a symmetric palette centerd around 0 we set vmax to maximal absolut value and vmin to; # the negative value of maxabs; maxabs = max(abs(adata.obs[""B_cell_score""])); sc.pl.umap(; adata, color=""B_cell_score"", cmap=""coolwarm"", s=20, vmin=-maxabs, vmax=maxabs; ); adata.obs.drop(""B_cell_score"", axis=1, inplace=True). matplotlib also supports custom color palettes with scaling (e.g. log), value range normalisation, centering, and custom color combinations or dynamic ranges. # Log-scaled palette. # Make mock column with log-normally distirbuited values; adata.obs[""lognormal""] = np.random.lognormal(3, 1, adata.shape[0]). # Log scaling of the palette; norm = mcolors.LogNorm(); sc.pl.umap(adata, color=""lognormal"", s=20, norm=norm). adata.obs.drop(""lognormal"", axis=1, inplace=True). # Centered non-symmetric palette. # Make mock column for plotting, here we use B cell score; sc.tl.score_genes(adata, [""CD79A"", ""MS4A1""], score_name=""B_cell_score""). # Palette normalization with centering and adapted dynamic range to correspond to; # the distance of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.midpoint - self.vmin))),; ); normalized_mid = 0.5; x, y = (; [self.vmin, self.midpoint, self.vmax],; [normalized_min, normalized_mid, normalized_max],; ); return np.ma.masked_array(np.interp(value, x, y)). # Add padding arround vmin and vmax as Colorb",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:16634,Usability,simpl,simply,16634,"example we want to show UMAPs of different cell type markers,; # with markers of a single cell type in one row; # and with a different number of markers per cell type (row). # Marker genes; marker_genes = {; ""B-cell"": [""CD79A"", ""MS4A1""],; ""Dendritic"": [""FCER1A"", ""CST3""],; ""Monocytes"": [""FCGR3A""],; ""NK"": [""GNLY"", ""NKG7""],; ""Other"": [""IGLL1""],; ""Plasma"": [""IGJ""],; ""T-cell"": [""CD3D""],; }; # Make Axes; # Number of needed rows and columns (based on the row with the most columns); nrow = len(marker_genes); ncol = max([len(vs) for vs in marker_genes.values()]); fig, axs = plt.subplots(nrow, ncol, figsize=(2 * ncol, 2 * nrow)); # Plot expression for every marker on the corresponding Axes object; for row_idx, (cell_type, markers) in enumerate(marker_genes.items()):; col_idx = 0; for marker in markers:; ax = axs[row_idx, col_idx]; sc.pl.umap(adata, color=marker, ax=ax, show=False, frameon=False, s=20); # Add cell type as row label - here we simply add it as ylabel of; # the first Axes object in the row; if col_idx == 0:; # We disabled axis drawing in UMAP to have plots without background and border; # so we need to re-enable axis to plot the ylabel; ax.axis(""on""); ax.tick_params(; top=""off"",; bottom=""off"",; left=""off"",; right=""off"",; labelleft=""on"",; labelbottom=""off"",; ); ax.set_ylabel(cell_type + ""\n"", rotation=90, fontsize=14); ax.set(frame_on=False); col_idx += 1; # Remove unused column Axes in the current row; while col_idx < ncol:; axs[row_idx, col_idx].remove(); col_idx += 1; # Alignment within the Figure; fig.tight_layout(). Plot size#; There are multiple options for adjusting plot size, as shown below.; We can adjust plot size by setting rcParams['figure.figsize'], which will also change settings for future plots.; These are either available through scanpyâs set_figure_params which wraps Matplotlibâs rcParams or by modifying them directly. rcParams[""figure.figsize""] = (2, 2); sc.pl.umap(adata, color=""bulk_labels""); # Set back to value selected above; rcParams[""figure",MatchSource.WIKI,en/stable/tutorials/plotting/advanced.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:10788,Availability,avail,available,10788,"r genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram options; Plot correlation. Core plotting functions#; Author: Fidel RamÃ­rez; This tutorial explores the visualization possibilities of scanpy and is divided into three sections:. Scatter plots for embeddings (eg. UMAP, t-SNE); Identification of clusters using known marker genes; Visualization of differentially expressed genes. In this tutorial, we will use a dataset from 10x containing 68k cells from PBMC. Scanpy, includes in its distribution a reduced sample of this dataset consisting of only 700 cells and 765 highly variable genes. This dataset has been already preprocessed and UMAP computed.; In this tutorial, we will also use the following literature markers:. B-cell: CD79A, MS4A1; Plasma: IGJ (JCHAIN); T-cell: CD3D; NK: GNLY, NKG7; Myeloid: CST3, LYZ; Monocytes: FCGR3A; Dendritic: FCER1A. Scatter plots for embeddings#; With scanpy, scatter plots for tSNE, UMAP and several other embeddings are readily available using the sc.pl.tsne, sc.pl.umap etc. functions. See here the list of options.; Those functions access the data stored in adata.obsm. For example sc.pl.umap uses the information stored in adata.obsm['X_umap']. For more flexibility, any key stored in adata.obsm can be used with the generic function sc.pl.embedding. import scanpy as sc; from matplotlib.pyplot import rc_context. sc.set_figure_params(dpi=100, color_map=""viridis_r""); sc.settings.verbosity = 0; sc.logging.print_header(). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Load pbmc dataset#. pbmc = sc.datasets.pbmc68k_reduced(). # inspect pbmc contents; pbmc. AnnData object with n_obs Ã n_vars = 700 Ã 765; obs: 'bulk_labels', 'n_genes', 'percent_mito', 'n_counts', 'S_score', 'G2M_score', 'phase', 'louvain'; var: 'n_count",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:21804,Availability,avail,available,21804,"otplot#; The dotplot visualization is useful to get an overview of the genes that show differential expression. To make the resulting image more compact we will use n_genes=4 to show only the top 4 scoring genes. sc.pl.rank_genes_groups_dotplot(pbmc, n_genes=4). In order to get a better representation we can plot log fold changes instead of gene expression. Also, we want to focus on genes that have a log fold change >= 3 between the cell type expression and the rest of cells.; In this case we set values_to_plot='logfoldchanges' and min_logfoldchange=3.; Because log fold change is a divergent scale we also adjust the min and max to be plotted and use a divergent color map. Notice in the following plot that is rather difficult to distinguish between T-cell populations. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=4,; values_to_plot=""logfoldchanges"",; min_logfoldchange=3,; vmax=7,; vmin=-7,; cmap=""bwr"",; ). Focusing on particular groups#; Next, we use a dotplot focusing only on two groups (the groups option is also available for violin, heatmap and matrix plots). Here, we set n_genes=30 as in this case it will show all the genes that have a min_logfoldchange=4 up to 30. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=30,; values_to_plot=""logfoldchanges"",; min_logfoldchange=4,; vmax=7,; vmin=-7,; cmap=""bwr"",; groups=[""3"", ""7""],; ). Visualize marker genes using matrixplot#; For the following plot the we use the previously computed âscaledâ values (stored in layer scaled) and use a divergent color map. sc.pl.rank_genes_groups_matrixplot(; pbmc, n_genes=3, use_raw=False, vmin=-3, vmax=3, cmap=""bwr"", layer=""scaled""; ). Visualize marker genes using stacked violin plots#. sc.pl.rank_genes_groups_stacked_violin(pbmc, n_genes=3, cmap=""viridis_r""). Visualize marker genes using heatmap#. sc.pl.rank_genes_groups_heatmap(; pbmc,; n_genes=3,; use_raw=False,; swap_axes=True,; vmin=-3,; vmax=3,; cmap=""bwr"",; layer=""scaled"",; figsize=(10, 7),; show=False,; );. Showing 10 genes per ",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:23704,Availability,avail,available,23704,"rue,; vmin=-3,; vmax=3,; cmap=""bwr"",; layer=""scaled"",; figsize=(10, 7),; show=False,; );. Showing 10 genes per category, turning the gene labels off and swapping the axes. Notice that when the image is swapped, a color code for the categories appear instead of the âbracketsâ. sc.pl.rank_genes_groups_heatmap(; pbmc,; n_genes=10,; use_raw=False,; swap_axes=True,; show_gene_labels=False,; vmin=-3,; vmax=3,; cmap=""bwr"",; ). Visualize marker genes using tracksplot#. sc.pl.rank_genes_groups_tracksplot(pbmc, n_genes=3). Comparison of marker genes using split violin plots#; In scanpy, is very easy to compare marker genes using split violin plots for all groups at once. with rc_context({""figure.figsize"": (9, 1.5)}):; sc.pl.rank_genes_groups_violin(pbmc, n_genes=20, jitter=False). Dendrogram options#; Most of the visualizations can arrange the categories using a dendrogram. However, the dendrogram can also be plotted independently as follows:. # compute hierarchical clustering using PCs (several distance metrics and linkage methods are available).; sc.tl.dendrogram(pbmc, ""bulk_labels""). ax = sc.pl.dendrogram(pbmc, ""bulk_labels""). Plot correlation#; Together with the dendrogram it is possible to plot the correlation (by default âpearsonâ) of the categories. ax = sc.pl.correlation_matrix(pbmc, ""bulk_labels"", figsize=(5, 3.5)). previous; Plotting. next; Customizing Scanpy plots. Contents; . Scatter plots for embeddings; Load pbmc dataset; Visualization of gene expression and other variables. Identification of clusters based on known marker genes; dotplot; violin plot; stacked-violin plot; matrixplot. Combining plots in subplots; Heatmaps; Tracksplot; Visualization of marker genes; Visualize marker genes using dotplot; Focusing on particular groups. Visualize marker genes using matrixplot; Visualize marker genes using stacked violin plots; Visualize marker genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:8101,Deployability,toggle,toggleswitch,8101,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:9185,Deployability,release,release,9185,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Core plotting functions. Contents . Scatter plots for embeddings; Load pbmc dataset; Visualization of gene expression and other variables. Identification of clusters based on known marker genes; dotplot; violin plot; stacked-violin plot; matrixplot. Combining plots in subplots; Heatmaps; Tracksplot; Visualization of marker genes; Visualize marker genes using dotplot; Focusing on particular groups. Visualize marker genes using matrixplot; Visualize marker genes using stacked violin plots; Visualize marker genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram options; Plot correlation. Core plotting functions#; Author: Fidel RamÃ­rez; This tutorial explores the visualization possibilities of scanpy and is divided into three sections:. Scatter plots for embeddings (eg. UMAP, t-SNE); Identification of clust",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:10318,Energy Efficiency,reduce,reduced,10318,"pression and other variables. Identification of clusters based on known marker genes; dotplot; violin plot; stacked-violin plot; matrixplot. Combining plots in subplots; Heatmaps; Tracksplot; Visualization of marker genes; Visualize marker genes using dotplot; Focusing on particular groups. Visualize marker genes using matrixplot; Visualize marker genes using stacked violin plots; Visualize marker genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram options; Plot correlation. Core plotting functions#; Author: Fidel RamÃ­rez; This tutorial explores the visualization possibilities of scanpy and is divided into three sections:. Scatter plots for embeddings (eg. UMAP, t-SNE); Identification of clusters using known marker genes; Visualization of differentially expressed genes. In this tutorial, we will use a dataset from 10x containing 68k cells from PBMC. Scanpy, includes in its distribution a reduced sample of this dataset consisting of only 700 cells and 765 highly variable genes. This dataset has been already preprocessed and UMAP computed.; In this tutorial, we will also use the following literature markers:. B-cell: CD79A, MS4A1; Plasma: IGJ (JCHAIN); T-cell: CD3D; NK: GNLY, NKG7; Myeloid: CST3, LYZ; Monocytes: FCGR3A; Dendritic: FCER1A. Scatter plots for embeddings#; With scanpy, scatter plots for tSNE, UMAP and several other embeddings are readily available using the sc.pl.tsne, sc.pl.umap etc. functions. See here the list of options.; Those functions access the data stored in adata.obsm. For example sc.pl.umap uses the information stored in adata.obsm['X_umap']. For more flexibility, any key stored in adata.obsm can be used with the generic function sc.pl.embedding. import scanpy as sc; from matplotlib.pyplot import rc_context. sc.set_figure_params(dpi=100, color_map=""viridis_r""); sc.settings.verbosity = 0; sc.logging.print_header(). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:9362,Modifiability,variab,variables,9362,"grate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Core plotting functions. Contents . Scatter plots for embeddings; Load pbmc dataset; Visualization of gene expression and other variables. Identification of clusters based on known marker genes; dotplot; violin plot; stacked-violin plot; matrixplot. Combining plots in subplots; Heatmaps; Tracksplot; Visualization of marker genes; Visualize marker genes using dotplot; Focusing on particular groups. Visualize marker genes using matrixplot; Visualize marker genes using stacked violin plots; Visualize marker genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram options; Plot correlation. Core plotting functions#; Author: Fidel RamÃ­rez; This tutorial explores the visualization possibilities of scanpy and is divided into three sections:. Scatter plots for embeddings (eg. UMAP, t-SNE); Identification of clusters using known marker genes; Visualization of differentially expressed genes. In this tutorial, we will use a dataset from 10x containing 68k cells from PBMC. Scanpy, includes in its distribution a red",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:10393,Modifiability,variab,variable,10393,"pression and other variables. Identification of clusters based on known marker genes; dotplot; violin plot; stacked-violin plot; matrixplot. Combining plots in subplots; Heatmaps; Tracksplot; Visualization of marker genes; Visualize marker genes using dotplot; Focusing on particular groups. Visualize marker genes using matrixplot; Visualize marker genes using stacked violin plots; Visualize marker genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram options; Plot correlation. Core plotting functions#; Author: Fidel RamÃ­rez; This tutorial explores the visualization possibilities of scanpy and is divided into three sections:. Scatter plots for embeddings (eg. UMAP, t-SNE); Identification of clusters using known marker genes; Visualization of differentially expressed genes. In this tutorial, we will use a dataset from 10x containing 68k cells from PBMC. Scanpy, includes in its distribution a reduced sample of this dataset consisting of only 700 cells and 765 highly variable genes. This dataset has been already preprocessed and UMAP computed.; In this tutorial, we will also use the following literature markers:. B-cell: CD79A, MS4A1; Plasma: IGJ (JCHAIN); T-cell: CD3D; NK: GNLY, NKG7; Myeloid: CST3, LYZ; Monocytes: FCGR3A; Dendritic: FCER1A. Scatter plots for embeddings#; With scanpy, scatter plots for tSNE, UMAP and several other embeddings are readily available using the sc.pl.tsne, sc.pl.umap etc. functions. See here the list of options.; Those functions access the data stored in adata.obsm. For example sc.pl.umap uses the information stored in adata.obsm['X_umap']. For more flexibility, any key stored in adata.obsm can be used with the generic function sc.pl.embedding. import scanpy as sc; from matplotlib.pyplot import rc_context. sc.set_figure_params(dpi=100, color_map=""viridis_r""); sc.settings.verbosity = 0; sc.logging.print_header(). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:12024,Modifiability,variab,variables,12024," in adata.obsm can be used with the generic function sc.pl.embedding. import scanpy as sc; from matplotlib.pyplot import rc_context. sc.set_figure_params(dpi=100, color_map=""viridis_r""); sc.settings.verbosity = 0; sc.logging.print_header(). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Load pbmc dataset#. pbmc = sc.datasets.pbmc68k_reduced(). # inspect pbmc contents; pbmc. AnnData object with n_obs Ã n_vars = 700 Ã 765; obs: 'bulk_labels', 'n_genes', 'percent_mito', 'n_counts', 'S_score', 'G2M_score', 'phase', 'louvain'; var: 'n_counts', 'means', 'dispersions', 'dispersions_norm', 'highly_variable'; uns: 'bulk_labels_colors', 'louvain', 'louvain_colors', 'neighbors', 'pca', 'rank_genes_groups'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'distances', 'connectivities'. Visualization of gene expression and other variables#; For the scatter plots, the value to plot is given as the color argument. This can be any gene or any column in .obs, where .obs is a DataFrame containing the annotations per observation/cell, see AnnData for more information. # rc_context is used for the figure size, in this case 4x4; with rc_context({""figure.figsize"": (4, 4)}):; sc.pl.umap(pbmc, color=""CD79A""). Multiple values can be given to color. In the following example we will plot 6 genes: âCD79Aâ, âMS4A1â, âIGJâ, CD3Dâ, âFCER1Aâ, and âFCGR3Aâ to get an idea on where those marker genes are being expressed.; Also, we will plot two other values: n_counts which is the number of UMI counts per cell (stored in .obs), and bulk_labels which is a categorical value containing the original labelling of the cells from 10X.; The number of plots per row is controlled using the ncols parameter. The maximum value plotted can be adjusted using vmax (similarly vmin can be used for the minimum value). In this case we use p99, which means to use as max va",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:18435,Modifiability,layers,layers,18435,"iolin. As previously, a dendrogram was added to group similar clusters. ax = sc.pl.stacked_violin(; pbmc, marker_genes_dict, groupby=""clusters"", swap_axes=False, dendrogram=True; ). matrixplot#; A simple way to visualize the expression of genes is with a matrix plot. This is a heatmap of the mean expression values per gene grouped by categories. This type plot basically shows the same information as the color in the dotplots.; Here, scale the expression of the genes from 0 to 1, being the maximum mean expression and 0 the minimum. sc.pl.matrixplot(; pbmc,; marker_genes_dict,; ""clusters"",; dendrogram=True,; cmap=""Blues"",; standard_scale=""var"",; colorbar_title=""column scaled\nexpression"",; ). Other useful option is to normalize the gene expression using sc.pp.scale. Here we store this information under the scale layer. Afterwards we adjust the plot min and max and use a diverging color map (in this case RdBu_r where _r means reversed). # scale and store results in layer; pbmc.layers[""scaled""] = sc.pp.scale(pbmc, copy=True).X. sc.pl.matrixplot(; pbmc,; marker_genes_dict,; ""clusters"",; dendrogram=True,; colorbar_title=""mean z-score"",; layer=""scaled"",; vmin=-2,; vmax=2,; cmap=""RdBu_r"",; ). Combining plots in subplots#; An axis can be passed to a plot to combine multiple outputs as in the following example. import matplotlib.pyplot as plt. fig, (ax1, ax2, ax3) = plt.subplots(1, 3, figsize=(20, 4), gridspec_kw={""wspace"": 0.9}). ax1_dict = sc.pl.dotplot(; pbmc, marker_genes_dict, groupby=""bulk_labels"", ax=ax1, show=False; ); ax2_dict = sc.pl.stacked_violin(; pbmc, marker_genes_dict, groupby=""bulk_labels"", ax=ax2, show=False; ); ax3_dict = sc.pl.matrixplot(; pbmc, marker_genes_dict, groupby=""bulk_labels"", ax=ax3, show=False, cmap=""viridis""; ). Heatmaps#; Heatmaps do not collapse cells as in previous plots. Instead, each cells is shown in a row (or column if swap_axes=True). The groupby information can be added and is shown using the same color code found for sc.pl.umap or an",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:24155,Modifiability,variab,variables,24155,"er category, turning the gene labels off and swapping the axes. Notice that when the image is swapped, a color code for the categories appear instead of the âbracketsâ. sc.pl.rank_genes_groups_heatmap(; pbmc,; n_genes=10,; use_raw=False,; swap_axes=True,; show_gene_labels=False,; vmin=-3,; vmax=3,; cmap=""bwr"",; ). Visualize marker genes using tracksplot#. sc.pl.rank_genes_groups_tracksplot(pbmc, n_genes=3). Comparison of marker genes using split violin plots#; In scanpy, is very easy to compare marker genes using split violin plots for all groups at once. with rc_context({""figure.figsize"": (9, 1.5)}):; sc.pl.rank_genes_groups_violin(pbmc, n_genes=20, jitter=False). Dendrogram options#; Most of the visualizations can arrange the categories using a dendrogram. However, the dendrogram can also be plotted independently as follows:. # compute hierarchical clustering using PCs (several distance metrics and linkage methods are available).; sc.tl.dendrogram(pbmc, ""bulk_labels""). ax = sc.pl.dendrogram(pbmc, ""bulk_labels""). Plot correlation#; Together with the dendrogram it is possible to plot the correlation (by default âpearsonâ) of the categories. ax = sc.pl.correlation_matrix(pbmc, ""bulk_labels"", figsize=(5, 3.5)). previous; Plotting. next; Customizing Scanpy plots. Contents; . Scatter plots for embeddings; Load pbmc dataset; Visualization of gene expression and other variables. Identification of clusters based on known marker genes; dotplot; violin plot; stacked-violin plot; matrixplot. Combining plots in subplots; Heatmaps; Tracksplot; Visualization of marker genes; Visualize marker genes using dotplot; Focusing on particular groups. Visualize marker genes using matrixplot; Visualize marker genes using stacked violin plots; Visualize marker genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram options; Plot correlation. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:7177,Performance,cache,cachedir,7177,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:8418,Security,hash,hashsolo,8418,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Core plotting functions. Contents . Scatter plots for embeddings; Load pbmc dataset; Visualization of gene expression and other variables. Identification of clusters based on known marker genes,MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:10894,Security,access,access,10894," plotting functions#; Author: Fidel RamÃ­rez; This tutorial explores the visualization possibilities of scanpy and is divided into three sections:. Scatter plots for embeddings (eg. UMAP, t-SNE); Identification of clusters using known marker genes; Visualization of differentially expressed genes. In this tutorial, we will use a dataset from 10x containing 68k cells from PBMC. Scanpy, includes in its distribution a reduced sample of this dataset consisting of only 700 cells and 765 highly variable genes. This dataset has been already preprocessed and UMAP computed.; In this tutorial, we will also use the following literature markers:. B-cell: CD79A, MS4A1; Plasma: IGJ (JCHAIN); T-cell: CD3D; NK: GNLY, NKG7; Myeloid: CST3, LYZ; Monocytes: FCGR3A; Dendritic: FCER1A. Scatter plots for embeddings#; With scanpy, scatter plots for tSNE, UMAP and several other embeddings are readily available using the sc.pl.tsne, sc.pl.umap etc. functions. See here the list of options.; Those functions access the data stored in adata.obsm. For example sc.pl.umap uses the information stored in adata.obsm['X_umap']. For more flexibility, any key stored in adata.obsm can be used with the generic function sc.pl.embedding. import scanpy as sc; from matplotlib.pyplot import rc_context. sc.set_figure_params(dpi=100, color_map=""viridis_r""); sc.settings.verbosity = 0; sc.logging.print_header(). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Load pbmc dataset#. pbmc = sc.datasets.pbmc68k_reduced(). # inspect pbmc contents; pbmc. AnnData object with n_obs Ã n_vars = 700 Ã 765; obs: 'bulk_labels', 'n_genes', 'percent_mito', 'n_counts', 'S_score', 'G2M_score', 'phase', 'louvain'; var: 'n_counts', 'means', 'dispersions', 'dispersions_norm', 'highly_variable'; uns: 'bulk_labels_colors', 'louvain', 'louvain_colors', 'neighbors', 'pca', 'rank_genes_grou",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:7445,Testability,log,logfile,7445,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:7484,Testability,log,logpath,7484,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:7790,Testability,log,logging,7790,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:7819,Testability,log,logging,7819, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:11261,Testability,log,logging,11261,"ls from PBMC. Scanpy, includes in its distribution a reduced sample of this dataset consisting of only 700 cells and 765 highly variable genes. This dataset has been already preprocessed and UMAP computed.; In this tutorial, we will also use the following literature markers:. B-cell: CD79A, MS4A1; Plasma: IGJ (JCHAIN); T-cell: CD3D; NK: GNLY, NKG7; Myeloid: CST3, LYZ; Monocytes: FCGR3A; Dendritic: FCER1A. Scatter plots for embeddings#; With scanpy, scatter plots for tSNE, UMAP and several other embeddings are readily available using the sc.pl.tsne, sc.pl.umap etc. functions. See here the list of options.; Those functions access the data stored in adata.obsm. For example sc.pl.umap uses the information stored in adata.obsm['X_umap']. For more flexibility, any key stored in adata.obsm can be used with the generic function sc.pl.embedding. import scanpy as sc; from matplotlib.pyplot import rc_context. sc.set_figure_params(dpi=100, color_map=""viridis_r""); sc.settings.verbosity = 0; sc.logging.print_header(). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Load pbmc dataset#. pbmc = sc.datasets.pbmc68k_reduced(). # inspect pbmc contents; pbmc. AnnData object with n_obs Ã n_vars = 700 Ã 765; obs: 'bulk_labels', 'n_genes', 'percent_mito', 'n_counts', 'S_score', 'G2M_score', 'phase', 'louvain'; var: 'n_counts', 'means', 'dispersions', 'dispersions_norm', 'highly_variable'; uns: 'bulk_labels_colors', 'louvain', 'louvain_colors', 'neighbors', 'pca', 'rank_genes_groups'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'distances', 'connectivities'. Visualization of gene expression and other variables#; For the scatter plots, the value to plot is given as the color argument. This can be any gene or any column in .obs, where .obs is a DataFrame containing the annotations per observation/cell, see AnnData for more information. # r",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:21087,Testability,log,log,21087,"t(pbmc, marker_genes_dict, groupby=""clusters"", dendrogram=True). Visualization of marker genes#; Instead of characterizing clusters by known gene markers as previously, we can identify genes that are differentially expressed in the clusters or groups.; To identify differentially expressed genes we run sc.tl.rank_genes_groups. This function will take each group of cells and compare the distribution of each gene in a group against the distribution in all other cells not in the group. Here, we will use the original cell labels given by 10x to identify marker genes for those cell types. sc.tl.rank_genes_groups(pbmc, groupby=""clusters"", method=""wilcoxon""). Visualize marker genes using dotplot#; The dotplot visualization is useful to get an overview of the genes that show differential expression. To make the resulting image more compact we will use n_genes=4 to show only the top 4 scoring genes. sc.pl.rank_genes_groups_dotplot(pbmc, n_genes=4). In order to get a better representation we can plot log fold changes instead of gene expression. Also, we want to focus on genes that have a log fold change >= 3 between the cell type expression and the rest of cells.; In this case we set values_to_plot='logfoldchanges' and min_logfoldchange=3.; Because log fold change is a divergent scale we also adjust the min and max to be plotted and use a divergent color map. Notice in the following plot that is rather difficult to distinguish between T-cell populations. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=4,; values_to_plot=""logfoldchanges"",; min_logfoldchange=3,; vmax=7,; vmin=-7,; cmap=""bwr"",; ). Focusing on particular groups#; Next, we use a dotplot focusing only on two groups (the groups option is also available for violin, heatmap and matrix plots). Here, we set n_genes=30 as in this case it will show all the genes that have a min_logfoldchange=4 up to 30. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=30,; values_to_plot=""logfoldchanges"",; min_logfoldchange=4,; vmax=7,; vm",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:21176,Testability,log,log,21176,"haracterizing clusters by known gene markers as previously, we can identify genes that are differentially expressed in the clusters or groups.; To identify differentially expressed genes we run sc.tl.rank_genes_groups. This function will take each group of cells and compare the distribution of each gene in a group against the distribution in all other cells not in the group. Here, we will use the original cell labels given by 10x to identify marker genes for those cell types. sc.tl.rank_genes_groups(pbmc, groupby=""clusters"", method=""wilcoxon""). Visualize marker genes using dotplot#; The dotplot visualization is useful to get an overview of the genes that show differential expression. To make the resulting image more compact we will use n_genes=4 to show only the top 4 scoring genes. sc.pl.rank_genes_groups_dotplot(pbmc, n_genes=4). In order to get a better representation we can plot log fold changes instead of gene expression. Also, we want to focus on genes that have a log fold change >= 3 between the cell type expression and the rest of cells.; In this case we set values_to_plot='logfoldchanges' and min_logfoldchange=3.; Because log fold change is a divergent scale we also adjust the min and max to be plotted and use a divergent color map. Notice in the following plot that is rather difficult to distinguish between T-cell populations. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=4,; values_to_plot=""logfoldchanges"",; min_logfoldchange=3,; vmax=7,; vmin=-7,; cmap=""bwr"",; ). Focusing on particular groups#; Next, we use a dotplot focusing only on two groups (the groups option is also available for violin, heatmap and matrix plots). Here, we set n_genes=30 as in this case it will show all the genes that have a min_logfoldchange=4 up to 30. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=30,; values_to_plot=""logfoldchanges"",; min_logfoldchange=4,; vmax=7,; vmin=-7,; cmap=""bwr"",; groups=[""3"", ""7""],; ). Visualize marker genes using matrixplot#; For the following plot ",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:21290,Testability,log,logfoldchanges,21290,"ially expressed in the clusters or groups.; To identify differentially expressed genes we run sc.tl.rank_genes_groups. This function will take each group of cells and compare the distribution of each gene in a group against the distribution in all other cells not in the group. Here, we will use the original cell labels given by 10x to identify marker genes for those cell types. sc.tl.rank_genes_groups(pbmc, groupby=""clusters"", method=""wilcoxon""). Visualize marker genes using dotplot#; The dotplot visualization is useful to get an overview of the genes that show differential expression. To make the resulting image more compact we will use n_genes=4 to show only the top 4 scoring genes. sc.pl.rank_genes_groups_dotplot(pbmc, n_genes=4). In order to get a better representation we can plot log fold changes instead of gene expression. Also, we want to focus on genes that have a log fold change >= 3 between the cell type expression and the rest of cells.; In this case we set values_to_plot='logfoldchanges' and min_logfoldchange=3.; Because log fold change is a divergent scale we also adjust the min and max to be plotted and use a divergent color map. Notice in the following plot that is rather difficult to distinguish between T-cell populations. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=4,; values_to_plot=""logfoldchanges"",; min_logfoldchange=3,; vmax=7,; vmin=-7,; cmap=""bwr"",; ). Focusing on particular groups#; Next, we use a dotplot focusing only on two groups (the groups option is also available for violin, heatmap and matrix plots). Here, we set n_genes=30 as in this case it will show all the genes that have a min_logfoldchange=4 up to 30. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=30,; values_to_plot=""logfoldchanges"",; min_logfoldchange=4,; vmax=7,; vmin=-7,; cmap=""bwr"",; groups=[""3"", ""7""],; ). Visualize marker genes using matrixplot#; For the following plot the we use the previously computed âscaledâ values (stored in layer scaled) and use a divergent col",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:21340,Testability,log,log,21340,"rank_genes_groups. This function will take each group of cells and compare the distribution of each gene in a group against the distribution in all other cells not in the group. Here, we will use the original cell labels given by 10x to identify marker genes for those cell types. sc.tl.rank_genes_groups(pbmc, groupby=""clusters"", method=""wilcoxon""). Visualize marker genes using dotplot#; The dotplot visualization is useful to get an overview of the genes that show differential expression. To make the resulting image more compact we will use n_genes=4 to show only the top 4 scoring genes. sc.pl.rank_genes_groups_dotplot(pbmc, n_genes=4). In order to get a better representation we can plot log fold changes instead of gene expression. Also, we want to focus on genes that have a log fold change >= 3 between the cell type expression and the rest of cells.; In this case we set values_to_plot='logfoldchanges' and min_logfoldchange=3.; Because log fold change is a divergent scale we also adjust the min and max to be plotted and use a divergent color map. Notice in the following plot that is rather difficult to distinguish between T-cell populations. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=4,; values_to_plot=""logfoldchanges"",; min_logfoldchange=3,; vmax=7,; vmin=-7,; cmap=""bwr"",; ). Focusing on particular groups#; Next, we use a dotplot focusing only on two groups (the groups option is also available for violin, heatmap and matrix plots). Here, we set n_genes=30 as in this case it will show all the genes that have a min_logfoldchange=4 up to 30. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=30,; values_to_plot=""logfoldchanges"",; min_logfoldchange=4,; vmax=7,; vmin=-7,; cmap=""bwr"",; groups=[""3"", ""7""],; ). Visualize marker genes using matrixplot#; For the following plot the we use the previously computed âscaledâ values (stored in layer scaled) and use a divergent color map. sc.pl.rank_genes_groups_matrixplot(; pbmc, n_genes=3, use_raw=False, vmin=-3, vmax=3, cmap=""",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:21619,Testability,log,logfoldchanges,21619," to identify marker genes for those cell types. sc.tl.rank_genes_groups(pbmc, groupby=""clusters"", method=""wilcoxon""). Visualize marker genes using dotplot#; The dotplot visualization is useful to get an overview of the genes that show differential expression. To make the resulting image more compact we will use n_genes=4 to show only the top 4 scoring genes. sc.pl.rank_genes_groups_dotplot(pbmc, n_genes=4). In order to get a better representation we can plot log fold changes instead of gene expression. Also, we want to focus on genes that have a log fold change >= 3 between the cell type expression and the rest of cells.; In this case we set values_to_plot='logfoldchanges' and min_logfoldchange=3.; Because log fold change is a divergent scale we also adjust the min and max to be plotted and use a divergent color map. Notice in the following plot that is rather difficult to distinguish between T-cell populations. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=4,; values_to_plot=""logfoldchanges"",; min_logfoldchange=3,; vmax=7,; vmin=-7,; cmap=""bwr"",; ). Focusing on particular groups#; Next, we use a dotplot focusing only on two groups (the groups option is also available for violin, heatmap and matrix plots). Here, we set n_genes=30 as in this case it will show all the genes that have a min_logfoldchange=4 up to 30. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=30,; values_to_plot=""logfoldchanges"",; min_logfoldchange=4,; vmax=7,; vmin=-7,; cmap=""bwr"",; groups=[""3"", ""7""],; ). Visualize marker genes using matrixplot#; For the following plot the we use the previously computed âscaledâ values (stored in layer scaled) and use a divergent color map. sc.pl.rank_genes_groups_matrixplot(; pbmc, n_genes=3, use_raw=False, vmin=-3, vmax=3, cmap=""bwr"", layer=""scaled""; ). Visualize marker genes using stacked violin plots#. sc.pl.rank_genes_groups_stacked_violin(pbmc, n_genes=3, cmap=""viridis_r""). Visualize marker genes using heatmap#. sc.pl.rank_genes_groups_heatmap(; pbmc,; n_",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:22032,Testability,log,logfoldchanges,22032,"get a better representation we can plot log fold changes instead of gene expression. Also, we want to focus on genes that have a log fold change >= 3 between the cell type expression and the rest of cells.; In this case we set values_to_plot='logfoldchanges' and min_logfoldchange=3.; Because log fold change is a divergent scale we also adjust the min and max to be plotted and use a divergent color map. Notice in the following plot that is rather difficult to distinguish between T-cell populations. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=4,; values_to_plot=""logfoldchanges"",; min_logfoldchange=3,; vmax=7,; vmin=-7,; cmap=""bwr"",; ). Focusing on particular groups#; Next, we use a dotplot focusing only on two groups (the groups option is also available for violin, heatmap and matrix plots). Here, we set n_genes=30 as in this case it will show all the genes that have a min_logfoldchange=4 up to 30. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=30,; values_to_plot=""logfoldchanges"",; min_logfoldchange=4,; vmax=7,; vmin=-7,; cmap=""bwr"",; groups=[""3"", ""7""],; ). Visualize marker genes using matrixplot#; For the following plot the we use the previously computed âscaledâ values (stored in layer scaled) and use a divergent color map. sc.pl.rank_genes_groups_matrixplot(; pbmc, n_genes=3, use_raw=False, vmin=-3, vmax=3, cmap=""bwr"", layer=""scaled""; ). Visualize marker genes using stacked violin plots#. sc.pl.rank_genes_groups_stacked_violin(pbmc, n_genes=3, cmap=""viridis_r""). Visualize marker genes using heatmap#. sc.pl.rank_genes_groups_heatmap(; pbmc,; n_genes=3,; use_raw=False,; swap_axes=True,; vmin=-3,; vmax=3,; cmap=""bwr"",; layer=""scaled"",; figsize=(10, 7),; show=False,; );. Showing 10 genes per category, turning the gene labels off and swapping the axes. Notice that when the image is swapped, a color code for the categories appear instead of the âbracketsâ. sc.pl.rank_genes_groups_heatmap(; pbmc,; n_genes=10,; use_raw=False,; swap_axes=True,; show_gene_labels=Fals",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:11420,Usability,learn,learn,11420,"t has been already preprocessed and UMAP computed.; In this tutorial, we will also use the following literature markers:. B-cell: CD79A, MS4A1; Plasma: IGJ (JCHAIN); T-cell: CD3D; NK: GNLY, NKG7; Myeloid: CST3, LYZ; Monocytes: FCGR3A; Dendritic: FCER1A. Scatter plots for embeddings#; With scanpy, scatter plots for tSNE, UMAP and several other embeddings are readily available using the sc.pl.tsne, sc.pl.umap etc. functions. See here the list of options.; Those functions access the data stored in adata.obsm. For example sc.pl.umap uses the information stored in adata.obsm['X_umap']. For more flexibility, any key stored in adata.obsm can be used with the generic function sc.pl.embedding. import scanpy as sc; from matplotlib.pyplot import rc_context. sc.set_figure_params(dpi=100, color_map=""viridis_r""); sc.settings.verbosity = 0; sc.logging.print_header(). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Load pbmc dataset#. pbmc = sc.datasets.pbmc68k_reduced(). # inspect pbmc contents; pbmc. AnnData object with n_obs Ã n_vars = 700 Ã 765; obs: 'bulk_labels', 'n_genes', 'percent_mito', 'n_counts', 'S_score', 'G2M_score', 'phase', 'louvain'; var: 'n_counts', 'means', 'dispersions', 'dispersions_norm', 'highly_variable'; uns: 'bulk_labels_colors', 'louvain', 'louvain_colors', 'neighbors', 'pca', 'rank_genes_groups'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'distances', 'connectivities'. Visualization of gene expression and other variables#; For the scatter plots, the value to plot is given as the color argument. This can be any gene or any column in .obs, where .obs is a DataFrame containing the annotations per observation/cell, see AnnData for more information. # rc_context is used for the figure size, in this case 4x4; with rc_context({""figure.figsize"": (4, 4)}):; sc.pl.umap(pbmc, color=""CD79A""). Multiple values can",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:17643,Usability,simpl,simple,17643,"r 5.Compared to a dotplot, the violin plot gives us and idea of the distribution of gene expression values across cells. with rc_context({""figure.figsize"": (4.5, 3)}):; sc.pl.violin(pbmc, [""CD79A"", ""MS4A1""], groupby=""clusters""). Note Violin plots can also be used to plot any numerical value stored in .obs. For example, here violin plots are used to compare the number of genes and the percentage of mitochondrial genes between the different clusters. with rc_context({""figure.figsize"": (4.5, 3)}):; sc.pl.violin(; pbmc,; [""n_genes"", ""percent_mito""],; groupby=""clusters"",; stripplot=False, # remove the internal dots; inner=""box"", # adds a boxplot inside violins; ). stacked-violin plot#; To simultaneously look at the violin plots for all marker genes we use sc.pl.stacked_violin. As previously, a dendrogram was added to group similar clusters. ax = sc.pl.stacked_violin(; pbmc, marker_genes_dict, groupby=""clusters"", swap_axes=False, dendrogram=True; ). matrixplot#; A simple way to visualize the expression of genes is with a matrix plot. This is a heatmap of the mean expression values per gene grouped by categories. This type plot basically shows the same information as the color in the dotplots.; Here, scale the expression of the genes from 0 to 1, being the maximum mean expression and 0 the minimum. sc.pl.matrixplot(; pbmc,; marker_genes_dict,; ""clusters"",; dendrogram=True,; cmap=""Blues"",; standard_scale=""var"",; colorbar_title=""column scaled\nexpression"",; ). Other useful option is to normalize the gene expression using sc.pp.scale. Here we store this information under the scale layer. Afterwards we adjust the plot min and max and use a diverging color map (in this case RdBu_r where _r means reversed). # scale and store results in layer; pbmc.layers[""scaled""] = sc.pp.scale(pbmc, copy=True).X. sc.pl.matrixplot(; pbmc,; marker_genes_dict,; ""clusters"",; dendrogram=True,; colorbar_title=""mean z-score"",; layer=""scaled"",; vmin=-2,; vmax=2,; cmap=""RdBu_r"",; ). Combining plots in s",MatchSource.WIKI,en/stable/tutorials/plotting/core.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:8086,Deployability,toggle,toggleswitch,8086,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/plotting/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:9170,Deployability,release,release,9170,"tings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Plotting. Plotting#. Core plotting functions; Customizing Scanpy plots. previous; Integrating data using ingest and BBKNN. next; Core plotting functions. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/plotting/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:7162,Performance,cache,cachedir,7162,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/plotting/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:8403,Security,hash,hashsolo,8403,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Plotting. Plotting#. Core plotting functions; Customizing Scanpy plots. previous; Integrating data using ingest and BBKNN. next; Core plotting functions. By Scanpy development team. ; Â© Copyright ,MatchSource.WIKI,en/stable/tutorials/plotting/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:7430,Testability,log,logfile,7430,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/plotting/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:7469,Testability,log,logpath,7469,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/plotting/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:7775,Testability,log,logging,7775,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/plotting/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:7804,Testability,log,logging,7804, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/plotting/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:12375,Availability,avail,available,12375,"ng NA; pygments 2.17.2; pyparsing 3.1.1; pythonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 17:28. Reading the data#; We will use a Visium spatial transcriptomics dataset of the human lymphnode, which is publicly available from the 10x genomics website: link.; The function datasets.visium_sge() downloads the dataset from 10x Genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and percentage of mitochondrial read counts per sample.; When using your own Visium data, use sc.read_visium() function to import it. adata = sc.datasets.visium_sge(sample_id=""V1_Human_Lymph_Node""); adata.var_names_make_unique(); adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(adata, qc_vars=[""mt""], inplace=True). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Human_Lymph_Node/filtered_feature_bc_matrix.h5; (0:00:01). This is how the adata structure looks like for Visium data. adata. AnnData object with n_obs Ã n_vars = 4035 Ã 36601; obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts'",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:12458,Availability,down,downloads,12458,"scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 17:28. Reading the data#; We will use a Visium spatial transcriptomics dataset of the human lymphnode, which is publicly available from the 10x genomics website: link.; The function datasets.visium_sge() downloads the dataset from 10x Genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and percentage of mitochondrial read counts per sample.; When using your own Visium data, use sc.read_visium() function to import it. adata = sc.datasets.visium_sge(sample_id=""V1_Human_Lymph_Node""); adata.var_names_make_unique(); adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(adata, qc_vars=[""mt""], inplace=True). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Human_Lymph_Node/filtered_feature_bc_matrix.h5; (0:00:01). This is how the adata structure looks like for Visium data. adata. AnnData object with n_obs Ã n_vars = 4035 Ã 36601; obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_co",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:19890,Availability,down,download,19890," indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00); WARNING: dendrogram data not found (using key=dendrogram_clusters). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.; using 'X_pca' with n_pcs = 50; Storing dendrogram info using `.uns['dendrogram_clusters']`; WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.; categories: 0, 1, 2, etc.; var_group_labels: 3. We see that CR2 recapitulates the spatial structure. sc.pl.spatial(adata, img_key=""hires"", color=[""clusters"", ""CR2""]). sc.pl.spatial(adata, img_key=""hires"", color=[""COL1A2"", ""SYPL1""], alpha=0.7). MERFISH example#; In case you have spatial data generated with FISH-based techniques, just read the cordinate table and assign it to the adata.obsm element.; Letâs take a look at the example from Xia et al. 2019.; First, we need to download the coordinate and counts data from the original publication: coordinates to ./data/pnas.1912459116.sd15.csv and counts to ./data/pnas.1912459116.sd12.csv. # If needed:; # %pip install openpyxl. coordinates = pd.read_excel(""./data/pnas.1912459116.sd15.xlsx"", index_col=0); counts = sc.read_csv(""./data/pnas.1912459116.sd12.csv"").transpose(). adata_merfish = counts[coordinates.index, :].copy(); adata_merfish.obsm[""spatial""] = coordinates.to_numpy(). We will perform standard preprocessing and dimensionality reduction. sc.pp.normalize_per_cell(adata_merfish, counts_per_cell_after=1e6); sc.pp.log1p(adata_merfish); sc.pp.pca(adata_merfish, n_comps=15); sc.pp.neighbors(adata_merfish); sc.tl.umap(adata_merfish); sc.tl.leiden(; adata_merfish,; key_added=""clusters"",; resolution=0.5,; n_iterations=2,; flavor=""igraph"",; directed=False,; ). normalizing by total count per cell; finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finish",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:8137,Deployability,toggle,toggleswitch,8137,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:9221,Deployability,release,release,9221,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Analysis and visualization of spatial transcriptomics data. Contents . Reading the data; QC and preprocessing; Manifold embedding and clustering based on transcriptional similarity; Visualization in spatial coordinates; Cluster marker genes; MERFISH example. Analysis and visualization of spatial transcriptomics data#; Author: Giovanni Palla; .. note::; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial demonstrates how to work with spatial transcriptomics data within Scanpy.; We focus on 10x Genomics Visium data, and provide an example for MERFISH. import scanpy as sc; import pandas as pd; import matplotlib.pyplot as plt; import seaborn as sns. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4.d20240226; ----",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:12232,Deployability,update,updated,12232,"re_eval 0.2.2; pydev_ipython NA; pydevconsole NA; pydevd 2.9.5; pydevd_file_utils NA; pydevd_plugins NA; pydevd_tracing NA; pygments 2.17.2; pyparsing 3.1.1; pythonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 17:28. Reading the data#; We will use a Visium spatial transcriptomics dataset of the human lymphnode, which is publicly available from the 10x genomics website: link.; The function datasets.visium_sge() downloads the dataset from 10x Genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and percentage of mitochondrial read counts per sample.; When using your own Visium data, use sc.read_visium() function to import it. adata = sc.datasets.visium_sge(sample_id=""V1_Human_Lymph_Node""); adata.var_names_make_unique(); adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(adata, qc_vars=[""mt""], inplace=True). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Human_Lymph_Node/filtered_feature_bc_matrix.h5; (0:00:01). This is how the adata structure looks like for Visium data. adata. AnnData object with n_o",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:20076,Deployability,install,install,20076,"clusters). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.; using 'X_pca' with n_pcs = 50; Storing dendrogram info using `.uns['dendrogram_clusters']`; WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.; categories: 0, 1, 2, etc.; var_group_labels: 3. We see that CR2 recapitulates the spatial structure. sc.pl.spatial(adata, img_key=""hires"", color=[""clusters"", ""CR2""]). sc.pl.spatial(adata, img_key=""hires"", color=[""COL1A2"", ""SYPL1""], alpha=0.7). MERFISH example#; In case you have spatial data generated with FISH-based techniques, just read the cordinate table and assign it to the adata.obsm element.; Letâs take a look at the example from Xia et al. 2019.; First, we need to download the coordinate and counts data from the original publication: coordinates to ./data/pnas.1912459116.sd15.csv and counts to ./data/pnas.1912459116.sd12.csv. # If needed:; # %pip install openpyxl. coordinates = pd.read_excel(""./data/pnas.1912459116.sd15.xlsx"", index_col=0); counts = sc.read_csv(""./data/pnas.1912459116.sd12.csv"").transpose(). adata_merfish = counts[coordinates.index, :].copy(); adata_merfish.obsm[""spatial""] = coordinates.to_numpy(). We will perform standard preprocessing and dimensionality reduction. sc.pp.normalize_per_cell(adata_merfish, counts_per_cell_after=1e6); sc.pp.log1p(adata_merfish); sc.pp.pca(adata_merfish, n_comps=15); sc.pp.neighbors(adata_merfish); sc.tl.umap(adata_merfish); sc.tl.leiden(; adata_merfish,; key_added=""clusters"",; resolution=0.5,; n_iterations=2,; flavor=""igraph"",; directed=False,; ). normalizing by total count per cell; finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finished (0:00:08); computing neighbors; using 'X_pca' with n_pcs = 15; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pai",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:14911,Modifiability,variab,variable,14911,"d genes. fig, axs = plt.subplots(1, 4, figsize=(15, 4)); sns.histplot(adata.obs[""total_counts""], kde=False, ax=axs[0]); sns.histplot(; adata.obs[""total_counts""][adata.obs[""total_counts""] < 10000],; kde=False,; bins=40,; ax=axs[1],; ); sns.histplot(adata.obs[""n_genes_by_counts""], kde=False, bins=60, ax=axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). <Axes: xlabel='n_genes_by_counts', ylabel='Count'>. sc.pp.filter_cells(adata, min_counts=5000); sc.pp.filter_cells(adata, max_counts=35000); adata = adata[adata.obs[""pct_counts_mt""] < 20].copy(); print(f""#cells after MT filter: {adata.n_obs}""); sc.pp.filter_genes(adata, min_cells=10). filtered out 44 cells that have less than 5000 counts; filtered out 130 cells that have more than 35000 counts; #cells after MT filter: 3861; filtered out 16916 genes that are detected in less than 10 cells. We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). Note that there are alternatives for normalization (see discussion in [Luecken19], and more recent alternatives such as SCTransform or GLM-PCA). sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Manifold embedding and clustering based on transcriptional similarity#; To embed and cluster the manifold encoded by transcriptional similarity, we proceed as in the standard clustering tutorial. sc.pp.pca(adata); sc.pp.neighbors(adata); sc.tl.umap(adata); sc.tl.leiden(; adata, key_added=""clusters"", flavor=""igraph"", directed=False, n_iterations=2; ). computing PC",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:15286,Modifiability,variab,variable,15286,",; ). <Axes: xlabel='n_genes_by_counts', ylabel='Count'>. sc.pp.filter_cells(adata, min_counts=5000); sc.pp.filter_cells(adata, max_counts=35000); adata = adata[adata.obs[""pct_counts_mt""] < 20].copy(); print(f""#cells after MT filter: {adata.n_obs}""); sc.pp.filter_genes(adata, min_cells=10). filtered out 44 cells that have less than 5000 counts; filtered out 130 cells that have more than 35000 counts; #cells after MT filter: 3861; filtered out 16916 genes that are detected in less than 10 cells. We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). Note that there are alternatives for normalization (see discussion in [Luecken19], and more recent alternatives such as SCTransform or GLM-PCA). sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Manifold embedding and clustering based on transcriptional similarity#; To embed and cluster the manifold encoded by transcriptional similarity, we proceed as in the standard clustering tutorial. sc.pp.pca(adata); sc.pp.neighbors(adata); sc.tl.umap(adata); sc.tl.leiden(; adata, key_added=""clusters"", flavor=""igraph"", directed=False, n_iterations=2; ). computing PCA; with n_comps=50; finished (0:00:30); computing neighbors; using 'X_pca' with n_pcs = 50; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:05); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:12); running Leiden clustering; finished: found 10 clusters and added; 'clusters', the cluster",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:22226,Modifiability,extend,extending,22226,"finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finished (0:00:08); computing neighbors; using 'X_pca' with n_pcs = 15; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:00); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:01); running Leiden clustering; finished: found 6 clusters and added; 'clusters', the cluster labels (adata.obs, categorical) (0:00:00). The experiment consisted in measuring gene expression counts from a single cell type (cultured U2-OS cells). Clusters consist of cell states at different stages of the cell cycle. We donât expect to see specific structure in spatial dimensions given the experimental setup.; We can visualize the clusters obtained from running Leiden in UMAP space and spatial coordinates like this. adata_merfish. AnnData object with n_obs Ã n_vars = 645 Ã 12903; obs: 'n_counts', 'clusters'; uns: 'log1p', 'pca', 'neighbors', 'umap', 'leiden'; obsm: 'spatial', 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'distances', 'connectivities'. sc.pl.umap(adata_merfish, color=""clusters""); sc.pl.embedding(adata_merfish, basis=""spatial"", color=""clusters""). We hope you found the tutorial useful!; Report back to us which features/external tools you would like to see in Scanpy.; We are extending Scanpy and AnnData to support other spatial data types, such as Imaging Mass Cytometry and extend data structure to support spatial graphs and additional features. Stay tuned!. previous; Spatial. next; Integrating spatial data with scRNA-seq using scanorama. Contents; . Reading the data; QC and preprocessing; Manifold embedding and clustering based on transcriptional similarity; Visualization in spatial coordinates; Cluster marker genes; MERFISH example. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:22327,Modifiability,extend,extend,22327,"finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finished (0:00:08); computing neighbors; using 'X_pca' with n_pcs = 15; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:00); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:01); running Leiden clustering; finished: found 6 clusters and added; 'clusters', the cluster labels (adata.obs, categorical) (0:00:00). The experiment consisted in measuring gene expression counts from a single cell type (cultured U2-OS cells). Clusters consist of cell states at different stages of the cell cycle. We donât expect to see specific structure in spatial dimensions given the experimental setup.; We can visualize the clusters obtained from running Leiden in UMAP space and spatial coordinates like this. adata_merfish. AnnData object with n_obs Ã n_vars = 645 Ã 12903; obs: 'n_counts', 'clusters'; uns: 'log1p', 'pca', 'neighbors', 'umap', 'leiden'; obsm: 'spatial', 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'distances', 'connectivities'. sc.pl.umap(adata_merfish, color=""clusters""); sc.pl.embedding(adata_merfish, basis=""spatial"", color=""clusters""). We hope you found the tutorial useful!; Report back to us which features/external tools you would like to see in Scanpy.; We are extending Scanpy and AnnData to support other spatial data types, such as Imaging Mass Cytometry and extend data structure to support spatial graphs and additional features. Stay tuned!. previous; Spatial. next; Integrating spatial data with scRNA-seq using scanorama. Contents; . Reading the data; QC and preprocessing; Manifold embedding and clustering based on transcriptional similarity; Visualization in spatial coordinates; Cluster marker genes; MERFISH example. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:7213,Performance,cache,cachedir,7213,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:13794,Performance,perform,perform,13794,"e_id=""V1_Human_Lymph_Node""); adata.var_names_make_unique(); adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(adata, qc_vars=[""mt""], inplace=True). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Human_Lymph_Node/filtered_feature_bc_matrix.h5; (0:00:01). This is how the adata structure looks like for Visium data. adata. AnnData object with n_obs Ã n_vars = 4035 Ã 36601; obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_counts_mt', 'log1p_total_counts_mt', 'pct_counts_mt'; var: 'gene_ids', 'feature_types', 'genome', 'mt', 'n_cells_by_counts', 'mean_counts', 'log1p_mean_counts', 'pct_dropout_by_counts', 'total_counts', 'log1p_total_counts'; uns: 'spatial'; obsm: 'spatial'. QC and preprocessing#; We perform some basic filtering of spots based on total counts and expressed genes. fig, axs = plt.subplots(1, 4, figsize=(15, 4)); sns.histplot(adata.obs[""total_counts""], kde=False, ax=axs[0]); sns.histplot(; adata.obs[""total_counts""][adata.obs[""total_counts""] < 10000],; kde=False,; bins=40,; ax=axs[1],; ); sns.histplot(adata.obs[""n_genes_by_counts""], kde=False, bins=60, ax=axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). <Axes: xlabel='n_genes_by_counts', ylabel='Count'>. sc.pp.filter_cells(adata, min_counts=5000); sc.pp.filter_cells(adata, max_counts=35000); adata = adata[adata.obs[""pct_counts_mt""] < 20].copy(); print(f""#cells after MT filter: {adata.n_obs}""); sc.pp.filter_genes(adata, min_cells=10). filtered out 44 cells that have less than 5000 counts; filtered out 130 cells that have more than 35000 counts; #cells after MT filter: 3861; filtered out 16916 genes that are detected in less than 10 cells. We proceed to normalize V",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:17428,Performance,perform,performed,17428," genes. plt.rcParams[""figure.figsize""] = (4, 4); sc.pl.umap(adata, color=[""total_counts"", ""n_genes_by_counts"", ""clusters""], wspace=0.4). Visualization in spatial coordinates#; Let us now take a look at how total_counts and n_genes_by_counts behave in spatial coordinates. We will overlay the circular spots on top of the Hematoxylin and eosin stain (H&E) image provided, using the function sc.pl.spatial. plt.rcParams[""figure.figsize""] = (8, 8); sc.pl.spatial(adata, img_key=""hires"", color=[""total_counts"", ""n_genes_by_counts""]). The function sc.pl.spatial accepts 4 additional parameters:. img_key: key where the img is stored in the adata.uns element; crop_coord: coordinates to use for cropping (left, right, top, bottom); alpha_img: alpha value for the transcparency of the image; bw: flag to convert the image into gray scale. Furthermore, in sc.pl.spatial, the size parameter changes its behaviour: it becomes a scaling factor for the spot sizes.; Before, we performed clustering in gene expression space, and visualized the results with UMAP. By visualizing clustered samples in spatial dimensions, we can gain insights into tissue organization and, potentially, into inter-cellular communication. sc.pl.spatial(adata, img_key=""hires"", color=""clusters"", size=1.5). Spots belonging to the same cluster in gene expression space often co-occur in spatial dimensions. For instance, spots belonging to cluster 5 are often surrounded by spots belonging to cluster 0.; We can zoom in specific regions of interests to gain qualitative insights. Furthermore, by changing the alpha values of the spots, we can visualize better the underlying tissue morphology from the H&E image. sc.pl.spatial(; adata,; img_key=""hires"",; color=""clusters"",; groups=[""5"", ""9""],; crop_coord=[7000, 10000, 0, 6000],; alpha=0.5,; size=1.3,; ). Cluster marker genes#; Let us further inspect cluster 5, which occurs in small groups of spots across the image.; Compute marker genes and plot a heatmap with expression levels of i",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:20358,Performance,perform,perform,20358,"_group_labels` are different.; categories: 0, 1, 2, etc.; var_group_labels: 3. We see that CR2 recapitulates the spatial structure. sc.pl.spatial(adata, img_key=""hires"", color=[""clusters"", ""CR2""]). sc.pl.spatial(adata, img_key=""hires"", color=[""COL1A2"", ""SYPL1""], alpha=0.7). MERFISH example#; In case you have spatial data generated with FISH-based techniques, just read the cordinate table and assign it to the adata.obsm element.; Letâs take a look at the example from Xia et al. 2019.; First, we need to download the coordinate and counts data from the original publication: coordinates to ./data/pnas.1912459116.sd15.csv and counts to ./data/pnas.1912459116.sd12.csv. # If needed:; # %pip install openpyxl. coordinates = pd.read_excel(""./data/pnas.1912459116.sd15.xlsx"", index_col=0); counts = sc.read_csv(""./data/pnas.1912459116.sd12.csv"").transpose(). adata_merfish = counts[coordinates.index, :].copy(); adata_merfish.obsm[""spatial""] = coordinates.to_numpy(). We will perform standard preprocessing and dimensionality reduction. sc.pp.normalize_per_cell(adata_merfish, counts_per_cell_after=1e6); sc.pp.log1p(adata_merfish); sc.pp.pca(adata_merfish, n_comps=15); sc.pp.neighbors(adata_merfish); sc.tl.umap(adata_merfish); sc.tl.leiden(; adata_merfish,; key_added=""clusters"",; resolution=0.5,; n_iterations=2,; flavor=""igraph"",; directed=False,; ). normalizing by total count per cell; finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finished (0:00:08); computing neighbors; using 'X_pca' with n_pcs = 15; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:00); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:01); running Leiden clustering; finished: found 6 clusters and added; 'clusters', the cluster labels (adata.obs, categorical) (0:00:00). The experiment",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:22405,Performance,tune,tuned,22405,"finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finished (0:00:08); computing neighbors; using 'X_pca' with n_pcs = 15; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:00); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:01); running Leiden clustering; finished: found 6 clusters and added; 'clusters', the cluster labels (adata.obs, categorical) (0:00:00). The experiment consisted in measuring gene expression counts from a single cell type (cultured U2-OS cells). Clusters consist of cell states at different stages of the cell cycle. We donât expect to see specific structure in spatial dimensions given the experimental setup.; We can visualize the clusters obtained from running Leiden in UMAP space and spatial coordinates like this. adata_merfish. AnnData object with n_obs Ã n_vars = 645 Ã 12903; obs: 'n_counts', 'clusters'; uns: 'log1p', 'pca', 'neighbors', 'umap', 'leiden'; obsm: 'spatial', 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'distances', 'connectivities'. sc.pl.umap(adata_merfish, color=""clusters""); sc.pl.embedding(adata_merfish, basis=""spatial"", color=""clusters""). We hope you found the tutorial useful!; Report back to us which features/external tools you would like to see in Scanpy.; We are extending Scanpy and AnnData to support other spatial data types, such as Imaging Mass Cytometry and extend data structure to support spatial graphs and additional features. Stay tuned!. previous; Spatial. next; Integrating spatial data with scRNA-seq using scanorama. Contents; . Reading the data; QC and preprocessing; Manifold embedding and clustering based on transcriptional similarity; Visualization in spatial coordinates; Cluster marker genes; MERFISH example. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:14764,Safety,detect,detected,14764,"nts', 'total_counts', 'log1p_total_counts'; uns: 'spatial'; obsm: 'spatial'. QC and preprocessing#; We perform some basic filtering of spots based on total counts and expressed genes. fig, axs = plt.subplots(1, 4, figsize=(15, 4)); sns.histplot(adata.obs[""total_counts""], kde=False, ax=axs[0]); sns.histplot(; adata.obs[""total_counts""][adata.obs[""total_counts""] < 10000],; kde=False,; bins=40,; ax=axs[1],; ); sns.histplot(adata.obs[""n_genes_by_counts""], kde=False, bins=60, ax=axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). <Axes: xlabel='n_genes_by_counts', ylabel='Count'>. sc.pp.filter_cells(adata, min_counts=5000); sc.pp.filter_cells(adata, max_counts=35000); adata = adata[adata.obs[""pct_counts_mt""] < 20].copy(); print(f""#cells after MT filter: {adata.n_obs}""); sc.pp.filter_genes(adata, min_cells=10). filtered out 44 cells that have less than 5000 counts; filtered out 130 cells that have more than 35000 counts; #cells after MT filter: 3861; filtered out 16916 genes that are detected in less than 10 cells. We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). Note that there are alternatives for normalization (see discussion in [Luecken19], and more recent alternatives such as SCTransform or GLM-PCA). sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Manifold embedding and clustering based on transcriptional similarity#; To embed and cluster the manifold encoded by transcriptional similarity, we proceed as in the standard clustering tut",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:14897,Safety,detect,detect,14897,"d genes. fig, axs = plt.subplots(1, 4, figsize=(15, 4)); sns.histplot(adata.obs[""total_counts""], kde=False, ax=axs[0]); sns.histplot(; adata.obs[""total_counts""][adata.obs[""total_counts""] < 10000],; kde=False,; bins=40,; ax=axs[1],; ); sns.histplot(adata.obs[""n_genes_by_counts""], kde=False, bins=60, ax=axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). <Axes: xlabel='n_genes_by_counts', ylabel='Count'>. sc.pp.filter_cells(adata, min_counts=5000); sc.pp.filter_cells(adata, max_counts=35000); adata = adata[adata.obs[""pct_counts_mt""] < 20].copy(); print(f""#cells after MT filter: {adata.n_obs}""); sc.pp.filter_genes(adata, min_cells=10). filtered out 44 cells that have less than 5000 counts; filtered out 130 cells that have more than 35000 counts; #cells after MT filter: 3861; filtered out 16916 genes that are detected in less than 10 cells. We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). Note that there are alternatives for normalization (see discussion in [Luecken19], and more recent alternatives such as SCTransform or GLM-PCA). sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Manifold embedding and clustering based on transcriptional similarity#; To embed and cluster the manifold encoded by transcriptional similarity, we proceed as in the standard clustering tutorial. sc.pp.pca(adata); sc.pp.neighbors(adata); sc.tl.umap(adata); sc.tl.leiden(; adata, key_added=""clusters"", flavor=""igraph"", directed=False, n_iterations=2; ). computing PC",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:16455,Safety,detect,detected,16455,"data.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Manifold embedding and clustering based on transcriptional similarity#; To embed and cluster the manifold encoded by transcriptional similarity, we proceed as in the standard clustering tutorial. sc.pp.pca(adata); sc.pp.neighbors(adata); sc.tl.umap(adata); sc.tl.leiden(; adata, key_added=""clusters"", flavor=""igraph"", directed=False, n_iterations=2; ). computing PCA; with n_comps=50; finished (0:00:30); computing neighbors; using 'X_pca' with n_pcs = 50; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:05); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:12); running Leiden clustering; finished: found 10 clusters and added; 'clusters', the cluster labels (adata.obs, categorical) (0:00:00). We plot some covariates to check if there is any particular structure in the UMAP associated with total counts and detected genes. plt.rcParams[""figure.figsize""] = (4, 4); sc.pl.umap(adata, color=[""total_counts"", ""n_genes_by_counts"", ""clusters""], wspace=0.4). Visualization in spatial coordinates#; Let us now take a look at how total_counts and n_genes_by_counts behave in spatial coordinates. We will overlay the circular spots on top of the Hematoxylin and eosin stain (H&E) image provided, using the function sc.pl.spatial. plt.rcParams[""figure.figsize""] = (8, 8); sc.pl.spatial(adata, img_key=""hires"", color=[""total_counts"", ""n_genes_by_counts""]). The function sc.pl.spatial accepts 4 additional parameters:. img_key: key where the img is stored in the adata.uns element; crop_coord: coordinates to use for cropping (left, right, top, bottom); alpha_img: alpha value for the transcparency of the image; bw: flag to convert the image into gray scale. Furthermore, in sc.pl.spatial, the size parameter changes its behaviour: it becomes a scaling factor for the s",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:8454,Security,hash,hashsolo,8454,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Analysis and visualization of spatial transcriptomics data. Contents . Reading the data; QC and preprocessing; Manifold embedding and clustering based on transcriptional similarity; Visualizati,MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:7481,Testability,log,logfile,7481,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:7520,Testability,log,logpath,7520,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:7826,Testability,log,logging,7826,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:7855,Testability,log,logging,7855, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:9960,Testability,log,logging,9960,"shbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Analysis and visualization of spatial transcriptomics data. Contents . Reading the data; QC and preprocessing; Manifold embedding and clustering based on transcriptional similarity; Visualization in spatial coordinates; Cluster marker genes; MERFISH example. Analysis and visualization of spatial transcriptomics data#; Author: Giovanni Palla; .. note::; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial demonstrates how to work with spatial transcriptomics data within Scanpy.; We focus on 10x Genomics Visium data, and provide an example for MERFISH. import scanpy as sc; import pandas as pd; import matplotlib.pyplot as plt; import seaborn as sns. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4.d20240226; -----; PIL 10.2.0; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; ipykernel 6.28.0; ipywidgets 8.1.1; isoduration NA; jedi 0.19.1; jinja2 3.1.3; joblib 1.3.2; json5 NA; jsonpointer 2.4; jsonschema 4.20.0; jsonschema_specifications NA; jupyter_events 0.9.0; jupyter_server 2.12.4; jupyterlab_server 2.25.2; kiwisolver 1.4.5; legacy_api_wrap NA; leidenalg 0.10.1; llvmlite 0.41.1; markupsafe 2.1.3; matplotlib 3.8.2; mpl_toolkits NA; msgpack 1.0.7; na",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:18557,Testability,test,test,18557,"amples in spatial dimensions, we can gain insights into tissue organization and, potentially, into inter-cellular communication. sc.pl.spatial(adata, img_key=""hires"", color=""clusters"", size=1.5). Spots belonging to the same cluster in gene expression space often co-occur in spatial dimensions. For instance, spots belonging to cluster 5 are often surrounded by spots belonging to cluster 0.; We can zoom in specific regions of interests to gain qualitative insights. Furthermore, by changing the alpha values of the spots, we can visualize better the underlying tissue morphology from the H&E image. sc.pl.spatial(; adata,; img_key=""hires"",; color=""clusters"",; groups=[""5"", ""9""],; crop_coord=[7000, 10000, 0, 6000],; alpha=0.5,; size=1.3,; ). Cluster marker genes#; Let us further inspect cluster 5, which occurs in small groups of spots across the image.; Compute marker genes and plot a heatmap with expression levels of its top 10 marker genes across clusters. sc.tl.rank_genes_groups(adata, ""clusters"", method=""t-test""); sc.pl.rank_genes_groups_heatmap(adata, groups=""9"", n_genes=10, groupby=""clusters""). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00); WARNING: dendrogram data not found (using key=dendrogram_clusters). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.; using 'X_pca' with n_pcs = 50; Storing dendrogram info using `.uns['dendrogram_clusters']`; WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.; categories: 0, 1, 2, etc.; var_group_labels: 3. We see that CR2 recapitulates the spatial structure. sc.pl.spatial(adata, img",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:18826,Testability,log,logfoldchanges,18826,"l dimensions. For instance, spots belonging to cluster 5 are often surrounded by spots belonging to cluster 0.; We can zoom in specific regions of interests to gain qualitative insights. Furthermore, by changing the alpha values of the spots, we can visualize better the underlying tissue morphology from the H&E image. sc.pl.spatial(; adata,; img_key=""hires"",; color=""clusters"",; groups=[""5"", ""9""],; crop_coord=[7000, 10000, 0, 6000],; alpha=0.5,; size=1.3,; ). Cluster marker genes#; Let us further inspect cluster 5, which occurs in small groups of spots across the image.; Compute marker genes and plot a heatmap with expression levels of its top 10 marker genes across clusters. sc.tl.rank_genes_groups(adata, ""clusters"", method=""t-test""); sc.pl.rank_genes_groups_heatmap(adata, groups=""9"", n_genes=10, groupby=""clusters""). ranking genes; finished: added to `.uns['rank_genes_groups']`; 'names', sorted np.recarray to be indexed by group ids; 'scores', sorted np.recarray to be indexed by group ids; 'logfoldchanges', sorted np.recarray to be indexed by group ids; 'pvals', sorted np.recarray to be indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00); WARNING: dendrogram data not found (using key=dendrogram_clusters). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.; using 'X_pca' with n_pcs = 50; Storing dendrogram info using `.uns['dendrogram_clusters']`; WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.; categories: 0, 1, 2, etc.; var_group_labels: 3. We see that CR2 recapitulates the spatial structure. sc.pl.spatial(adata, img_key=""hires"", color=[""clusters"", ""CR2""]). sc.pl.spatial(adata, img_key=""hires"", color=[""COL1A2"", ""SYPL1""], alpha=0.7). MERFISH example#; In case you have spatial data generated with FISH-based techniques, just read the cordinate table and assign it to the adata.obsm element.; Letâs",MatchSource.WIKI,en/stable/tutorials/spatial/basic-analysis.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:8085,Deployability,toggle,toggleswitch,8085,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/spatial/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:9169,Deployability,release,release,9169," scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Spatial. Spatial#. Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. previous; Trajectory inference for hematopoiesis in mouse. next; Analysis and visualization of spatial transcriptomics data. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:7161,Performance,cache,cachedir,7161,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/spatial/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:8402,Security,hash,hashsolo,8402,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Spatial. Spatial#. Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. previous; Trajectory inference for hematopoiesis in mouse. n,MatchSource.WIKI,en/stable/tutorials/spatial/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:7429,Testability,log,logfile,7429,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/spatial/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:7468,Testability,log,logpath,7468,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/spatial/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:7774,Testability,log,logging,7774,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/spatial/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:7803,Testability,log,logging,7803, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/spatial/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:12852,Availability,avail,available,12852,"thonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scanorama 1.7.4; scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sortedcontainers 2.4.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 13:25. Reading the data#; We will use two Visium spatial transcriptomics dataset of the mouse brain (Sagittal), which are publicly available from the 10x genomics website.; The function datasets.visium_sge() downloads the dataset from 10x genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and visualize them.; When using your own Visium data, use Scanpyâs read_visium() function to import it. adata_spatial_anterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Anterior""; ); adata_spatial_posterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Posterior""; ). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Anterior/filtered_feature_bc_matrix.h5; (0:00:01); reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_bc_matrix.h5; (0:00:01). adata_spatial_anterior.var_names_make_unique(); adata_spatial_posterior.var_names_make_unique();",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:12929,Availability,down,downloads,12929,"; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sortedcontainers 2.4.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 13:25. Reading the data#; We will use two Visium spatial transcriptomics dataset of the mouse brain (Sagittal), which are publicly available from the 10x genomics website.; The function datasets.visium_sge() downloads the dataset from 10x genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and visualize them.; When using your own Visium data, use Scanpyâs read_visium() function to import it. adata_spatial_anterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Anterior""; ); adata_spatial_posterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Posterior""; ). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Anterior/filtered_feature_bc_matrix.h5; (0:00:01); reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_bc_matrix.h5; (0:00:01). adata_spatial_anterior.var_names_make_unique(); adata_spatial_posterior.var_names_make_unique(); sc.pp.calculate_qc_metrics(adata_spatial_anterior, inplace=True); sc.pp.calculate_qc_metrics(adata_spatial_posterior, inplace=True). for name, adata in [; (""anterior"", adata",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:14551,Availability,down,downloads,14551,"Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_bc_matrix.h5; (0:00:01). adata_spatial_anterior.var_names_make_unique(); adata_spatial_posterior.var_names_make_unique(); sc.pp.calculate_qc_metrics(adata_spatial_anterior, inplace=True); sc.pp.calculate_qc_metrics(adata_spatial_posterior, inplace=True). for name, adata in [; (""anterior"", adata_spatial_anterior),; (""posterior"", adata_spatial_posterior),; ]:; fig, axs = plt.subplots(1, 4, figsize=(12, 3)); fig.suptitle(f""Covariates for filtering: {name}""). sns.histplot(adata.obs[""total_counts""], kde=False, ax=axs[0]); sns.histplot(; adata.obs[""total_counts""][adata.obs[""total_counts""] < 20000],; kde=False,; bins=40,; ax=axs[1],; ); sns.histplot(adata.obs[""n_genes_by_counts""], kde=False, bins=60, ax=axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). sc.datasets.visium_sge downloads the filtered visium dataset, the output of spaceranger that contains only spots within the tissue slice. Indeed, looking at standard QC metrics we can observe that the samples do not contain empty spots.; We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). As discussed previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); no",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19806,Availability,down,downloaded,19806,"tte length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nn",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19872,Availability,down,download,19872," color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/G",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:8134,Deployability,toggle,toggleswitch,8134,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9218,Deployability,release,release,9218,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9377,Deployability,integrat,integration,9377," scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9395,Deployability,integrat,integration,9395," scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9683,Deployability,integrat,integration,9683,"ternal.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9872,Deployability,integrat,integration,9872,"scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; d",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9963,Deployability,install,install,9963,"py.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fbpca NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; intervaltree ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:10020,Deployability,install,install,10020,"py.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fbpca NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; intervaltree ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:10076,Deployability,install,install,10076,"tem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fbpca NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; intervaltree NA; ipykernel 6.28.0; ipywidgets 8.1.1; isoduration NA; jedi 0.19.1; jinja2 3.1.3;",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:10133,Deployability,install,install,10133,"ontributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fbpca NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; intervaltree NA; ipykernel 6.28.0; ipywidgets 8.1.1; isoduration NA; jedi 0.19.1; jinja2 3.1.3; joblib 1.3.2; json5 NA; jsonpointer 2.4; jsonschema ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:12699,Deployability,update,updated,12699,"sole NA; pydevd 2.9.5; pydevd_file_utils NA; pydevd_plugins NA; pydevd_tracing NA; pygments 2.17.2; pyparsing 3.1.1; pythonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scanorama 1.7.4; scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sortedcontainers 2.4.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 13:25. Reading the data#; We will use two Visium spatial transcriptomics dataset of the mouse brain (Sagittal), which are publicly available from the 10x genomics website.; The function datasets.visium_sge() downloads the dataset from 10x genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and visualize them.; When using your own Visium data, use Scanpyâs read_visium() function to import it. adata_spatial_anterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Anterior""; ); adata_spatial_posterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Posterior""; ). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Anterior/filtered_feature_bc_matrix.h5; (0:00:01); reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_b",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:15889,Deployability,integrat,integration,15889,"previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:15931,Deployability,integrat,integration,15931,"previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16062,Deployability,integrat,integrated,16062,"ansform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbor",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16492,Deployability,integrat,integrated,16492,", float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbors(adata_spatial, use_rep=""X_scanorama""); sc.tl.umap(adata_spatial); sc.tl.leiden(; adata_spatial, key_added=""clusters"", n_iterations=2, flavor=""igraph"", directed=False; ). computing neighbors; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:02); computing UMAP; finished: added; 'X_umap', UMAP coo",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16652,Deployability,integrat,integration,16652,"ounts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbors(adata_spatial, use_rep=""X_scanorama""); sc.tl.umap(adata_spatial); sc.tl.leiden(; adata_spatial, key_added=""clusters"", n_iterations=2, flavor=""igraph"", directed=False; ). computing neighbors; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:02); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:06); running Leiden clustering; finished: found 22 clusters and added; 'clusters', the cluster label",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19241,Deployability,integrat,integration,19241,"bplots(1, 2, figsize=(15, 10)). for i, library in enumerate(; [""V1_Mouse_Brain_Sagittal_Anterior"", ""V1_Mouse_Brain_Sagittal_Posterior""]; ):; ad = adata_spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more ca",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19342,Deployability,integrat,integration,19342,"spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cel",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19423,Deployability,integrat,integration,19423,"spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cel",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20091,Deployability,integrat,integration,20091,"brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", inde",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20278,Deployability,integrat,integration,20278,"Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", index_col=""sample_name""; ); meta = meta.loc[counts.index]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20357,Deployability,integrat,integrated,20357,"Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", index_col=""sample_name""; ); meta = meta.loc[counts.index]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:21001,Deployability,install,install,21001,"um dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", index_col=""sample_name""; ); meta = meta.loc[counts.index]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_symbol""); annot = annot[annot.index.isin(counts.columns)]; counts = counts.rename(columns=dict(zip(annot.index, annot[""ensembl_gene_id""]))); adata_cortex = an.AnnData(counts, obs=meta); sc.pp.normalize_total(adata_cortex, inplace=True); sc.pp.log1p(adata_cortex); adata_cortex.write_h5ad(""data/adata_processed.h5ad""). adata_cortex = sc.read(""./data/adata_processed.h5ad""). adata_spatial_anterior.var.set_index(""gene_ids"", inplace=True); adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spati",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:22214,Deployability,integrat,integration,22214,"x]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_symbol""); annot = annot[annot.index.isin(counts.columns)]; counts = counts.rename(columns=dict(zip(annot.index, annot[""ensembl_gene_id""]))); adata_cortex = an.AnnData(counts, obs=meta); sc.pp.normalize_total(adata_cortex, inplace=True); sc.pp.log1p(adata_cortex); adata_cortex.write_h5ad(""data/adata_processed.h5ad""). adata_cortex = sc.read(""./data/adata_processed.h5ad""). adata_spatial_anterior.var.set_index(""gene_ids"", inplace=True); adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spatial""][:, 1] < 6000, :; ]; adata_posterior_subset = adata_spatial_posterior[; (adata_spatial_posterior.obsm[""spatial""][:, 1] < 4000); & (adata_spatial_posterior.obsm[""spatial""][:, 0] < 6000),; :,; ]. Run integration with Scanorama. adatas_anterior = [adata_cortex, adata_anterior_subset]; adatas_posterior = [adata_cortex, adata_posterior_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:22768,Deployability,integrat,integrated,22768,"; adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spatial""][:, 1] < 6000, :; ]; adata_posterior_subset = adata_spatial_posterior[; (adata_spatial_posterior.obsm[""spatial""][:, 1] < 4000); & (adata_spatial_posterior.obsm[""spatial""][:, 0] < 6000),; :,; ]. Run integration with Scanorama. adatas_anterior = [adata_cortex, adata_anterior_subset]; adatas_posterior = [adata_cortex, adata_posterior_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ). At this step, we have integrated each visium dataset in a common embedding with the scRNA-seq dataset. In such embedding space, we can compute distances between samples and use such distances as weights to be used for for propagating labels from the scRNA-seq dataset to the Visium dataset.; Such approach is very similar to the TransferData function in Seurat (see paper). Here, we re-implement the label transfer function with a simple python function, see below.; Frist, ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:23320,Deployability,integrat,integrated,23320,"_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ). At this step, we have integrated each visium dataset in a common embedding with the scRNA-seq dataset. In such embedding space, we can compute distances between samples and use such distances as weights to be used for for propagating labels from the scRNA-seq dataset to the Visium dataset.; Such approach is very similar to the TransferData function in Seurat (see paper). Here, we re-implement the label transfer function with a simple python function, see below.; Frist, letâs compute cosine distances between the visium dataset and the scRNA-seq dataset, in the common embedding space. from sklearn.metrics.pairwise import cosine_distances. distances_anterior = 1 - cosine_distances(; adata_cortex_anterior[adata_cortex_anterior.obs.dataset == ""smart-seq""].obsm[; ""X_scanorama""; ],; adata_cortex_anterior[adata_cortex_anterior.obs.dataset == ""visium""].obsm[; ""X_scanorama""; ],; ); distances_posterior = 1 - cosine_distances(; adata_cortex_posterior[adata_cortex_posterior.obs.dataset == ""smart-seq""].obsm[; ""X_scanorama""; ],; adata_cortex_posterio",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27206,Deployability,integrat,integration,27206,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27835,Deployability,integrat,integration,27835,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27853,Deployability,integrat,integration,27853,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9377,Integrability,integrat,integration,9377," scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9395,Integrability,integrat,integration,9395," scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9683,Integrability,integrat,integration,9683,"ternal.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9872,Integrability,integrat,integration,9872,"scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; d",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9924,Integrability,interface,interface,9924,"l.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:15889,Integrability,integrat,integration,15889,"previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:15931,Integrability,integrat,integration,15931,"previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16062,Integrability,integrat,integrated,16062,"ansform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbor",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16492,Integrability,integrat,integrated,16492,", float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbors(adata_spatial, use_rep=""X_scanorama""); sc.tl.umap(adata_spatial); sc.tl.leiden(; adata_spatial, key_added=""clusters"", n_iterations=2, flavor=""igraph"", directed=False; ). computing neighbors; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:02); computing UMAP; finished: added; 'X_umap', UMAP coo",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16652,Integrability,integrat,integration,16652,"ounts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbors(adata_spatial, use_rep=""X_scanorama""); sc.tl.umap(adata_spatial); sc.tl.leiden(; adata_spatial, key_added=""clusters"", n_iterations=2, flavor=""igraph"", directed=False; ). computing neighbors; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:02); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:06); running Leiden clustering; finished: found 22 clusters and added; 'clusters', the cluster label",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19241,Integrability,integrat,integration,19241,"bplots(1, 2, figsize=(15, 10)). for i, library in enumerate(; [""V1_Mouse_Brain_Sagittal_Anterior"", ""V1_Mouse_Brain_Sagittal_Posterior""]; ):; ad = adata_spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more ca",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19342,Integrability,integrat,integration,19342,"spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cel",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19423,Integrability,integrat,integration,19423,"spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cel",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20091,Integrability,integrat,integration,20091,"brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", inde",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20278,Integrability,integrat,integration,20278,"Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", index_col=""sample_name""; ); meta = meta.loc[counts.index]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20357,Integrability,integrat,integrated,20357,"Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", index_col=""sample_name""; ); meta = meta.loc[counts.index]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:22214,Integrability,integrat,integration,22214,"x]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_symbol""); annot = annot[annot.index.isin(counts.columns)]; counts = counts.rename(columns=dict(zip(annot.index, annot[""ensembl_gene_id""]))); adata_cortex = an.AnnData(counts, obs=meta); sc.pp.normalize_total(adata_cortex, inplace=True); sc.pp.log1p(adata_cortex); adata_cortex.write_h5ad(""data/adata_processed.h5ad""). adata_cortex = sc.read(""./data/adata_processed.h5ad""). adata_spatial_anterior.var.set_index(""gene_ids"", inplace=True); adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spatial""][:, 1] < 6000, :; ]; adata_posterior_subset = adata_spatial_posterior[; (adata_spatial_posterior.obsm[""spatial""][:, 1] < 4000); & (adata_spatial_posterior.obsm[""spatial""][:, 0] < 6000),; :,; ]. Run integration with Scanorama. adatas_anterior = [adata_cortex, adata_anterior_subset]; adatas_posterior = [adata_cortex, adata_posterior_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:22768,Integrability,integrat,integrated,22768,"; adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spatial""][:, 1] < 6000, :; ]; adata_posterior_subset = adata_spatial_posterior[; (adata_spatial_posterior.obsm[""spatial""][:, 1] < 4000); & (adata_spatial_posterior.obsm[""spatial""][:, 0] < 6000),; :,; ]. Run integration with Scanorama. adatas_anterior = [adata_cortex, adata_anterior_subset]; adatas_posterior = [adata_cortex, adata_posterior_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ). At this step, we have integrated each visium dataset in a common embedding with the scRNA-seq dataset. In such embedding space, we can compute distances between samples and use such distances as weights to be used for for propagating labels from the scRNA-seq dataset to the Visium dataset.; Such approach is very similar to the TransferData function in Seurat (see paper). Here, we re-implement the label transfer function with a simple python function, see below.; Frist, ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:23320,Integrability,integrat,integrated,23320,"_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ). At this step, we have integrated each visium dataset in a common embedding with the scRNA-seq dataset. In such embedding space, we can compute distances between samples and use such distances as weights to be used for for propagating labels from the scRNA-seq dataset to the Visium dataset.; Such approach is very similar to the TransferData function in Seurat (see paper). Here, we re-implement the label transfer function with a simple python function, see below.; Frist, letâs compute cosine distances between the visium dataset and the scRNA-seq dataset, in the common embedding space. from sklearn.metrics.pairwise import cosine_distances. distances_anterior = 1 - cosine_distances(; adata_cortex_anterior[adata_cortex_anterior.obs.dataset == ""smart-seq""].obsm[; ""X_scanorama""; ],; adata_cortex_anterior[adata_cortex_anterior.obs.dataset == ""visium""].obsm[; ""X_scanorama""; ],; ); distances_posterior = 1 - cosine_distances(; adata_cortex_posterior[adata_cortex_posterior.obs.dataset == ""smart-seq""].obsm[; ""X_scanorama""; ],; adata_cortex_posterio",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27206,Integrability,integrat,integration,27206,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27835,Integrability,integrat,integration,27835,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27853,Integrability,integrat,integration,27853,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:14881,Modifiability,variab,variable,14881,"s(adata_spatial_anterior, inplace=True); sc.pp.calculate_qc_metrics(adata_spatial_posterior, inplace=True). for name, adata in [; (""anterior"", adata_spatial_anterior),; (""posterior"", adata_spatial_posterior),; ]:; fig, axs = plt.subplots(1, 4, figsize=(12, 3)); fig.suptitle(f""Covariates for filtering: {name}""). sns.histplot(adata.obs[""total_counts""], kde=False, ax=axs[0]); sns.histplot(; adata.obs[""total_counts""][adata.obs[""total_counts""] < 20000],; kde=False,; bins=40,; ax=axs[1],; ); sns.histplot(adata.obs[""n_genes_by_counts""], kde=False, bins=60, ax=axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). sc.datasets.visium_sge downloads the filtered visium dataset, the output of spaceranger that contains only spots within the tissue slice. Indeed, looking at standard QC metrics we can observe that the samples do not contain empty spots.; We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). As discussed previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var)",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:15385,Modifiability,variab,variable,15385,"axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). sc.datasets.visium_sge downloads the filtered visium dataset, the output of spaceranger that contains only spots within the tissue slice. Indeed, looking at standard QC metrics we can observe that the samples do not contain empty spots.; We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). As discussed previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.488",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:15668,Modifiability,variab,variable,15668,"ooking at standard QC metrics we can observe that the samples do not contain empty spots.; We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). As discussed previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notic",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:26262,Modifiability,layers,layers,26262,"er annotated cell types from the scRNA-seq dataset.; We convert the class_prob_[anterior-posterior] object to a dataframe and assign it to the respective anndata. cp_anterior_df = pd.DataFrame(; class_prob_anterior,; columns=sorted(adata_cortex.obs[""cell_subclass""].cat.categories),; ); cp_posterior_df = pd.DataFrame(; class_prob_posterior,; columns=sorted(adata_cortex.obs[""cell_subclass""].cat.categories),; ). cp_anterior_df.index = adata_anterior_subset.obs.index; cp_posterior_df.index = adata_posterior_subset.obs.index. adata_anterior_subset_transfer = adata_anterior_subset.copy(); adata_anterior_subset_transfer.obs = pd.concat(; [adata_anterior_subset.obs, cp_anterior_df], axis=1; ). adata_posterior_subset_transfer = adata_posterior_subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama,",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:26589,Modifiability,layers,layers,26589,"ortex.obs[""cell_subclass""].cat.categories),; ). cp_anterior_df.index = adata_anterior_subset.obs.index; cp_posterior_df.index = adata_posterior_subset.obs.index. adata_anterior_subset_transfer = adata_anterior_subset.copy(); adata_anterior_subset_transfer.obs = pd.concat(; [adata_anterior_subset.obs, cp_anterior_df], axis=1; ). adata_posterior_subset_transfer = adata_posterior_subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:7210,Performance,cache,cachedir,7210,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9675,Performance,perform,perform,9675,"ternal.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9864,Performance,perform,perform,9864,"scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; d",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:15923,Performance,perform,perform,15923,"previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19410,Performance,perform,perform,19410,"spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cel",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20115,Performance,perform,performed,20115,"brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", inde",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20303,Performance,perform,performed,20303,"Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", index_col=""sample_name""; ); meta = meta.loc[counts.index]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27054,Performance,perform,perform,27054,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27218,Performance,perform,performances,27218,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Letâs first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:14867,Safety,detect,detect,14867,"s(adata_spatial_anterior, inplace=True); sc.pp.calculate_qc_metrics(adata_spatial_posterior, inplace=True). for name, adata in [; (""anterior"", adata_spatial_anterior),; (""posterior"", adata_spatial_posterior),; ]:; fig, axs = plt.subplots(1, 4, figsize=(12, 3)); fig.suptitle(f""Covariates for filtering: {name}""). sns.histplot(adata.obs[""total_counts""], kde=False, ax=axs[0]); sns.histplot(; adata.obs[""total_counts""][adata.obs[""total_counts""] < 20000],; kde=False,; bins=40,; ax=axs[1],; ); sns.histplot(adata.obs[""n_genes_by_counts""], kde=False, bins=60, ax=axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). sc.datasets.visium_sge downloads the filtered visium dataset, the output of spaceranger that contains only spots within the tissue slice. Indeed, looking at standard QC metrics we can observe that the samples do not contain empty spots.; We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). As discussed previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var)",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:8451,Security,hash,hashsolo,8451,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integratin,MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:7478,Testability,log,logfile,7478,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:7517,Testability,log,logpath,7517,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:7823,Testability,log,logging,7823,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:7852,Testability,log,logging,7852, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:10359,Testability,log,logging,10359,"he data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fbpca NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; intervaltree NA; ipykernel 6.28.0; ipywidgets 8.1.1; isoduration NA; jedi 0.19.1; jinja2 3.1.3; joblib 1.3.2; json5 NA; jsonpointer 2.4; jsonschema 4.20.0; jsonschema_specifications NA; jupyter_events 0.9.0; jupyter_server 2.12.4; jupyterlab_server 2.25.2; kiwisolver 1.4.5; legacy_api_wrap NA; leidenalg 0.10.1; llvmlite 0.41.1; markupsafe 2.1.3; matplotlib 3.8.2; mpl_too",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19083,Usability,clear,clearly,19083," alongside each other. clusters_colors = dict(; zip([str(i) for i in range(18)], adata_spatial.uns[""clusters_colors""]); ). fig, axs = plt.subplots(1, 2, figsize=(15, 10)). for i, library in enumerate(; [""V1_Mouse_Brain_Sagittal_Anterior"", ""V1_Mouse_Brain_Sagittal_Posterior""]; ):; ad = adata_spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on t",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19283,Usability,clear,clear,19283,"bplots(1, 2, figsize=(15, 10)). for i, library in enumerate(; [""V1_Mouse_Brain_Sagittal_Anterior"", ""V1_Mouse_Brain_Sagittal_Posterior""]; ):; ad = adata_spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more ca",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:23729,Usability,simpl,simple,23729,"g datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ). At this step, we have integrated each visium dataset in a common embedding with the scRNA-seq dataset. In such embedding space, we can compute distances between samples and use such distances as weights to be used for for propagating labels from the scRNA-seq dataset to the Visium dataset.; Such approach is very similar to the TransferData function in Seurat (see paper). Here, we re-implement the label transfer function with a simple python function, see below.; Frist, letâs compute cosine distances between the visium dataset and the scRNA-seq dataset, in the common embedding space. from sklearn.metrics.pairwise import cosine_distances. distances_anterior = 1 - cosine_distances(; adata_cortex_anterior[adata_cortex_anterior.obs.dataset == ""smart-seq""].obsm[; ""X_scanorama""; ],; adata_cortex_anterior[adata_cortex_anterior.obs.dataset == ""visium""].obsm[; ""X_scanorama""; ],; ); distances_posterior = 1 - cosine_distances(; adata_cortex_posterior[adata_cortex_posterior.obs.dataset == ""smart-seq""].obsm[; ""X_scanorama""; ],; adata_cortex_posterior[adata_cortex_posterior.obs.dataset == ""visium""].obsm[; ""X_scanorama""; ],; ). Then, letâs propagate labels from the scRNA-seq dataset to the visium dataset. def label_transfer(dist, labels):; lab = pd.get_dummies(labels).to_numpy().T; class_prob = lab @ dist; norm = np.linalg.norm(class_prob, 2, axis=0); class_prob = class_prob / norm; class_prob = (class_prob.T - ",MatchSource.WIKI,en/stable/tutorials/spatial/integration-scanorama.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:8090,Deployability,toggle,toggleswitch,8090,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/trajectories/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:9174,Deployability,release,release,9174,"fig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Trajectories. Trajectories#. Trajectory inference for hematopoiesis in mouse. previous; Customizing Scanpy plots. next; Trajectory inference for hematopoiesis in mouse. By Scanpy development team. ; Â© Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,en/stable/tutorials/trajectories/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:7166,Performance,cache,cachedir,7166,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/trajectories/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:8407,Security,hash,hashsolo,8407,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Trajectories. Trajectories#. Trajectory inference for hematopoiesis in mouse. previous; Customizing Scanpy plots. next; Trajectory inference for hematopoiesis in mouse. By Scanpy development team.,MatchSource.WIKI,en/stable/tutorials/trajectories/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:7434,Testability,log,logfile,7434,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/trajectories/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:7473,Testability,log,logpath,7473,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/trajectories/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:7779,Testability,log,logging,7779,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/trajectories/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:7808,Testability,log,logging,7808, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/trajectories/index.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:10014,Availability,error,errors,10014,"ject; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Trajectory inference for hematopoiesis in mouse. Contents . Preprocessing and Visualization; Optional: Denoising the graph; Clustering and PAGA; Recomputing the embedding using PAGA-initialization; Reconstructing gene changes along PAGA paths for a given set of genes. Trajectory inference for hematopoiesis in mouse#. See also; More examples for trajectory inference on complex datasets can be found in the; PAGA repository [Wolf et al., 2019], for instance, multi-resolution analyses of whole animals,; such as for planaria for data of Plass et al. [2018]. Reconstructing myeloid and erythroid differentiation for data of Paul et al. (2015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots per inch) yields small inline figures; sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. adata = sc.datasets.paul15(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. adata. AnnData object with n_obs Ã n_vars = 2730 Ã 3451 ; obs: 'paul15_clusters'; uns: 'iroot'. Let us work with a higher precision than the default âfloat32â to ensure exactly the same results across different computational platforms. # this is not required and results will be comparable without it; adata.X = adata.X.astype(""float64""). Preprocessing and Visualization#; Apply a simple preprocessing recipe. sc.pp.recipe_zheng17(adata). running recipe zheng17; normalizing counts per cell; finished (0",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:8125,Deployability,toggle,toggleswitch,8125,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:9209,Deployability,release,release,9209,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Trajectory inference for hematopoiesis in mouse. Contents . Preprocessing and Visualization; Optional: Denoising the graph; Clustering and PAGA; Recomputing the embedding using PAGA-initialization; Reconstructing gene changes along PAGA paths for a given set of genes. Trajectory inference for hematopoiesis in mouse#. See also; More examples for trajectory inference on complex datasets can be found in the; PAGA repository [Wolf et al., 2019], for instance, multi-resolution analyses of whole animals,; such as for planaria for data of Plass et al. [2018]. Reconstructing myeloid and erythroid differentiation for data of Paul et al. (2015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:16809,Energy Efficiency,green,green,16809,"lowing is just as well possible for a UMAP. sc.tl.draw_graph(adata, init_pos=""paga""). drawing single-cell graph using layout 'fa'; finished: added; 'X_draw_graph_fa', graph_drawing coordinates (adata.obsm) (0:00:13). Now we can see all marker genes also at single-cell resolution in a meaningful layout. sc.pl.draw_graph(; adata, color=[""louvain_anno"", ""Itga2b"", ""Prss34"", ""Cma1""], legend_loc=""on data""; ). Choose the colors of the clusters a bit more consistently. pl.figure(figsize=(8, 2)); for i in range(28):; pl.scatter(i, 1, c=sc.pl.palettes.zeileis_28[i], s=200); pl.show(). zeileis_colors = np.array(sc.pl.palettes.zeileis_28); new_colors = np.array(adata.uns[""louvain_anno_colors""]). new_colors[[16]] = zeileis_colors[[12]] # Stem colors / green; new_colors[[10, 17, 5, 3, 15, 6, 18, 13, 7, 12]] = zeileis_colors[ # Ery colors / red; [5, 5, 5, 5, 11, 11, 10, 9, 21, 21]; ]; new_colors[[20, 8]] = zeileis_colors[[17, 16]] # Mk early Ery colors / yellow; new_colors[[4, 0]] = zeileis_colors[[2, 8]] # lymph progenitors / grey; new_colors[[22]] = zeileis_colors[[18]] # Baso / turquoise; new_colors[[19, 14, 2]] = zeileis_colors[[6, 6, 6]] # Neu / light blue; new_colors[[24, 9, 1, 11]] = zeileis_colors[[0, 0, 0, 0]] # Mo / dark blue; new_colors[[21, 23]] = zeileis_colors[[25, 25]] # outliers / grey. adata.uns[""louvain_anno_colors""] = new_colors. And add some white space to some cluster names. The layout shown here differs from the one in the paper, which can be found here. These differences, however, are only cosmetic. We had to change the layout as we moved from a randomized PCA and float32 to float64 precision. sc.pl.paga_compare(; adata,; threshold=0.03,; title="""",; right_margin=0.2,; size=10,; edge_width_scale=0.5,; legend_fontsize=12,; fontsize=12,; frameon=False,; edges=True,; save=True,; ). --> added 'pos', the PAGA positions (adata.uns['paga']); WARNING: saving figure to file figures/paga_compare.pdf. Reconstructing gene changes along PAGA paths for a given set of genes",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:11053,Modifiability,variab,variable,11053,"; sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots per inch) yields small inline figures; sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. adata = sc.datasets.paul15(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. adata. AnnData object with n_obs Ã n_vars = 2730 Ã 3451 ; obs: 'paul15_clusters'; uns: 'iroot'. Let us work with a higher precision than the default âfloat32â to ensure exactly the same results across different computational platforms. # this is not required and results will be comparable without it; adata.X = adata.X.astype(""float64""). Preprocessing and Visualization#; Apply a simple preprocessing recipe. sc.pp.recipe_zheng17(adata). running recipe zheng17; normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); normalizing counts per cell; finished (0:00:00); finished (0:00:00). sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:00:00). sc.pp.neighbors(adata, n_neighbors=4, n_pcs=20); sc.tl.draw_graph(adata). computing neighbors; using 'X_pca' with n_pcs = 20; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:02); drawing single-cell graph using layout 'fa'; finished: added; 'X_draw_graph_fa', graph_drawing coordinates (adata.obsm) (0:00:14). sc.pl.draw_graph(adata, color=""paul15_clusters"", legend_loc=""on data""). This looks pretty messy. Optional: Denoising the graph#; To denoise the graph, we represent it in diffusion map space (and not in PCA space). Computing distances within a few diffusion components amounts to denoising the graph - we just take a few of the first spectral components. Itâs very similar to denoising a da",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:7201,Performance,cache,cachedir,7201,; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_gene,MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:8442,Security,hash,hashsolo,8442,tings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Trajectory inference for hematopoiesis in mouse. Contents . Preprocessing and Visualization; Optional: Denoising the graph; Clustering and PAGA; Recomputing the embedding using PAGA-initializat,MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:7469,Testability,log,logfile,7469,_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; s,MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:7508,Testability,log,logpath,7508,.recipe_pearson_residuals. Classes; scanpy.Neighbors; scanpy.Neighbors.connectivities; scanpy.Neighbors.distances; scanpy.Neighbors.distances_dpt; scanpy.Neighbors.eigen_basis; scanpy.Neighbors.eigen_values; scanpy.Neighbors.rp_forest; scanpy.Neighbors.transitions; scanpy.Neighbors.transitions_sym; scanpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; sca,MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:7814,Testability,log,logging,7814,anpy.Neighbors.compute_eigen; scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy,MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:7843,Testability,log,logging,7843, scanpy.Neighbors.compute_neighbors; scanpy.Neighbors.compute_transitions; scanpy.Neighbors.getdoc; scanpy.Neighbors.to_igraph. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy._settings.ScanpyConfig.autosave; scanpy._settings.ScanpyConfig.autoshow; scanpy._settings.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plottin,MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:10064,Testability,log,logging,10064,". Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Trajectory inference for hematopoiesis in mouse. Contents . Preprocessing and Visualization; Optional: Denoising the graph; Clustering and PAGA; Recomputing the embedding using PAGA-initialization; Reconstructing gene changes along PAGA paths for a given set of genes. Trajectory inference for hematopoiesis in mouse#. See also; More examples for trajectory inference on complex datasets can be found in the; PAGA repository [Wolf et al., 2019], for instance, multi-resolution analyses of whole animals,; such as for planaria for data of Plass et al. [2018]. Reconstructing myeloid and erythroid differentiation for data of Paul et al. (2015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots per inch) yields small inline figures; sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. adata = sc.datasets.paul15(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. adata. AnnData object with n_obs Ã n_vars = 2730 Ã 3451 ; obs: 'paul15_clusters'; uns: 'iroot'. Let us work with a higher precision than the default âfloat32â to ensure exactly the same results across different computational platforms. # this is not required and results will be comparable without it; adata.X = adata.X.astype(""float64""). Preprocessing and Visualization#; Apply a simple preprocessing recipe. sc.pp.recipe_zheng17(adata). running recipe zheng17; normalizing counts per cell; finished (0:00:00); extracting highly variable genes;",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:10464,Testability,log,logarithmized,10464,"cting gene changes along PAGA paths for a given set of genes. Trajectory inference for hematopoiesis in mouse#. See also; More examples for trajectory inference on complex datasets can be found in the; PAGA repository [Wolf et al., 2019], for instance, multi-resolution analyses of whole animals,; such as for planaria for data of Plass et al. [2018]. Reconstructing myeloid and erythroid differentiation for data of Paul et al. (2015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots per inch) yields small inline figures; sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. adata = sc.datasets.paul15(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. adata. AnnData object with n_obs Ã n_vars = 2730 Ã 3451 ; obs: 'paul15_clusters'; uns: 'iroot'. Let us work with a higher precision than the default âfloat32â to ensure exactly the same results across different computational platforms. # this is not required and results will be comparable without it; adata.X = adata.X.astype(""float64""). Preprocessing and Visualization#; Apply a simple preprocessing recipe. sc.pp.recipe_zheng17(adata). running recipe zheng17; normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); normalizing counts per cell; finished (0:00:00); finished (0:00:00). sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:00:00). sc.pp.neighbors(adata, n_neighbors=4, n_pcs=20); sc.tl.draw_graph(adata). computing neighbors; using 'X_pca' with n_pcs = 20; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of n",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:10503,Testability,log,logarithmized,10503,"or a given set of genes. Trajectory inference for hematopoiesis in mouse#. See also; More examples for trajectory inference on complex datasets can be found in the; PAGA repository [Wolf et al., 2019], for instance, multi-resolution analyses of whole animals,; such as for planaria for data of Plass et al. [2018]. Reconstructing myeloid and erythroid differentiation for data of Paul et al. (2015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots per inch) yields small inline figures; sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. adata = sc.datasets.paul15(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. adata. AnnData object with n_obs Ã n_vars = 2730 Ã 3451 ; obs: 'paul15_clusters'; uns: 'iroot'. Let us work with a higher precision than the default âfloat32â to ensure exactly the same results across different computational platforms. # this is not required and results will be comparable without it; adata.X = adata.X.astype(""float64""). Preprocessing and Visualization#; Apply a simple preprocessing recipe. sc.pp.recipe_zheng17(adata). running recipe zheng17; normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); normalizing counts per cell; finished (0:00:00); finished (0:00:00). sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:00:00). sc.pp.neighbors(adata, n_neighbors=4, n_pcs=20); sc.tl.draw_graph(adata). computing neighbors; using 'X_pca' with n_pcs = 20; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, w",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:18710,Testability,log,logarithmized,18710,"data,; threshold=0.03,; title="""",; right_margin=0.2,; size=10,; edge_width_scale=0.5,; legend_fontsize=12,; fontsize=12,; frameon=False,; edges=True,; save=True,; ). --> added 'pos', the PAGA positions (adata.uns['paga']); WARNING: saving figure to file figures/paga_compare.pdf. Reconstructing gene changes along PAGA paths for a given set of genes#; Choose a root cell for diffusion pseudotime. adata.uns[""iroot""] = np.flatnonzero(adata.obs[""louvain_anno""] == ""16/Stem"")[0]. sc.tl.dpt(adata). computing Diffusion Pseudotime using n_dcs=10; finished: added; 'dpt_pseudotime', the pseudotime (adata.obs) (0:00:00). Select some of the marker gene names. gene_names = [; *[""Gata2"", ""Gata1"", ""Klf1"", ""Epor"", ""Hba-a2""], # erythroid; *[""Elane"", ""Cebpe"", ""Gfi1""], # neutrophil; *[""Irf8"", ""Csf1r"", ""Ctsg""], # monocyte; ]. Use the full raw data for visualization. adata_raw = sc.datasets.paul15(); sc.pp.log1p(adata_raw); sc.pp.scale(adata_raw); adata.raw = adata_raw. WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. sc.pl.draw_graph(adata, color=[""louvain_anno"", ""dpt_pseudotime""], legend_loc=""on data""). paths = [; (""erythrocytes"", [16, 12, 7, 13, 18, 6, 5, 10]),; (""neutrophils"", [16, 0, 4, 2, 14, 19]),; (""monocytes"", [16, 0, 4, 11, 1, 9, 24]),; ]. adata.obs[""distance""] = adata.obs[""dpt_pseudotime""]. adata.obs[""clusters""] = adata.obs[""louvain_anno""] # just a cosmetic change. adata.uns[""clusters_colors""] = adata.uns[""louvain_anno_colors""]. !mkdir write. mkdir: cannot create directory âwriteâ: File exists. _, axs = pl.subplots(; ncols=3, figsize=(6, 2.5), gridspec_kw={""wspace"": 0.05, ""left"": 0.12}; ); pl.subplots_adjust(left=0.05, right=0.98, top=0.82, bottom=0.2); for ipath, (descr, path) in enumerate(paths):; _, data = sc.pl.paga_path(; adata,; path,; gene_names,; show_node_names=False,; ax=axs[ipath],; ytick_fontsize=12,; left_margin=0.15,; n_avg=50,; annotations=[""distance""],; show_yticks=True if ipath == 0 else False,; show_colorbar=False",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:18749,Testability,log,logarithmized,18749,"ght_margin=0.2,; size=10,; edge_width_scale=0.5,; legend_fontsize=12,; fontsize=12,; frameon=False,; edges=True,; save=True,; ). --> added 'pos', the PAGA positions (adata.uns['paga']); WARNING: saving figure to file figures/paga_compare.pdf. Reconstructing gene changes along PAGA paths for a given set of genes#; Choose a root cell for diffusion pseudotime. adata.uns[""iroot""] = np.flatnonzero(adata.obs[""louvain_anno""] == ""16/Stem"")[0]. sc.tl.dpt(adata). computing Diffusion Pseudotime using n_dcs=10; finished: added; 'dpt_pseudotime', the pseudotime (adata.obs) (0:00:00). Select some of the marker gene names. gene_names = [; *[""Gata2"", ""Gata1"", ""Klf1"", ""Epor"", ""Hba-a2""], # erythroid; *[""Elane"", ""Cebpe"", ""Gfi1""], # neutrophil; *[""Irf8"", ""Csf1r"", ""Ctsg""], # monocyte; ]. Use the full raw data for visualization. adata_raw = sc.datasets.paul15(); sc.pp.log1p(adata_raw); sc.pp.scale(adata_raw); adata.raw = adata_raw. WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. sc.pl.draw_graph(adata, color=[""louvain_anno"", ""dpt_pseudotime""], legend_loc=""on data""). paths = [; (""erythrocytes"", [16, 12, 7, 13, 18, 6, 5, 10]),; (""neutrophils"", [16, 0, 4, 2, 14, 19]),; (""monocytes"", [16, 0, 4, 11, 1, 9, 24]),; ]. adata.obs[""distance""] = adata.obs[""dpt_pseudotime""]. adata.obs[""clusters""] = adata.obs[""louvain_anno""] # just a cosmetic change. adata.uns[""clusters_colors""] = adata.uns[""louvain_anno_colors""]. !mkdir write. mkdir: cannot create directory âwriteâ: File exists. _, axs = pl.subplots(; ncols=3, figsize=(6, 2.5), gridspec_kw={""wspace"": 0.05, ""left"": 0.12}; ); pl.subplots_adjust(left=0.05, right=0.98, top=0.82, bottom=0.2); for ipath, (descr, path) in enumerate(paths):; _, data = sc.pl.paga_path(; adata,; path,; gene_names,; show_node_names=False,; ax=axs[ipath],; ytick_fontsize=12,; left_margin=0.15,; n_avg=50,; annotations=[""distance""],; show_yticks=True if ipath == 0 else False,; show_colorbar=False,; color_map=""Greys"",; groups_key=""clu",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:10361,Usability,learn,learn,10361,"Denoising the graph; Clustering and PAGA; Recomputing the embedding using PAGA-initialization; Reconstructing gene changes along PAGA paths for a given set of genes. Trajectory inference for hematopoiesis in mouse#. See also; More examples for trajectory inference on complex datasets can be found in the; PAGA repository [Wolf et al., 2019], for instance, multi-resolution analyses of whole animals,; such as for planaria for data of Plass et al. [2018]. Reconstructing myeloid and erythroid differentiation for data of Paul et al. (2015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots per inch) yields small inline figures; sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. adata = sc.datasets.paul15(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. adata. AnnData object with n_obs Ã n_vars = 2730 Ã 3451 ; obs: 'paul15_clusters'; uns: 'iroot'. Let us work with a higher precision than the default âfloat32â to ensure exactly the same results across different computational platforms. # this is not required and results will be comparable without it; adata.X = adata.X.astype(""float64""). Preprocessing and Visualization#; Apply a simple preprocessing recipe. sc.pp.recipe_zheng17(adata). running recipe zheng17; normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); normalizing counts per cell; finished (0:00:00); finished (0:00:00). sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:00:00). sc.pp.neighbors(adata, n_neighbors=4, n_pcs=20); sc.tl.draw_graph(adata). computing neighbors; using 'X_pca' wit",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:10904,Usability,simpl,simple,10904,"015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots per inch) yields small inline figures; sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. adata = sc.datasets.paul15(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. adata. AnnData object with n_obs Ã n_vars = 2730 Ã 3451 ; obs: 'paul15_clusters'; uns: 'iroot'. Let us work with a higher precision than the default âfloat32â to ensure exactly the same results across different computational platforms. # this is not required and results will be comparable without it; adata.X = adata.X.astype(""float64""). Preprocessing and Visualization#; Apply a simple preprocessing recipe. sc.pp.recipe_zheng17(adata). running recipe zheng17; normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); normalizing counts per cell; finished (0:00:00); finished (0:00:00). sc.tl.pca(adata, svd_solver=""arpack""). computing PCA; with n_comps=50; finished (0:00:00). sc.pp.neighbors(adata, n_neighbors=4, n_pcs=20); sc.tl.draw_graph(adata). computing neighbors; using 'X_pca' with n_pcs = 20; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:02); drawing single-cell graph using layout 'fa'; finished: added; 'X_draw_graph_fa', graph_drawing coordinates (adata.obsm) (0:00:14). sc.pl.draw_graph(adata, color=""paul15_clusters"", legend_loc=""on data""). This looks pretty messy. Optional: Denoising the graph#; To denoise the graph, we represent it in diffusion map space (and not in PCA space). Computing dis",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:14267,Usability,simpl,simple,14267,".pl.draw_graph(adata, color=""paul15_clusters"", legend_loc=""on data""). This still looks messy, but in a different way: a lot of the branches are overplotted. Clustering and PAGA#. Note; Note that today, weâd use sc.tl.leiden - here, we use sc.tl.louvain the sake of reproducing the paper results. sc.tl.louvain(adata, resolution=1.0). running Louvain clustering; using the ""louvain"" package of Traag (2017); finished: found 25 clusters and added; 'louvain', the cluster labels (adata.obs, categorical) (0:00:00). Annotate the clusters using marker genes. cell type; marker. HSCs; Procr. Erythroids; Gata1, Klf1, Epor, Gypa, Hba-a2, Hba-a1, Spi1. Neutrophils; Elane, Cebpe, Ctsg, Mpo, Gfi1. Monocytes; Irf8, Csf1r, Ctsg, Mpo. Megakaryocytes; Itga2b (encodes protein CD41), Pbx1, Sdpr, Vwf. Basophils; Mcpt8, Prss34. B cells; Cd19, Vpreb2, Cd79a. Mast cells; Cma1, Gzmb, CD117/C-Kit. Mast cells & Basophils; Ms4a2, Fcer1a, Cpa3, CD203c (human). For simple, coarse-grained visualization, compute the PAGA graph, a coarse-grained and simplified (abstracted) graph. Non-significant edges in the coarse- grained graph are thresholded away. sc.tl.paga(adata, groups=""louvain""). running PAGA; finished: added; 'paga/connectivities', connectivities adjacency (adata.uns); 'paga/connectivities_tree', connectivities subtree (adata.uns) (0:00:00). sc.pl.paga(adata, color=[""louvain"", ""Hba-a2"", ""Elane"", ""Irf8""]). --> added 'pos', the PAGA positions (adata.uns['paga']). sc.pl.paga(adata, color=[""louvain"", ""Itga2b"", ""Prss34"", ""Cma1""]). --> added 'pos', the PAGA positions (adata.uns['paga']). Actually annotate the clusters â note that Cma1 is a Mast cell marker and only appears in a small fraction of the cells in the progenitor/stem cell cluster 8, see the single-cell resolved plot below. adata.obs[""louvain""].cat.categories. Index(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',; '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'],; dtype='object'). adata.obs[""louv",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:14350,Usability,simpl,simplified,14350,".pl.draw_graph(adata, color=""paul15_clusters"", legend_loc=""on data""). This still looks messy, but in a different way: a lot of the branches are overplotted. Clustering and PAGA#. Note; Note that today, weâd use sc.tl.leiden - here, we use sc.tl.louvain the sake of reproducing the paper results. sc.tl.louvain(adata, resolution=1.0). running Louvain clustering; using the ""louvain"" package of Traag (2017); finished: found 25 clusters and added; 'louvain', the cluster labels (adata.obs, categorical) (0:00:00). Annotate the clusters using marker genes. cell type; marker. HSCs; Procr. Erythroids; Gata1, Klf1, Epor, Gypa, Hba-a2, Hba-a1, Spi1. Neutrophils; Elane, Cebpe, Ctsg, Mpo, Gfi1. Monocytes; Irf8, Csf1r, Ctsg, Mpo. Megakaryocytes; Itga2b (encodes protein CD41), Pbx1, Sdpr, Vwf. Basophils; Mcpt8, Prss34. B cells; Cd19, Vpreb2, Cd79a. Mast cells; Cma1, Gzmb, CD117/C-Kit. Mast cells & Basophils; Ms4a2, Fcer1a, Cpa3, CD203c (human). For simple, coarse-grained visualization, compute the PAGA graph, a coarse-grained and simplified (abstracted) graph. Non-significant edges in the coarse- grained graph are thresholded away. sc.tl.paga(adata, groups=""louvain""). running PAGA; finished: added; 'paga/connectivities', connectivities adjacency (adata.uns); 'paga/connectivities_tree', connectivities subtree (adata.uns) (0:00:00). sc.pl.paga(adata, color=[""louvain"", ""Hba-a2"", ""Elane"", ""Irf8""]). --> added 'pos', the PAGA positions (adata.uns['paga']). sc.pl.paga(adata, color=[""louvain"", ""Itga2b"", ""Prss34"", ""Cma1""]). --> added 'pos', the PAGA positions (adata.uns['paga']). Actually annotate the clusters â note that Cma1 is a Mast cell marker and only appears in a small fraction of the cells in the progenitor/stem cell cluster 8, see the single-cell resolved plot below. adata.obs[""louvain""].cat.categories. Index(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12',; '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24'],; dtype='object'). adata.obs[""louv",MatchSource.WIKI,en/stable/tutorials/trajectories/paga-paul15.html,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html
